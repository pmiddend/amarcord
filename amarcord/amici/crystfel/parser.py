import logging
from dataclasses import dataclass
from pathlib import Path
from typing import Iterable
from typing import List
from typing import Optional

logger = logging.getLogger(__name__)


@dataclass(frozen=True)
class StreamMetadata:
    input_files: List[Path]
    version: Optional[str]
    geometry: str
    timestamp: Optional[float]
    num_hits: int
    hit_rate: float
    n_frames: int
    num_indexed: int
    num_crystals: int
    average_peaks_event: float
    average_resolution: float
    command_line: Optional[str]


def read_crystfel_streams(stream_list: Iterable[Path]) -> StreamMetadata:

    version: Optional[str] = None
    all_fns: List[Path] = []
    n_frames = 0
    n_hits = 0
    n_peaks = 0
    n_indexed = 0
    n_crystals = 0
    resolution: float = 0
    geom = ""
    in_geom = False
    have_geom = False
    command_line: Optional[str] = None
    timestamp: Optional[float] = None

    debug_counter = 0
    for fn in stream_list:
        timestamp = fn.stat().st_mtime
        with fn.open("r") as f:
            while True:
                fline = f.readline()

                debug_counter += 1
                if debug_counter % 10000 == 0:
                    logger.debug("At line %s...", debug_counter)

                if not fline:
                    break

                if in_geom:
                    if fline.strip() == "----- End geometry file -----":
                        in_geom = False
                        have_geom = True
                    elif not have_geom:
                        geom += fline
                    continue

                fline = fline.strip()

                if fline.find("Generated by CrystFEL ") != -1 and not version:
                    version = fline.split(" ", 3)[3]
                    command_line = f.readline().strip()

                if fline.find("Image filename: ") != -1:
                    filename = Path(fline.split(": ", 1)[1])
                    n_frames += 1
                    if filename not in all_fns:
                        logger.debug("new filename: %s", filename)
                        all_fns.append(Path(filename))

                if fline == "hit = 1":
                    n_hits += 1

                if fline.find("peak_resolution") != -1:
                    resolution += float(fline.split(" ")[2]) * 1e9

                if fline.find("num_peaks = ") != -1:
                    n_peaks += int(fline.split(" = ", 1)[1])

                if fline.find("indexed_by = ") != -1:
                    indexed_by = fline.split(" = ", 1)[1]
                    if not indexed_by == "none":
                        n_indexed += 1

                if fline.find("Cell parameters") != -1:
                    n_crystals += 1

                if fline == "----- Begin geometry file -----":
                    in_geom = True

    return StreamMetadata(
        input_files=all_fns,
        version=version,
        geometry=geom,
        timestamp=timestamp,
        num_hits=n_hits,
        hit_rate=n_hits / n_frames,
        n_frames=n_frames,
        num_indexed=n_indexed,
        num_crystals=n_crystals,
        average_peaks_event=n_peaks / n_frames,
        average_resolution=resolution / n_frames,
        command_line=command_line,
    )

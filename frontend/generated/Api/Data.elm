{-
   AMARCORD OpenAPI
   No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

   The version of the OpenAPI document: 2.5.0

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Data exposing
    ( AssociatedTable(..), associatedTableVariants
    , AttributoType(..)
    , ChemicalType(..), chemicalTypeVariants
    , DBJobStatus(..), dBJobStatusVariants
    , HTTPValidationError
    , JSONSchemaArray, JSONSchemaArrayType(..), jSONSchemaArrayTypeVariants
    , JSONSchemaArraySubtype(..), jSONSchemaArraySubtypeVariants
    , JSONSchemaBoolean, JSONSchemaBooleanType(..), jSONSchemaBooleanTypeVariants
    , JSONSchemaInteger, JSONSchemaIntegerType(..), jSONSchemaIntegerTypeVariants, JSONSchemaIntegerFormat(..), jSONSchemaIntegerFormatVariants
    , JSONSchemaNumber, JSONSchemaNumberType(..), jSONSchemaNumberTypeVariants, JSONSchemaNumberFormat(..), jSONSchemaNumberFormatVariants
    , JSONSchemaString, JSONSchemaStringType(..), jSONSchemaStringTypeVariants
    , JsonAnalysisRun
    , JsonAttributiIdAndRole
    , JsonAttributo
    , JsonAttributoBulkValue
    , JsonAttributoValue
    , JsonAttributoWithName
    , JsonBeamtime
    , JsonBeamtimeOutput
    , JsonBeamtimeSchedule
    , JsonBeamtimeScheduleOutput
    , JsonBeamtimeScheduleRow
    , JsonChangeRunExperimentType
    , JsonChangeRunExperimentTypeOutput
    , JsonCheckStandardUnitInput
    , JsonCheckStandardUnitOutput
    , JsonChemical
    , JsonChemicalIdAndName
    , JsonChemicalWithId
    , JsonChemicalWithoutId
    , JsonCopyChemicalInput
    , JsonCopyChemicalOutput
    , JsonCopyExperimentTypesInput
    , JsonCopyExperimentTypesOutput
    , JsonCreateAttributiFromSchemaInput
    , JsonCreateAttributiFromSchemaOutput
    , JsonCreateAttributiFromSchemaSingleAttributo
    , JsonCreateAttributoInput
    , JsonCreateAttributoOutput
    , JsonCreateChemicalOutput
    , JsonCreateDataSetFromRun
    , JsonCreateDataSetFromRunOutput
    , JsonCreateDataSetInput
    , JsonCreateDataSetOutput
    , JsonCreateExperimentTypeInput
    , JsonCreateExperimentTypeOutput
    , JsonCreateFileOutput
    , JsonCreateIndexingForDataSetInput
    , JsonCreateIndexingForDataSetOutput
    , JsonCreateLiveStreamSnapshotOutput
    , JsonCreateOrUpdateRun
    , JsonCreateOrUpdateRunOutput
    , JsonDataSet
    , JsonDataSetStatistics
    , JsonDataSetWithFom
    , JsonDataSetWithIndexingResults
    , JsonDeleteAttributoInput
    , JsonDeleteAttributoOutput
    , JsonDeleteChemicalInput
    , JsonDeleteChemicalOutput
    , JsonDeleteDataSetInput
    , JsonDeleteDataSetOutput
    , JsonDeleteEventInput
    , JsonDeleteEventOutput
    , JsonDeleteExperimentType
    , JsonDeleteExperimentTypeOutput
    , JsonDeleteFileInput
    , JsonDeleteFileOutput
    , JsonDeleteRunOutput
    , JsonDetectorShift
    , JsonEvent
    , JsonEventInput
    , JsonEventTopLevelInput
    , JsonEventTopLevelOutput
    , JsonExperimentType
    , JsonExperimentTypeAndRuns
    , JsonExperimentTypeWithBeamtimeInformation
    , JsonFileOutput
    , JsonImportFinishedIndexingJobInput
    , JsonImportFinishedIndexingJobOutput
    , JsonIndexingFom
    , JsonIndexingJob
    , JsonIndexingJobUpdateOutput
    , JsonIndexingParameters
    , JsonIndexingParametersWithResults
    , JsonIndexingResult
    , JsonIndexingResultFinishSuccessfully
    , JsonIndexingResultFinishWithError
    , JsonIndexingResultStillRunning
    , JsonIndexingStatistic
    , JsonLiveStream
    , JsonMergeJob
    , JsonMergeJobFinishOutput
    , JsonMergeJobFinishedInput
    , JsonMergeJobStartedInput
    , JsonMergeJobStartedOutput
    , JsonMergeParameters
    , JsonMergeResult
    , JsonMergeResultFom
    , JsonMergeResultInternal
    , JsonMergeResultOuterShell
    , JsonMergeResultShell
    , JsonMergeResultStateDone
    , JsonMergeResultStateError
    , JsonMergeResultStateQueued
    , JsonMergeResultStateRunning
    , JsonMergeStatus(..), jsonMergeStatusVariants
    , JsonPolarisation
    , JsonQueueMergeJobInput
    , JsonQueueMergeJobOutput
    , JsonReadAllChemicals
    , JsonReadAttributi
    , JsonReadBeamtime
    , JsonReadBeamtimeGeometryDetails
    , JsonReadChemicals
    , JsonReadDataSets
    , JsonReadEvents
    , JsonReadExperimentTypes
    , JsonReadIndexingParametersOutput
    , JsonReadIndexingResultsOutput
    , JsonReadMergeResultsOutput
    , JsonReadNewAnalysisInput
    , JsonReadNewAnalysisOutput
    , JsonReadRunAnalysis
    , JsonReadRuns
    , JsonReadRunsBulkInput
    , JsonReadRunsBulkOutput
    , JsonReadRunsOverview
    , JsonReadSingleDataSetResults
    , JsonReadSingleMergeResult
    , JsonRefinementResult
    , JsonRefinementResultInternal
    , JsonRun
    , JsonRunAnalysisIndexingResult
    , JsonRunFile
    , JsonRunId
    , JsonRunRange
    , JsonRunsBulkImportInfo
    , JsonRunsBulkImportOutput
    , JsonStartRunOutput
    , JsonStopRunOutput
    , JsonUpdateAttributoConversionFlags
    , JsonUpdateAttributoInput
    , JsonUpdateAttributoOutput
    , JsonUpdateBeamtimeInput
    , JsonUpdateBeamtimeScheduleInput
    , JsonUpdateLiveStream
    , JsonUpdateOnlineIndexingParametersInput
    , JsonUpdateOnlineIndexingParametersOutput
    , JsonUpdateRun
    , JsonUpdateRunOutput
    , JsonUpdateRunsBulkInput
    , JsonUpdateRunsBulkOutput
    , JsonUserConfig
    , JsonUserConfigurationSingleOutput
    , MergeModel(..), mergeModelVariants
    , MergeNegativeHandling(..), mergeNegativeHandlingVariants
    , ScaleIntensities(..), scaleIntensitiesVariants
    , ValidationError
    , encodeAssociatedTable
    , encodeAttributoType
    , encodeChemicalType
    , encodeDBJobStatus
    , encodeHTTPValidationError
    , encodeJSONSchemaArray
    , encodeJSONSchemaArraySubtype
    , encodeJSONSchemaBoolean
    , encodeJSONSchemaInteger
    , encodeJSONSchemaNumber
    , encodeJSONSchemaString
    , encodeJsonAnalysisRun
    , encodeJsonAttributiIdAndRole
    , encodeJsonAttributo
    , encodeJsonAttributoBulkValue
    , encodeJsonAttributoValue
    , encodeJsonAttributoWithName
    , encodeJsonBeamtime
    , encodeJsonBeamtimeOutput
    , encodeJsonBeamtimeSchedule
    , encodeJsonBeamtimeScheduleOutput
    , encodeJsonBeamtimeScheduleRow
    , encodeJsonChangeRunExperimentType
    , encodeJsonChangeRunExperimentTypeOutput
    , encodeJsonCheckStandardUnitInput
    , encodeJsonCheckStandardUnitOutput
    , encodeJsonChemical
    , encodeJsonChemicalIdAndName
    , encodeJsonChemicalWithId
    , encodeJsonChemicalWithoutId
    , encodeJsonCopyChemicalInput
    , encodeJsonCopyChemicalOutput
    , encodeJsonCopyExperimentTypesInput
    , encodeJsonCopyExperimentTypesOutput
    , encodeJsonCreateAttributiFromSchemaInput
    , encodeJsonCreateAttributiFromSchemaOutput
    , encodeJsonCreateAttributiFromSchemaSingleAttributo
    , encodeJsonCreateAttributoInput
    , encodeJsonCreateAttributoOutput
    , encodeJsonCreateChemicalOutput
    , encodeJsonCreateDataSetFromRun
    , encodeJsonCreateDataSetFromRunOutput
    , encodeJsonCreateDataSetInput
    , encodeJsonCreateDataSetOutput
    , encodeJsonCreateExperimentTypeInput
    , encodeJsonCreateExperimentTypeOutput
    , encodeJsonCreateFileOutput
    , encodeJsonCreateIndexingForDataSetInput
    , encodeJsonCreateIndexingForDataSetOutput
    , encodeJsonCreateLiveStreamSnapshotOutput
    , encodeJsonCreateOrUpdateRun
    , encodeJsonCreateOrUpdateRunOutput
    , encodeJsonDataSet
    , encodeJsonDataSetStatistics
    , encodeJsonDataSetWithFom
    , encodeJsonDataSetWithIndexingResults
    , encodeJsonDeleteAttributoInput
    , encodeJsonDeleteAttributoOutput
    , encodeJsonDeleteChemicalInput
    , encodeJsonDeleteChemicalOutput
    , encodeJsonDeleteDataSetInput
    , encodeJsonDeleteDataSetOutput
    , encodeJsonDeleteEventInput
    , encodeJsonDeleteEventOutput
    , encodeJsonDeleteExperimentType
    , encodeJsonDeleteExperimentTypeOutput
    , encodeJsonDeleteFileInput
    , encodeJsonDeleteFileOutput
    , encodeJsonDeleteRunOutput
    , encodeJsonDetectorShift
    , encodeJsonEvent
    , encodeJsonEventInput
    , encodeJsonEventTopLevelInput
    , encodeJsonEventTopLevelOutput
    , encodeJsonExperimentType
    , encodeJsonExperimentTypeAndRuns
    , encodeJsonExperimentTypeWithBeamtimeInformation
    , encodeJsonFileOutput
    , encodeJsonImportFinishedIndexingJobInput
    , encodeJsonImportFinishedIndexingJobOutput
    , encodeJsonIndexingFom
    , encodeJsonIndexingJob
    , encodeJsonIndexingJobUpdateOutput
    , encodeJsonIndexingParameters
    , encodeJsonIndexingParametersWithResults
    , encodeJsonIndexingResult
    , encodeJsonIndexingResultFinishSuccessfully
    , encodeJsonIndexingResultFinishWithError
    , encodeJsonIndexingResultStillRunning
    , encodeJsonIndexingStatistic
    , encodeJsonLiveStream
    , encodeJsonMergeJob
    , encodeJsonMergeJobFinishOutput
    , encodeJsonMergeJobFinishedInput
    , encodeJsonMergeJobStartedInput
    , encodeJsonMergeJobStartedOutput
    , encodeJsonMergeParameters
    , encodeJsonMergeResult
    , encodeJsonMergeResultFom
    , encodeJsonMergeResultInternal
    , encodeJsonMergeResultOuterShell
    , encodeJsonMergeResultShell
    , encodeJsonMergeResultStateDone
    , encodeJsonMergeResultStateError
    , encodeJsonMergeResultStateQueued
    , encodeJsonMergeResultStateRunning
    , encodeJsonMergeStatus
    , encodeJsonPolarisation
    , encodeJsonQueueMergeJobInput
    , encodeJsonQueueMergeJobOutput
    , encodeJsonReadAllChemicals
    , encodeJsonReadAttributi
    , encodeJsonReadBeamtime
    , encodeJsonReadBeamtimeGeometryDetails
    , encodeJsonReadChemicals
    , encodeJsonReadDataSets
    , encodeJsonReadEvents
    , encodeJsonReadExperimentTypes
    , encodeJsonReadIndexingParametersOutput
    , encodeJsonReadIndexingResultsOutput
    , encodeJsonReadMergeResultsOutput
    , encodeJsonReadNewAnalysisInput
    , encodeJsonReadNewAnalysisOutput
    , encodeJsonReadRunAnalysis
    , encodeJsonReadRuns
    , encodeJsonReadRunsBulkInput
    , encodeJsonReadRunsBulkOutput
    , encodeJsonReadRunsOverview
    , encodeJsonReadSingleDataSetResults
    , encodeJsonReadSingleMergeResult
    , encodeJsonRefinementResult
    , encodeJsonRefinementResultInternal
    , encodeJsonRun
    , encodeJsonRunAnalysisIndexingResult
    , encodeJsonRunFile
    , encodeJsonRunId
    , encodeJsonRunRange
    , encodeJsonRunsBulkImportInfo
    , encodeJsonRunsBulkImportOutput
    , encodeJsonStartRunOutput
    , encodeJsonStopRunOutput
    , encodeJsonUpdateAttributoConversionFlags
    , encodeJsonUpdateAttributoInput
    , encodeJsonUpdateAttributoOutput
    , encodeJsonUpdateBeamtimeInput
    , encodeJsonUpdateBeamtimeScheduleInput
    , encodeJsonUpdateLiveStream
    , encodeJsonUpdateOnlineIndexingParametersInput
    , encodeJsonUpdateOnlineIndexingParametersOutput
    , encodeJsonUpdateRun
    , encodeJsonUpdateRunOutput
    , encodeJsonUpdateRunsBulkInput
    , encodeJsonUpdateRunsBulkOutput
    , encodeJsonUserConfig
    , encodeJsonUserConfigurationSingleOutput
    , encodeMergeModel
    , encodeMergeNegativeHandling
    , encodeScaleIntensities
    , encodeValidationError
    , stringFromAssociatedTable
    , stringFromChemicalType
    , stringFromDBJobStatus
    , stringFromJSONSchemaArraySubtype
    , stringFromJsonMergeStatus
    , stringFromMergeModel
    , stringFromMergeNegativeHandling
    , stringFromScaleIntensities
    , associatedTableDecoder
    , attributoTypeDecoder
    , chemicalTypeDecoder
    , dBJobStatusDecoder
    , hTTPValidationErrorDecoder
    , jSONSchemaArrayDecoder
    , jSONSchemaArraySubtypeDecoder
    , jSONSchemaBooleanDecoder
    , jSONSchemaIntegerDecoder
    , jSONSchemaNumberDecoder
    , jSONSchemaStringDecoder
    , jsonAnalysisRunDecoder
    , jsonAttributiIdAndRoleDecoder
    , jsonAttributoDecoder
    , jsonAttributoBulkValueDecoder
    , jsonAttributoValueDecoder
    , jsonAttributoWithNameDecoder
    , jsonBeamtimeDecoder
    , jsonBeamtimeOutputDecoder
    , jsonBeamtimeScheduleDecoder
    , jsonBeamtimeScheduleOutputDecoder
    , jsonBeamtimeScheduleRowDecoder
    , jsonChangeRunExperimentTypeDecoder
    , jsonChangeRunExperimentTypeOutputDecoder
    , jsonCheckStandardUnitInputDecoder
    , jsonCheckStandardUnitOutputDecoder
    , jsonChemicalDecoder
    , jsonChemicalIdAndNameDecoder
    , jsonChemicalWithIdDecoder
    , jsonChemicalWithoutIdDecoder
    , jsonCopyChemicalInputDecoder
    , jsonCopyChemicalOutputDecoder
    , jsonCopyExperimentTypesInputDecoder
    , jsonCopyExperimentTypesOutputDecoder
    , jsonCreateAttributiFromSchemaInputDecoder
    , jsonCreateAttributiFromSchemaOutputDecoder
    , jsonCreateAttributiFromSchemaSingleAttributoDecoder
    , jsonCreateAttributoInputDecoder
    , jsonCreateAttributoOutputDecoder
    , jsonCreateChemicalOutputDecoder
    , jsonCreateDataSetFromRunDecoder
    , jsonCreateDataSetFromRunOutputDecoder
    , jsonCreateDataSetInputDecoder
    , jsonCreateDataSetOutputDecoder
    , jsonCreateExperimentTypeInputDecoder
    , jsonCreateExperimentTypeOutputDecoder
    , jsonCreateFileOutputDecoder
    , jsonCreateIndexingForDataSetInputDecoder
    , jsonCreateIndexingForDataSetOutputDecoder
    , jsonCreateLiveStreamSnapshotOutputDecoder
    , jsonCreateOrUpdateRunDecoder
    , jsonCreateOrUpdateRunOutputDecoder
    , jsonDataSetDecoder
    , jsonDataSetStatisticsDecoder
    , jsonDataSetWithFomDecoder
    , jsonDataSetWithIndexingResultsDecoder
    , jsonDeleteAttributoInputDecoder
    , jsonDeleteAttributoOutputDecoder
    , jsonDeleteChemicalInputDecoder
    , jsonDeleteChemicalOutputDecoder
    , jsonDeleteDataSetInputDecoder
    , jsonDeleteDataSetOutputDecoder
    , jsonDeleteEventInputDecoder
    , jsonDeleteEventOutputDecoder
    , jsonDeleteExperimentTypeDecoder
    , jsonDeleteExperimentTypeOutputDecoder
    , jsonDeleteFileInputDecoder
    , jsonDeleteFileOutputDecoder
    , jsonDeleteRunOutputDecoder
    , jsonDetectorShiftDecoder
    , jsonEventDecoder
    , jsonEventInputDecoder
    , jsonEventTopLevelInputDecoder
    , jsonEventTopLevelOutputDecoder
    , jsonExperimentTypeDecoder
    , jsonExperimentTypeAndRunsDecoder
    , jsonExperimentTypeWithBeamtimeInformationDecoder
    , jsonFileOutputDecoder
    , jsonImportFinishedIndexingJobInputDecoder
    , jsonImportFinishedIndexingJobOutputDecoder
    , jsonIndexingFomDecoder
    , jsonIndexingJobDecoder
    , jsonIndexingJobUpdateOutputDecoder
    , jsonIndexingParametersDecoder
    , jsonIndexingParametersWithResultsDecoder
    , jsonIndexingResultDecoder
    , jsonIndexingResultFinishSuccessfullyDecoder
    , jsonIndexingResultFinishWithErrorDecoder
    , jsonIndexingResultStillRunningDecoder
    , jsonIndexingStatisticDecoder
    , jsonLiveStreamDecoder
    , jsonMergeJobDecoder
    , jsonMergeJobFinishOutputDecoder
    , jsonMergeJobFinishedInputDecoder
    , jsonMergeJobStartedInputDecoder
    , jsonMergeJobStartedOutputDecoder
    , jsonMergeParametersDecoder
    , jsonMergeResultDecoder
    , jsonMergeResultFomDecoder
    , jsonMergeResultInternalDecoder
    , jsonMergeResultOuterShellDecoder
    , jsonMergeResultShellDecoder
    , jsonMergeResultStateDoneDecoder
    , jsonMergeResultStateErrorDecoder
    , jsonMergeResultStateQueuedDecoder
    , jsonMergeResultStateRunningDecoder
    , jsonMergeStatusDecoder
    , jsonPolarisationDecoder
    , jsonQueueMergeJobInputDecoder
    , jsonQueueMergeJobOutputDecoder
    , jsonReadAllChemicalsDecoder
    , jsonReadAttributiDecoder
    , jsonReadBeamtimeDecoder
    , jsonReadBeamtimeGeometryDetailsDecoder
    , jsonReadChemicalsDecoder
    , jsonReadDataSetsDecoder
    , jsonReadEventsDecoder
    , jsonReadExperimentTypesDecoder
    , jsonReadIndexingParametersOutputDecoder
    , jsonReadIndexingResultsOutputDecoder
    , jsonReadMergeResultsOutputDecoder
    , jsonReadNewAnalysisInputDecoder
    , jsonReadNewAnalysisOutputDecoder
    , jsonReadRunAnalysisDecoder
    , jsonReadRunsDecoder
    , jsonReadRunsBulkInputDecoder
    , jsonReadRunsBulkOutputDecoder
    , jsonReadRunsOverviewDecoder
    , jsonReadSingleDataSetResultsDecoder
    , jsonReadSingleMergeResultDecoder
    , jsonRefinementResultDecoder
    , jsonRefinementResultInternalDecoder
    , jsonRunDecoder
    , jsonRunAnalysisIndexingResultDecoder
    , jsonRunFileDecoder
    , jsonRunIdDecoder
    , jsonRunRangeDecoder
    , jsonRunsBulkImportInfoDecoder
    , jsonRunsBulkImportOutputDecoder
    , jsonStartRunOutputDecoder
    , jsonStopRunOutputDecoder
    , jsonUpdateAttributoConversionFlagsDecoder
    , jsonUpdateAttributoInputDecoder
    , jsonUpdateAttributoOutputDecoder
    , jsonUpdateBeamtimeInputDecoder
    , jsonUpdateBeamtimeScheduleInputDecoder
    , jsonUpdateLiveStreamDecoder
    , jsonUpdateOnlineIndexingParametersInputDecoder
    , jsonUpdateOnlineIndexingParametersOutputDecoder
    , jsonUpdateRunDecoder
    , jsonUpdateRunOutputDecoder
    , jsonUpdateRunsBulkInputDecoder
    , jsonUpdateRunsBulkOutputDecoder
    , jsonUserConfigDecoder
    , jsonUserConfigurationSingleOutputDecoder
    , mergeModelDecoder
    , mergeNegativeHandlingDecoder
    , scaleIntensitiesDecoder
    , validationErrorDecoder
    )

import Api
import Dict
import Json.Decode
import Json.Encode


-- MODEL


{-| An enumeration.
-}
type AssociatedTable
    = AssociatedTableRun
    | AssociatedTableChemical


associatedTableVariants : List AssociatedTable
associatedTableVariants =
    [ AssociatedTableRun
    , AssociatedTableChemical
    ]


type AttributoType
    = AttributoTypeJSONSchemaArray JSONSchemaArray
    | AttributoTypeJSONSchemaBoolean JSONSchemaBoolean
    | AttributoTypeJSONSchemaInteger JSONSchemaInteger
    | AttributoTypeJSONSchemaNumber JSONSchemaNumber
    | AttributoTypeJSONSchemaString JSONSchemaString



{-| An enumeration.
-}
type ChemicalType
    = ChemicalTypeCrystal
    | ChemicalTypeSolution


chemicalTypeVariants : List ChemicalType
chemicalTypeVariants =
    [ ChemicalTypeCrystal
    , ChemicalTypeSolution
    ]


{-| An enumeration.
-}
type DBJobStatus
    = DBJobStatusQueued
    | DBJobStatusRunning
    | DBJobStatusDone


dBJobStatusVariants : List DBJobStatus
dBJobStatusVariants =
    [ DBJobStatusQueued
    , DBJobStatusRunning
    , DBJobStatusDone
    ]


type alias HTTPValidationError =
    { detail : Maybe ( List ValidationError )
    }


type alias JSONSchemaArray =
    { type_ : JSONSchemaArrayType
    , itemType : JSONSchemaArraySubtype
    , minItems : Maybe Int
    , maxItems : Maybe Int
    }


type JSONSchemaArrayType
    = JSONSchemaArrayTypeArray


jSONSchemaArrayTypeVariants : List JSONSchemaArrayType
jSONSchemaArrayTypeVariants =
    [ JSONSchemaArrayTypeArray
    ]


{-| An enumeration.
-}
type JSONSchemaArraySubtype
    = JSONSchemaArraySubtypeString
    | JSONSchemaArraySubtypeBool
    | JSONSchemaArraySubtypeNumber


jSONSchemaArraySubtypeVariants : List JSONSchemaArraySubtype
jSONSchemaArraySubtypeVariants =
    [ JSONSchemaArraySubtypeString
    , JSONSchemaArraySubtypeBool
    , JSONSchemaArraySubtypeNumber
    ]


type alias JSONSchemaBoolean =
    { type_ : JSONSchemaBooleanType
    }


type JSONSchemaBooleanType
    = JSONSchemaBooleanTypeBoolean


jSONSchemaBooleanTypeVariants : List JSONSchemaBooleanType
jSONSchemaBooleanTypeVariants =
    [ JSONSchemaBooleanTypeBoolean
    ]


type alias JSONSchemaInteger =
    { type_ : JSONSchemaIntegerType
    , format : Maybe JSONSchemaIntegerFormat
    }


type JSONSchemaIntegerType
    = JSONSchemaIntegerTypeInteger


jSONSchemaIntegerTypeVariants : List JSONSchemaIntegerType
jSONSchemaIntegerTypeVariants =
    [ JSONSchemaIntegerTypeInteger
    ]


type JSONSchemaIntegerFormat
    = JSONSchemaIntegerFormatDateTime
    | JSONSchemaIntegerFormatChemicalId


jSONSchemaIntegerFormatVariants : List JSONSchemaIntegerFormat
jSONSchemaIntegerFormatVariants =
    [ JSONSchemaIntegerFormatDateTime
    , JSONSchemaIntegerFormatChemicalId
    ]


type alias JSONSchemaNumber =
    { type_ : JSONSchemaNumberType
    , minimum : Maybe Float
    , maximum : Maybe Float
    , exclusiveMinimum : Maybe Float
    , exclusiveMaximum : Maybe Float
    , suffix : Maybe String
    , format : Maybe JSONSchemaNumberFormat
    , tolerance : Maybe Float
    , toleranceIsAbsolute : Maybe Bool
    }


type JSONSchemaNumberType
    = JSONSchemaNumberTypeNumber


jSONSchemaNumberTypeVariants : List JSONSchemaNumberType
jSONSchemaNumberTypeVariants =
    [ JSONSchemaNumberTypeNumber
    ]


type JSONSchemaNumberFormat
    = JSONSchemaNumberFormatStandardUnit


jSONSchemaNumberFormatVariants : List JSONSchemaNumberFormat
jSONSchemaNumberFormatVariants =
    [ JSONSchemaNumberFormatStandardUnit
    ]


type alias JSONSchemaString =
    { type_ : JSONSchemaStringType
    , enum : Maybe ( List String )
    }


type JSONSchemaStringType
    = JSONSchemaStringTypeString


jSONSchemaStringTypeVariants : List JSONSchemaStringType
jSONSchemaStringTypeVariants =
    [ JSONSchemaStringTypeString
    ]


type alias JsonAnalysisRun =
    { id : Int
    , externalId : Int
    , attributi : List JsonAttributoValue
    , filePaths : List JsonRunFile
    }


type alias JsonAttributiIdAndRole =
    { id : Int
    , role : ChemicalType
    }


type alias JsonAttributo =
    { id : Int
    , name : String
    , description : String
    , group : String
    , associatedTable : AssociatedTable
    , attributoTypeInteger : Maybe JSONSchemaInteger
    , attributoTypeNumber : Maybe JSONSchemaNumber
    , attributoTypeString : Maybe JSONSchemaString
    , attributoTypeArray : Maybe JSONSchemaArray
    , attributoTypeBoolean : Maybe JSONSchemaBoolean
    }


type alias JsonAttributoBulkValue =
    { attributoId : Int
    , values : List JsonAttributoValue
    }


type alias JsonAttributoValue =
    { attributoId : Int
    , attributoValueStr : Maybe String
    , attributoValueInt : Maybe Int
    , attributoValueChemical : Maybe Int
    , attributoValueDatetime : Maybe Int
    , attributoValueFloat : Maybe Float
    , attributoValueBool : Maybe Bool
    , attributoValueListStr : Maybe ( List String )
    , attributoValueListFloat : Maybe ( List Float )
    , attributoValueListBool : Maybe ( List Bool )
    }


type alias JsonAttributoWithName =
    { id : Int
    , name : String
    }


type alias JsonBeamtime =
    { id : Int
    , externalId : String
    , proposal : String
    , beamline : String
    , title : String
    , comment : String
    , start : Int
    , end : Int
    , chemicalNames : List String
    , analysisOutputPath : String
    }


type alias JsonBeamtimeOutput =
    { id : Int
    }


type alias JsonBeamtimeSchedule =
    { schedule : List JsonBeamtimeScheduleRow
    }


type alias JsonBeamtimeScheduleOutput =
    { schedule : List JsonBeamtimeScheduleRow
    }


type alias JsonBeamtimeScheduleRow =
    { users : String
    , date : String
    , shift : String
    , comment : String
    , tdSupport : String
    , chemicals : List Int
    , startPosix : Int
    , stopPosix : Int
    }


type alias JsonChangeRunExperimentType =
    { runInternalId : Int
    , experimentTypeId : Maybe Int
    }


type alias JsonChangeRunExperimentTypeOutput =
    { result : Bool
    }


type alias JsonCheckStandardUnitInput =
    { input : String
    }


type alias JsonCheckStandardUnitOutput =
    { input : String
    , error : Maybe String
    , normalized : Maybe String
    }


type alias JsonChemical =
    { id : Int
    , beamtimeId : Int
    , name : String
    , responsiblePerson : String
    , chemicalType : ChemicalType
    , attributi : List JsonAttributoValue
    , files : List JsonFileOutput
    }


type alias JsonChemicalIdAndName =
    { chemicalId : Int
    , name : String
    }


type alias JsonChemicalWithId =
    { id : Int
    , beamtimeId : Int
    , name : String
    , responsiblePerson : String
    , chemicalType : ChemicalType
    , attributi : List JsonAttributoValue
    , fileIds : List Int
    }


type alias JsonChemicalWithoutId =
    { beamtimeId : Int
    , name : String
    , responsiblePerson : String
    , chemicalType : ChemicalType
    , attributi : List JsonAttributoValue
    , fileIds : List Int
    }


type alias JsonCopyChemicalInput =
    { chemicalId : Int
    , targetBeamtimeId : Int
    , createAttributi : Bool
    }


type alias JsonCopyChemicalOutput =
    { newChemicalId : Int
    }


type alias JsonCopyExperimentTypesInput =
    { fromBeamtime : Int
    , toBeamtime : Int
    }


type alias JsonCopyExperimentTypesOutput =
    { toBeamtimeExperimentTypeIds : List Int
    }


type alias JsonCreateAttributiFromSchemaInput =
    { attributiSchema : List JsonCreateAttributiFromSchemaSingleAttributo
    , beamtimeId : Int
    }


type alias JsonCreateAttributiFromSchemaOutput =
    { createdAttributi : Int
    }


type alias JsonCreateAttributiFromSchemaSingleAttributo =
    { attributoName : String
    , attributoType : AttributoType
    , description : Maybe String
    }


type alias JsonCreateAttributoInput =
    { beamtimeId : Int
    , name : String
    , description : String
    , group : String
    , associatedTable : AssociatedTable
    , attributoTypeInteger : Maybe JSONSchemaInteger
    , attributoTypeNumber : Maybe JSONSchemaNumber
    , attributoTypeString : Maybe JSONSchemaString
    , attributoTypeArray : Maybe JSONSchemaArray
    , attributoTypeBoolean : Maybe JSONSchemaBoolean
    }


type alias JsonCreateAttributoOutput =
    { id : Int
    }


type alias JsonCreateChemicalOutput =
    { id : Int
    }


type alias JsonCreateDataSetFromRun =
    { runInternalId : Int
    }


type alias JsonCreateDataSetFromRunOutput =
    { dataSetId : Int
    }


type alias JsonCreateDataSetInput =
    { experimentTypeId : Int
    , attributi : List JsonAttributoValue
    }


type alias JsonCreateDataSetOutput =
    { id : Int
    }


type alias JsonCreateExperimentTypeInput =
    { name : String
    , beamtimeId : Int
    , attributi : List JsonAttributiIdAndRole
    }


type alias JsonCreateExperimentTypeOutput =
    { id : Int
    }


type alias JsonCreateFileOutput =
    { id : Int
    , fileName : String
    , description : String
    , type__ : String
    , sizeInBytes : Int
    , originalPath : Maybe String
    }


type alias JsonCreateIndexingForDataSetInput =
    { dataSetId : Int
    , isOnline : Bool
    , cellDescription : String
    , geometryFile : String
    , commandLine : String
    , source : String
    }


type alias JsonCreateIndexingForDataSetOutput =
    { jobsStartedRunExternalIds : List Int
    , indexingResultId : Int
    , dataSetId : Int
    , indexingParametersId : Int
    }


type alias JsonCreateLiveStreamSnapshotOutput =
    { id : Int
    , fileName : String
    , description : String
    , type__ : String
    , sizeInBytes : Int
    , originalPath : Maybe String
    }


type alias JsonCreateOrUpdateRun =
    { beamtimeId : Int
    , attributi : List JsonAttributoValue
    , files : Maybe ( List JsonRunFile )
    , started : Maybe Int
    , stopped : Maybe Int
    , createDataSet : Maybe Bool
    }


type alias JsonCreateOrUpdateRunOutput =
    { runCreated : Bool
    , indexingResultId : Maybe Int
    , errorMessage : Maybe String
    , runInternalId : Maybe Int
    , files : List JsonRunFile
    }


type alias JsonDataSet =
    { id : Int
    , experimentTypeId : Int
    , beamtimeId : Int
    , attributi : List JsonAttributoValue
    }


type alias JsonDataSetStatistics =
    { dataSetId : Int
    , runCount : Int
    , mergeResultsCount : Int
    , indexedFrames : Int
    , mergeOrIndexingJobsRunning : Bool
    }


type alias JsonDataSetWithFom =
    { dataSet : JsonDataSet
    , fom : JsonIndexingFom
    }


type alias JsonDataSetWithIndexingResults =
    { dataSet : JsonDataSet
    , internalRunIds : List Int
    , runs : List JsonRunRange
    , pointGroup : String
    , spaceGroup : String
    , cellDescription : String
    , indexingResults : List JsonIndexingParametersWithResults
    }


type alias JsonDeleteAttributoInput =
    { id : Int
    }


type alias JsonDeleteAttributoOutput =
    { id : Int
    }


type alias JsonDeleteChemicalInput =
    { id : Int
    }


type alias JsonDeleteChemicalOutput =
    { id : Int
    }


type alias JsonDeleteDataSetInput =
    { id : Int
    }


type alias JsonDeleteDataSetOutput =
    { result : Bool
    }


type alias JsonDeleteEventInput =
    { id : Int
    }


type alias JsonDeleteEventOutput =
    { result : Bool
    }


type alias JsonDeleteExperimentType =
    { id : Int
    }


type alias JsonDeleteExperimentTypeOutput =
    { result : Bool
    }


type alias JsonDeleteFileInput =
    { id : Int
    }


type alias JsonDeleteFileOutput =
    { id : Int
    }


type alias JsonDeleteRunOutput =
    { result : Bool
    }


type alias JsonDetectorShift =
    { runExternalId : Int
    , runStart : Int
    , runEnd : Maybe Int
    , shiftXMm : Float
    , shiftYMm : Float
    , geometryHash : String
    }


type alias JsonEvent =
    { id : Int
    , source : String
    , text : String
    , created : Int
    , level : String
    , files : List JsonFileOutput
    }


type alias JsonEventInput =
    { source : String
    , text : String
    , level : String
    , fileIds : List Int
    }


type alias JsonEventTopLevelInput =
    { beamtimeId : Int
    , event : JsonEventInput
    , withLiveStream : Bool
    }


type alias JsonEventTopLevelOutput =
    { id : Int
    }


type alias JsonExperimentType =
    { id : Int
    , name : String
    , attributi : List JsonAttributiIdAndRole
    }


type alias JsonExperimentTypeAndRuns =
    { id : Int
    , runs : List String
    , numberOfRuns : Int
    }


type alias JsonExperimentTypeWithBeamtimeInformation =
    { experimentType : JsonExperimentType
    , beamtime : JsonBeamtime
    }


type alias JsonFileOutput =
    { id : Int
    , description : String
    , type__ : String
    , originalPath : Maybe String
    , fileName : String
    , sizeInBytes : Int
    }


type alias JsonImportFinishedIndexingJobInput =
    { isOnline : Bool
    , cellDescription : String
    , commandLine : String
    , source : String
    , runInternalId : Int
    , streamFile : String
    , programVersion : String
    , frames : Int
    , hits : Int
    , indexedFrames : Int
    , detectorShiftXMm : Maybe Float
    , detectorShiftYMm : Maybe Float
    , geometryFile : String
    , geometryHash : String
    , generatedGeometryFile : Maybe String
    , jobLog : String
    }


type alias JsonImportFinishedIndexingJobOutput =
    { indexingResultId : Int
    }


type alias JsonIndexingFom =
    { hitRate : Float
    , indexingRate : Float
    , indexedFrames : Int
    , detectorShiftXMm : Maybe Float
    , detectorShiftYMm : Maybe Float
    }


type alias JsonIndexingJob =
    { id : Int
    , jobId : Maybe Int
    , jobStatus : DBJobStatus
    , started : Maybe Int
    , stopped : Maybe Int
    , isOnline : Bool
    , streamFile : Maybe String
    , source : String
    , cellDescription : Maybe String
    , geometryFileInput : String
    , geometryFileOutput : String
    , commandLine : String
    , runInternalId : Int
    , runExternalId : Int
    , beamtime : JsonBeamtime
    , inputFileGlobs : List String
    }


type alias JsonIndexingJobUpdateOutput =
    { result : Bool
    }


type alias JsonIndexingParameters =
    { id : Maybe Int
    , cellDescription : Maybe String
    , isOnline : Bool
    , commandLine : String
    , geometryFile : String
    }


type alias JsonIndexingParametersWithResults =
    { parameters : JsonIndexingParameters
    , indexingResults : List JsonIndexingResult
    , mergeResults : List JsonMergeResult
    }


type alias JsonIndexingResult =
    { id : Int
    , created : Int
    , started : Maybe Int
    , stopped : Maybe Int
    , parameters : JsonIndexingParameters
    , streamFile : String
    , programVersion : String
    , runInternalId : Int
    , runExternalId : Int
    , frames : Int
    , hits : Int
    , indexedFrames : Int
    , indexedCrystals : Int
    , status : DBJobStatus
    , detectorShiftXMm : Maybe Float
    , detectorShiftYMm : Maybe Float
    , geometryFile : String
    , geometryHash : String
    , generatedGeometryFile : String
    , unitCellHistogramsFileId : Maybe Int
    , hasError : Bool
    }


type alias JsonIndexingResultFinishSuccessfully =
    { workloadManagerJobId : Int
    , streamFile : String
    , programVersion : String
    , frames : Int
    , hits : Int
    , indexedFrames : Int
    , indexedCrystals : Int
    , detectorShiftXMm : Maybe Float
    , detectorShiftYMm : Maybe Float
    , geometryFile : String
    , geometryHash : String
    , generatedGeometryFile : String
    , unitCellHistogramsId : Maybe Int
    , latestLog : Maybe String
    }


type alias JsonIndexingResultFinishWithError =
    { errorMessage : String
    , latestLog : String
    , workloadManagerJobId : Maybe Int
    }


type alias JsonIndexingResultStillRunning =
    { workloadManagerJobId : Int
    , streamFile : String
    , frames : Int
    , hits : Int
    , indexedFrames : Int
    , indexedCrystals : Int
    , detectorShiftXMm : Maybe Float
    , detectorShiftYMm : Maybe Float
    , geometryFile : String
    , geometryHash : String
    , jobStarted : Maybe Int
    , latestLog : Maybe String
    }


type alias JsonIndexingStatistic =
    { time : Int
    , frames : Int
    , hits : Int
    , indexed : Int
    , crystals : Int
    }


type alias JsonLiveStream =
    { fileId : Int
    , modified : Int
    }


type alias JsonMergeJob =
    { id : Int
    , jobId : Maybe Int
    , jobStatus : DBJobStatus
    , parameters : JsonMergeParameters
    , indexingResults : List JsonIndexingJob
    , filesFromIndexing : List JsonFileOutput
    , pointGroup : String
    , cellDescription : String
    }


type alias JsonMergeJobFinishOutput =
    { result : Bool
    }


type alias JsonMergeJobFinishedInput =
    { latestLog : Maybe String
    , error : Maybe String
    , result : Maybe JsonMergeResultInternal
    }


type alias JsonMergeJobStartedInput =
    { jobId : Int
    , time : Int
    }


type alias JsonMergeJobStartedOutput =
    { time : Int
    }


type alias JsonMergeParameters =
    { pointGroup : String
    , spaceGroup : Maybe String
    , cellDescription : String
    , negativeHandling : Maybe MergeNegativeHandling
    , mergeModel : MergeModel
    , scaleIntensities : ScaleIntensities
    , postRefinement : Bool
    , iterations : Int
    , polarisation : Maybe JsonPolarisation
    , startAfter : Maybe Int
    , stopAfter : Maybe Int
    , relB : Float
    , noPr : Bool
    , forceBandwidth : Maybe Float
    , forceRadius : Maybe Float
    , forceLambda : Maybe Float
    , noDeltaCcHalf : Bool
    , maxAdu : Maybe Float
    , minMeasurements : Int
    , logs : Bool
    , minRes : Maybe Float
    , pushRes : Maybe Float
    , w : Maybe String
    , ambigatorCommandLine : String
    }


type alias JsonMergeResult =
    { id : Int
    , created : Int
    , runs : List String
    , indexingResultIds : List Int
    , stateQueued : Maybe JsonMergeResultStateQueued
    , stateError : Maybe JsonMergeResultStateError
    , stateRunning : Maybe JsonMergeResultStateRunning
    , stateDone : Maybe JsonMergeResultStateDone
    , parameters : JsonMergeParameters
    , refinementResults : List JsonRefinementResult
    }


type alias JsonMergeResultFom =
    { snr : Float
    , wilson : Maybe Float
    , lnK : Maybe Float
    , discardedReflections : Int
    , oneOverDFrom : Float
    , oneOverDTo : Float
    , redundancy : Float
    , completeness : Float
    , measurementsTotal : Int
    , reflectionsTotal : Int
    , reflectionsPossible : Int
    , rSplit : Float
    , r1i : Float
    , r2 : Float
    , cc : Float
    , ccstar : Float
    , ccano : Maybe Float
    , crdano : Maybe Float
    , rano : Maybe Float
    , ranoOverRSplit : Maybe Float
    , d1sig : Float
    , d2sig : Float
    , outerShell : JsonMergeResultOuterShell
    }


type alias JsonMergeResultInternal =
    { mtzFileId : Int
    , fom : JsonMergeResultFom
    , ambigatorFgGraphFileId : Maybe Int
    , detailedFoms : List JsonMergeResultShell
    , refinementResults : List JsonRefinementResultInternal
    }


type alias JsonMergeResultOuterShell =
    { resolution : Float
    , ccstar : Float
    , rSplit : Float
    , cc : Float
    , uniqueReflections : Int
    , completeness : Float
    , redundancy : Float
    , snr : Float
    , minRes : Float
    , maxRes : Float
    }


type alias JsonMergeResultShell =
    { oneOverDCentre : Float
    , nref : Int
    , dOverA : Float
    , minRes : Float
    , maxRes : Float
    , cc : Float
    , ccstar : Float
    , rSplit : Float
    , reflectionsPossible : Int
    , completeness : Float
    , measurements : Int
    , redundancy : Float
    , snr : Float
    , meanI : Float
    }


type alias JsonMergeResultStateDone =
    { started : Int
    , stopped : Int
    , result : JsonMergeResultInternal
    }


type alias JsonMergeResultStateError =
    { started : Int
    , stopped : Int
    , error : String
    , latestLog : String
    }


type alias JsonMergeResultStateQueued =
    { queued : Bool
    }


type alias JsonMergeResultStateRunning =
    { started : Int
    , jobId : Int
    , latestLog : String
    }


{-| An enumeration.
-}
type JsonMergeStatus
    = JsonMergeStatusBoth
    | JsonMergeStatusUnmerged
    | JsonMergeStatusMerged


jsonMergeStatusVariants : List JsonMergeStatus
jsonMergeStatusVariants =
    [ JsonMergeStatusBoth
    , JsonMergeStatusUnmerged
    , JsonMergeStatusMerged
    ]


type alias JsonPolarisation =
    { angle : Int
    , percent : Int
    }


type alias JsonQueueMergeJobInput =
    { strictMode : Bool
    , indexingParametersId : Int
    , dataSetId : Int
    , mergeParameters : JsonMergeParameters
    }


type alias JsonQueueMergeJobOutput =
    { mergeResultId : Int
    }


type alias JsonReadAllChemicals =
    { chemicals : List JsonChemical
    , beamtimes : List JsonBeamtime
    , attributiNames : List JsonAttributoWithName
    }


type alias JsonReadAttributi =
    { attributi : List JsonAttributo
    }


type alias JsonReadBeamtime =
    { beamtimes : List JsonBeamtime
    }


type alias JsonReadBeamtimeGeometryDetails =
    { detectorShifts : List JsonDetectorShift
    }


type alias JsonReadChemicals =
    { chemicals : List JsonChemical
    , attributi : List JsonAttributo
    }


type alias JsonReadDataSets =
    { dataSets : List JsonDataSet
    , chemicals : List JsonChemical
    , attributi : List JsonAttributo
    , experimentTypes : List JsonExperimentType
    }


type alias JsonReadEvents =
    { events : List JsonEvent
    , filterDates : List String
    }


type alias JsonReadExperimentTypes =
    { experimentTypes : List JsonExperimentType
    , attributi : List JsonAttributo
    , experimentTypeIdToRun : List JsonExperimentTypeAndRuns
    , currentExperimentTypeId : Maybe Int
    }


type alias JsonReadIndexingParametersOutput =
    { dataSetId : Int
    , cellDescription : String
    , sources : List String
    }


type alias JsonReadIndexingResultsOutput =
    { indexingJobs : List JsonIndexingJob
    }


type alias JsonReadMergeResultsOutput =
    { mergeJobs : List JsonMergeJob
    }


type alias JsonReadNewAnalysisInput =
    { attributiFilter : List JsonAttributoValue
    , beamtimeId : Maybe Int
    , mergeStatus : JsonMergeStatus
    }


type alias JsonReadNewAnalysisOutput =
    { searchableAttributi : List JsonAttributo
    , attributi : List JsonAttributo
    , chemicalIdToName : List JsonChemicalIdAndName
    , experimentTypes : List JsonExperimentTypeWithBeamtimeInformation
    , filteredDataSets : List JsonDataSet
    , dataSetStatistics : List JsonDataSetStatistics
    , attributiValues : List JsonAttributoValue
    }


type alias JsonReadRunAnalysis =
    { chemicals : List JsonChemical
    , attributi : List JsonAttributo
    , run : Maybe JsonAnalysisRun
    , runIds : List JsonRunId
    , indexingResults : List JsonRunAnalysisIndexingResult
    }


type alias JsonReadRuns =
    { filterDates : List String
    , runs : List JsonRun
    , attributi : List JsonAttributo
    , experimentTypes : List JsonExperimentType
    , events : List JsonEvent
    , chemicals : List JsonChemical
    }


type alias JsonReadRunsBulkInput =
    { beamtimeId : Int
    , externalRunIds : List Int
    }


type alias JsonReadRunsBulkOutput =
    { chemicals : List JsonChemical
    , attributi : List JsonAttributo
    , attributiValues : List JsonAttributoBulkValue
    , experimentTypes : List JsonExperimentType
    , experimentTypeIds : List Int
    }


type alias JsonReadRunsOverview =
    { liveStream : Maybe JsonLiveStream
    , attributi : List JsonAttributo
    , latestIndexingResult : Maybe JsonRunAnalysisIndexingResult
    , latestRun : Maybe JsonRun
    , fomsForThisDataSet : Maybe JsonDataSetWithFom
    , experimentTypes : List JsonExperimentType
    , events : List JsonEvent
    , chemicals : List JsonChemical
    , userConfig : JsonUserConfig
    , currentBeamtimeUser : Maybe String
    }


type alias JsonReadSingleDataSetResults =
    { attributi : List JsonAttributo
    , chemicalIdToName : List JsonChemicalIdAndName
    , experimentType : JsonExperimentType
    , dataSet : JsonDataSetWithIndexingResults
    }


type alias JsonReadSingleMergeResult =
    { experimentType : JsonExperimentType
    , result : JsonMergeResult
    }


type alias JsonRefinementResult =
    { id : Int
    , mergeResultId : Int
    , pdbFileId : Int
    , mtzFileId : Int
    , rFree : Float
    , rWork : Float
    , rmsBondAngle : Float
    , rmsBondLength : Float
    }


type alias JsonRefinementResultInternal =
    { id : Maybe Int
    , pdbFileId : Int
    , mtzFileId : Int
    , rFree : Float
    , rWork : Float
    , rmsBondAngle : Float
    , rmsBondLength : Float
    }


type alias JsonRun =
    { id : Int
    , externalId : Int
    , attributi : List JsonAttributoValue
    , started : Int
    , stopped : Maybe Int
    , files : List JsonRunFile
    , summary : JsonIndexingFom
    , experimentTypeId : Int
    }


type alias JsonRunAnalysisIndexingResult =
    { runId : Int
    , foms : JsonIndexingFom
    , indexingStatistics : List JsonIndexingStatistic
    , running : Bool
    , frames : Maybe Int
    , totalFrames : Maybe Int
    }


type alias JsonRunFile =
    { id : Int
    , glob : String
    , source : String
    }


type alias JsonRunId =
    { internalRunId : Int
    , externalRunId : Int
    }


type alias JsonRunRange =
    { runFrom : Int
    , runTo : Int
    }


type alias JsonRunsBulkImportInfo =
    { runAttributi : List JsonAttributo
    , experimentTypes : List String
    , chemicals : List JsonChemical
    }


type alias JsonRunsBulkImportOutput =
    { simulated : Bool
    , createDataSets : Bool
    , errors : List String
    , warnings : List String
    , numberOfRuns : Int
    , dataSets : List JsonDataSet
    }


type alias JsonStartRunOutput =
    { runInternalId : Int
    }


type alias JsonStopRunOutput =
    { result : Bool
    }


type alias JsonUpdateAttributoConversionFlags =
    { ignoreUnits : Bool
    }


type alias JsonUpdateAttributoInput =
    { attributo : JsonAttributo
    , conversionFlags : JsonUpdateAttributoConversionFlags
    }


type alias JsonUpdateAttributoOutput =
    { id : Int
    }


type alias JsonUpdateBeamtimeInput =
    { id : Int
    , externalId : String
    , beamline : String
    , proposal : String
    , title : String
    , comment : String
    , start : Int
    , end : Int
    , analysisOutputPath : String
    }


type alias JsonUpdateBeamtimeScheduleInput =
    { beamtimeId : Int
    , schedule : List JsonBeamtimeScheduleRow
    }


type alias JsonUpdateLiveStream =
    { id : Int
    }


type alias JsonUpdateOnlineIndexingParametersInput =
    { commandLine : String
    , geometryFile : String
    , source : String
    }


type alias JsonUpdateOnlineIndexingParametersOutput =
    { success : Bool
    }


type alias JsonUpdateRun =
    { id : Int
    , experimentTypeId : Int
    , attributi : List JsonAttributoValue
    , files : Maybe ( List JsonRunFile )
    }


type alias JsonUpdateRunOutput =
    { result : Bool
    , files : List JsonRunFile
    }


type alias JsonUpdateRunsBulkInput =
    { beamtimeId : Int
    , externalRunIds : List Int
    , attributi : List JsonAttributoValue
    , newExperimentTypeId : Maybe Int
    }


type alias JsonUpdateRunsBulkOutput =
    { result : Bool
    }


type alias JsonUserConfig =
    { onlineCrystfel : Bool
    , autoPilot : Bool
    , currentExperimentTypeId : Maybe Int
    , currentOnlineIndexingParametersId : Maybe Int
    }


type alias JsonUserConfigurationSingleOutput =
    { valueBool : Maybe Bool
    , valueInt : Maybe Int
    }


{-| An enumeration.
-}
type MergeModel
    = MergeModelUnity
    | MergeModelXsphere
    | MergeModelOffset
    | MergeModelGgpm


mergeModelVariants : List MergeModel
mergeModelVariants =
    [ MergeModelUnity
    , MergeModelXsphere
    , MergeModelOffset
    , MergeModelGgpm
    ]


{-| An enumeration.
-}
type MergeNegativeHandling
    = MergeNegativeHandlingIgnore
    | MergeNegativeHandlingZero


mergeNegativeHandlingVariants : List MergeNegativeHandling
mergeNegativeHandlingVariants =
    [ MergeNegativeHandlingIgnore
    , MergeNegativeHandlingZero
    ]


{-| An enumeration.
-}
type ScaleIntensities
    = ScaleIntensitiesOff
    | ScaleIntensitiesNormal
    | ScaleIntensitiesDebyewaller


scaleIntensitiesVariants : List ScaleIntensities
scaleIntensitiesVariants =
    [ ScaleIntensitiesOff
    , ScaleIntensitiesNormal
    , ScaleIntensitiesDebyewaller
    ]


type alias ValidationError =
    { loc : List String
    , msg : String
    , type_ : String
    }


-- ENCODER


stringFromAssociatedTable : AssociatedTable -> String
stringFromAssociatedTable model =
    case model of
        AssociatedTableRun ->
            "run"

        AssociatedTableChemical ->
            "chemical"


encodeAssociatedTable : AssociatedTable -> Json.Encode.Value
encodeAssociatedTable =
    Json.Encode.string << stringFromAssociatedTable


encodeAttributoType : AttributoType -> Json.Encode.Value
encodeAttributoType model =
    case model of
        AttributoTypeJSONSchemaArray subModel ->
            encodeJSONSchemaArrayWithTag ("type_", "array") subModel

        AttributoTypeJSONSchemaBoolean subModel ->
            encodeJSONSchemaBooleanWithTag ("type_", "boolean") subModel

        AttributoTypeJSONSchemaInteger subModel ->
            encodeJSONSchemaIntegerWithTag ("type_", "integer") subModel

        AttributoTypeJSONSchemaNumber subModel ->
            encodeJSONSchemaNumberWithTag ("type_", "number") subModel

        AttributoTypeJSONSchemaString subModel ->
            encodeJSONSchemaStringWithTag ("type_", "string") subModel




stringFromChemicalType : ChemicalType -> String
stringFromChemicalType model =
    case model of
        ChemicalTypeCrystal ->
            "crystal"

        ChemicalTypeSolution ->
            "solution"


encodeChemicalType : ChemicalType -> Json.Encode.Value
encodeChemicalType =
    Json.Encode.string << stringFromChemicalType


stringFromDBJobStatus : DBJobStatus -> String
stringFromDBJobStatus model =
    case model of
        DBJobStatusQueued ->
            "queued"

        DBJobStatusRunning ->
            "running"

        DBJobStatusDone ->
            "done"


encodeDBJobStatus : DBJobStatus -> Json.Encode.Value
encodeDBJobStatus =
    Json.Encode.string << stringFromDBJobStatus


encodeHTTPValidationError : HTTPValidationError -> Json.Encode.Value
encodeHTTPValidationError =
    encodeObject << encodeHTTPValidationErrorPairs


encodeHTTPValidationErrorWithTag : ( String, String ) -> HTTPValidationError -> Json.Encode.Value
encodeHTTPValidationErrorWithTag (tagField, tag) model =
    encodeObject (encodeHTTPValidationErrorPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeHTTPValidationErrorPairs : HTTPValidationError -> List EncodedField
encodeHTTPValidationErrorPairs model =
    let
        pairs =
            [ maybeEncode "detail" (Json.Encode.list encodeValidationError) model.detail
            ]
    in
    pairs


encodeJSONSchemaArray : JSONSchemaArray -> Json.Encode.Value
encodeJSONSchemaArray =
    encodeObject << encodeJSONSchemaArrayPairs


encodeJSONSchemaArrayWithTag : ( String, String ) -> JSONSchemaArray -> Json.Encode.Value
encodeJSONSchemaArrayWithTag (tagField, tag) model =
    encodeObject (encodeJSONSchemaArrayPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJSONSchemaArrayPairs : JSONSchemaArray -> List EncodedField
encodeJSONSchemaArrayPairs model =
    let
        pairs =
            [ encode "type" encodeJSONSchemaArrayType model.type_
            , encode "item_type" encodeJSONSchemaArraySubtype model.itemType
            , maybeEncode "minItems" Json.Encode.int model.minItems
            , maybeEncode "maxItems" Json.Encode.int model.maxItems
            ]
    in
    pairs

stringFromJSONSchemaArrayType : JSONSchemaArrayType -> String
stringFromJSONSchemaArrayType model =
    case model of
        JSONSchemaArrayTypeArray ->
            "array"


encodeJSONSchemaArrayType : JSONSchemaArrayType -> Json.Encode.Value
encodeJSONSchemaArrayType =
    Json.Encode.string << stringFromJSONSchemaArrayType



stringFromJSONSchemaArraySubtype : JSONSchemaArraySubtype -> String
stringFromJSONSchemaArraySubtype model =
    case model of
        JSONSchemaArraySubtypeString ->
            "string"

        JSONSchemaArraySubtypeBool ->
            "bool"

        JSONSchemaArraySubtypeNumber ->
            "number"


encodeJSONSchemaArraySubtype : JSONSchemaArraySubtype -> Json.Encode.Value
encodeJSONSchemaArraySubtype =
    Json.Encode.string << stringFromJSONSchemaArraySubtype


encodeJSONSchemaBoolean : JSONSchemaBoolean -> Json.Encode.Value
encodeJSONSchemaBoolean =
    encodeObject << encodeJSONSchemaBooleanPairs


encodeJSONSchemaBooleanWithTag : ( String, String ) -> JSONSchemaBoolean -> Json.Encode.Value
encodeJSONSchemaBooleanWithTag (tagField, tag) model =
    encodeObject (encodeJSONSchemaBooleanPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJSONSchemaBooleanPairs : JSONSchemaBoolean -> List EncodedField
encodeJSONSchemaBooleanPairs model =
    let
        pairs =
            [ encode "type" encodeJSONSchemaBooleanType model.type_
            ]
    in
    pairs

stringFromJSONSchemaBooleanType : JSONSchemaBooleanType -> String
stringFromJSONSchemaBooleanType model =
    case model of
        JSONSchemaBooleanTypeBoolean ->
            "boolean"


encodeJSONSchemaBooleanType : JSONSchemaBooleanType -> Json.Encode.Value
encodeJSONSchemaBooleanType =
    Json.Encode.string << stringFromJSONSchemaBooleanType



encodeJSONSchemaInteger : JSONSchemaInteger -> Json.Encode.Value
encodeJSONSchemaInteger =
    encodeObject << encodeJSONSchemaIntegerPairs


encodeJSONSchemaIntegerWithTag : ( String, String ) -> JSONSchemaInteger -> Json.Encode.Value
encodeJSONSchemaIntegerWithTag (tagField, tag) model =
    encodeObject (encodeJSONSchemaIntegerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJSONSchemaIntegerPairs : JSONSchemaInteger -> List EncodedField
encodeJSONSchemaIntegerPairs model =
    let
        pairs =
            [ encode "type" encodeJSONSchemaIntegerType model.type_
            , maybeEncode "format" encodeJSONSchemaIntegerFormat model.format
            ]
    in
    pairs

stringFromJSONSchemaIntegerType : JSONSchemaIntegerType -> String
stringFromJSONSchemaIntegerType model =
    case model of
        JSONSchemaIntegerTypeInteger ->
            "integer"


encodeJSONSchemaIntegerType : JSONSchemaIntegerType -> Json.Encode.Value
encodeJSONSchemaIntegerType =
    Json.Encode.string << stringFromJSONSchemaIntegerType


stringFromJSONSchemaIntegerFormat : JSONSchemaIntegerFormat -> String
stringFromJSONSchemaIntegerFormat model =
    case model of
        JSONSchemaIntegerFormatDateTime ->
            "date-time"

        JSONSchemaIntegerFormatChemicalId ->
            "chemical-id"


encodeJSONSchemaIntegerFormat : JSONSchemaIntegerFormat -> Json.Encode.Value
encodeJSONSchemaIntegerFormat =
    Json.Encode.string << stringFromJSONSchemaIntegerFormat



encodeJSONSchemaNumber : JSONSchemaNumber -> Json.Encode.Value
encodeJSONSchemaNumber =
    encodeObject << encodeJSONSchemaNumberPairs


encodeJSONSchemaNumberWithTag : ( String, String ) -> JSONSchemaNumber -> Json.Encode.Value
encodeJSONSchemaNumberWithTag (tagField, tag) model =
    encodeObject (encodeJSONSchemaNumberPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJSONSchemaNumberPairs : JSONSchemaNumber -> List EncodedField
encodeJSONSchemaNumberPairs model =
    let
        pairs =
            [ encode "type" encodeJSONSchemaNumberType model.type_
            , maybeEncode "minimum" Json.Encode.float model.minimum
            , maybeEncode "maximum" Json.Encode.float model.maximum
            , maybeEncode "exclusiveMinimum" Json.Encode.float model.exclusiveMinimum
            , maybeEncode "exclusiveMaximum" Json.Encode.float model.exclusiveMaximum
            , maybeEncode "suffix" Json.Encode.string model.suffix
            , maybeEncode "format" encodeJSONSchemaNumberFormat model.format
            , maybeEncode "tolerance" Json.Encode.float model.tolerance
            , maybeEncode "toleranceIsAbsolute" Json.Encode.bool model.toleranceIsAbsolute
            ]
    in
    pairs

stringFromJSONSchemaNumberType : JSONSchemaNumberType -> String
stringFromJSONSchemaNumberType model =
    case model of
        JSONSchemaNumberTypeNumber ->
            "number"


encodeJSONSchemaNumberType : JSONSchemaNumberType -> Json.Encode.Value
encodeJSONSchemaNumberType =
    Json.Encode.string << stringFromJSONSchemaNumberType


stringFromJSONSchemaNumberFormat : JSONSchemaNumberFormat -> String
stringFromJSONSchemaNumberFormat model =
    case model of
        JSONSchemaNumberFormatStandardUnit ->
            "standard-unit"


encodeJSONSchemaNumberFormat : JSONSchemaNumberFormat -> Json.Encode.Value
encodeJSONSchemaNumberFormat =
    Json.Encode.string << stringFromJSONSchemaNumberFormat



encodeJSONSchemaString : JSONSchemaString -> Json.Encode.Value
encodeJSONSchemaString =
    encodeObject << encodeJSONSchemaStringPairs


encodeJSONSchemaStringWithTag : ( String, String ) -> JSONSchemaString -> Json.Encode.Value
encodeJSONSchemaStringWithTag (tagField, tag) model =
    encodeObject (encodeJSONSchemaStringPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJSONSchemaStringPairs : JSONSchemaString -> List EncodedField
encodeJSONSchemaStringPairs model =
    let
        pairs =
            [ encode "type" encodeJSONSchemaStringType model.type_
            , maybeEncode "enum" (Json.Encode.list Json.Encode.string) model.enum
            ]
    in
    pairs

stringFromJSONSchemaStringType : JSONSchemaStringType -> String
stringFromJSONSchemaStringType model =
    case model of
        JSONSchemaStringTypeString ->
            "string"


encodeJSONSchemaStringType : JSONSchemaStringType -> Json.Encode.Value
encodeJSONSchemaStringType =
    Json.Encode.string << stringFromJSONSchemaStringType



encodeJsonAnalysisRun : JsonAnalysisRun -> Json.Encode.Value
encodeJsonAnalysisRun =
    encodeObject << encodeJsonAnalysisRunPairs


encodeJsonAnalysisRunWithTag : ( String, String ) -> JsonAnalysisRun -> Json.Encode.Value
encodeJsonAnalysisRunWithTag (tagField, tag) model =
    encodeObject (encodeJsonAnalysisRunPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonAnalysisRunPairs : JsonAnalysisRun -> List EncodedField
encodeJsonAnalysisRunPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "external_id" Json.Encode.int model.externalId
            , encode "attributi" (Json.Encode.list encodeJsonAttributoValue) model.attributi
            , encode "file_paths" (Json.Encode.list encodeJsonRunFile) model.filePaths
            ]
    in
    pairs


encodeJsonAttributiIdAndRole : JsonAttributiIdAndRole -> Json.Encode.Value
encodeJsonAttributiIdAndRole =
    encodeObject << encodeJsonAttributiIdAndRolePairs


encodeJsonAttributiIdAndRoleWithTag : ( String, String ) -> JsonAttributiIdAndRole -> Json.Encode.Value
encodeJsonAttributiIdAndRoleWithTag (tagField, tag) model =
    encodeObject (encodeJsonAttributiIdAndRolePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonAttributiIdAndRolePairs : JsonAttributiIdAndRole -> List EncodedField
encodeJsonAttributiIdAndRolePairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "role" encodeChemicalType model.role
            ]
    in
    pairs


encodeJsonAttributo : JsonAttributo -> Json.Encode.Value
encodeJsonAttributo =
    encodeObject << encodeJsonAttributoPairs


encodeJsonAttributoWithTag : ( String, String ) -> JsonAttributo -> Json.Encode.Value
encodeJsonAttributoWithTag (tagField, tag) model =
    encodeObject (encodeJsonAttributoPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonAttributoPairs : JsonAttributo -> List EncodedField
encodeJsonAttributoPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "name" Json.Encode.string model.name
            , encode "description" Json.Encode.string model.description
            , encode "group" Json.Encode.string model.group
            , encode "associated_table" encodeAssociatedTable model.associatedTable
            , maybeEncode "attributo_type_integer" encodeJSONSchemaInteger model.attributoTypeInteger
            , maybeEncode "attributo_type_number" encodeJSONSchemaNumber model.attributoTypeNumber
            , maybeEncode "attributo_type_string" encodeJSONSchemaString model.attributoTypeString
            , maybeEncode "attributo_type_array" encodeJSONSchemaArray model.attributoTypeArray
            , maybeEncode "attributo_type_boolean" encodeJSONSchemaBoolean model.attributoTypeBoolean
            ]
    in
    pairs


encodeJsonAttributoBulkValue : JsonAttributoBulkValue -> Json.Encode.Value
encodeJsonAttributoBulkValue =
    encodeObject << encodeJsonAttributoBulkValuePairs


encodeJsonAttributoBulkValueWithTag : ( String, String ) -> JsonAttributoBulkValue -> Json.Encode.Value
encodeJsonAttributoBulkValueWithTag (tagField, tag) model =
    encodeObject (encodeJsonAttributoBulkValuePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonAttributoBulkValuePairs : JsonAttributoBulkValue -> List EncodedField
encodeJsonAttributoBulkValuePairs model =
    let
        pairs =
            [ encode "attributo_id" Json.Encode.int model.attributoId
            , encode "values" (Json.Encode.list encodeJsonAttributoValue) model.values
            ]
    in
    pairs


encodeJsonAttributoValue : JsonAttributoValue -> Json.Encode.Value
encodeJsonAttributoValue =
    encodeObject << encodeJsonAttributoValuePairs


encodeJsonAttributoValueWithTag : ( String, String ) -> JsonAttributoValue -> Json.Encode.Value
encodeJsonAttributoValueWithTag (tagField, tag) model =
    encodeObject (encodeJsonAttributoValuePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonAttributoValuePairs : JsonAttributoValue -> List EncodedField
encodeJsonAttributoValuePairs model =
    let
        pairs =
            [ encode "attributo_id" Json.Encode.int model.attributoId
            , maybeEncode "attributo_value_str" Json.Encode.string model.attributoValueStr
            , maybeEncode "attributo_value_int" Json.Encode.int model.attributoValueInt
            , maybeEncode "attributo_value_chemical" Json.Encode.int model.attributoValueChemical
            , maybeEncode "attributo_value_datetime" Json.Encode.int model.attributoValueDatetime
            , maybeEncode "attributo_value_float" Json.Encode.float model.attributoValueFloat
            , maybeEncode "attributo_value_bool" Json.Encode.bool model.attributoValueBool
            , maybeEncode "attributo_value_list_str" (Json.Encode.list Json.Encode.string) model.attributoValueListStr
            , maybeEncode "attributo_value_list_float" (Json.Encode.list Json.Encode.float) model.attributoValueListFloat
            , maybeEncode "attributo_value_list_bool" (Json.Encode.list Json.Encode.bool) model.attributoValueListBool
            ]
    in
    pairs


encodeJsonAttributoWithName : JsonAttributoWithName -> Json.Encode.Value
encodeJsonAttributoWithName =
    encodeObject << encodeJsonAttributoWithNamePairs


encodeJsonAttributoWithNameWithTag : ( String, String ) -> JsonAttributoWithName -> Json.Encode.Value
encodeJsonAttributoWithNameWithTag (tagField, tag) model =
    encodeObject (encodeJsonAttributoWithNamePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonAttributoWithNamePairs : JsonAttributoWithName -> List EncodedField
encodeJsonAttributoWithNamePairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "name" Json.Encode.string model.name
            ]
    in
    pairs


encodeJsonBeamtime : JsonBeamtime -> Json.Encode.Value
encodeJsonBeamtime =
    encodeObject << encodeJsonBeamtimePairs


encodeJsonBeamtimeWithTag : ( String, String ) -> JsonBeamtime -> Json.Encode.Value
encodeJsonBeamtimeWithTag (tagField, tag) model =
    encodeObject (encodeJsonBeamtimePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonBeamtimePairs : JsonBeamtime -> List EncodedField
encodeJsonBeamtimePairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "external_id" Json.Encode.string model.externalId
            , encode "proposal" Json.Encode.string model.proposal
            , encode "beamline" Json.Encode.string model.beamline
            , encode "title" Json.Encode.string model.title
            , encode "comment" Json.Encode.string model.comment
            , encode "start" Json.Encode.int model.start
            , encode "end" Json.Encode.int model.end
            , encode "chemical_names" (Json.Encode.list Json.Encode.string) model.chemicalNames
            , encode "analysis_output_path" Json.Encode.string model.analysisOutputPath
            ]
    in
    pairs


encodeJsonBeamtimeOutput : JsonBeamtimeOutput -> Json.Encode.Value
encodeJsonBeamtimeOutput =
    encodeObject << encodeJsonBeamtimeOutputPairs


encodeJsonBeamtimeOutputWithTag : ( String, String ) -> JsonBeamtimeOutput -> Json.Encode.Value
encodeJsonBeamtimeOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonBeamtimeOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonBeamtimeOutputPairs : JsonBeamtimeOutput -> List EncodedField
encodeJsonBeamtimeOutputPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            ]
    in
    pairs


encodeJsonBeamtimeSchedule : JsonBeamtimeSchedule -> Json.Encode.Value
encodeJsonBeamtimeSchedule =
    encodeObject << encodeJsonBeamtimeSchedulePairs


encodeJsonBeamtimeScheduleWithTag : ( String, String ) -> JsonBeamtimeSchedule -> Json.Encode.Value
encodeJsonBeamtimeScheduleWithTag (tagField, tag) model =
    encodeObject (encodeJsonBeamtimeSchedulePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonBeamtimeSchedulePairs : JsonBeamtimeSchedule -> List EncodedField
encodeJsonBeamtimeSchedulePairs model =
    let
        pairs =
            [ encode "schedule" (Json.Encode.list encodeJsonBeamtimeScheduleRow) model.schedule
            ]
    in
    pairs


encodeJsonBeamtimeScheduleOutput : JsonBeamtimeScheduleOutput -> Json.Encode.Value
encodeJsonBeamtimeScheduleOutput =
    encodeObject << encodeJsonBeamtimeScheduleOutputPairs


encodeJsonBeamtimeScheduleOutputWithTag : ( String, String ) -> JsonBeamtimeScheduleOutput -> Json.Encode.Value
encodeJsonBeamtimeScheduleOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonBeamtimeScheduleOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonBeamtimeScheduleOutputPairs : JsonBeamtimeScheduleOutput -> List EncodedField
encodeJsonBeamtimeScheduleOutputPairs model =
    let
        pairs =
            [ encode "schedule" (Json.Encode.list encodeJsonBeamtimeScheduleRow) model.schedule
            ]
    in
    pairs


encodeJsonBeamtimeScheduleRow : JsonBeamtimeScheduleRow -> Json.Encode.Value
encodeJsonBeamtimeScheduleRow =
    encodeObject << encodeJsonBeamtimeScheduleRowPairs


encodeJsonBeamtimeScheduleRowWithTag : ( String, String ) -> JsonBeamtimeScheduleRow -> Json.Encode.Value
encodeJsonBeamtimeScheduleRowWithTag (tagField, tag) model =
    encodeObject (encodeJsonBeamtimeScheduleRowPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonBeamtimeScheduleRowPairs : JsonBeamtimeScheduleRow -> List EncodedField
encodeJsonBeamtimeScheduleRowPairs model =
    let
        pairs =
            [ encode "users" Json.Encode.string model.users
            , encode "date" Json.Encode.string model.date
            , encode "shift" Json.Encode.string model.shift
            , encode "comment" Json.Encode.string model.comment
            , encode "td_support" Json.Encode.string model.tdSupport
            , encode "chemicals" (Json.Encode.list Json.Encode.int) model.chemicals
            , encode "start_posix" Json.Encode.int model.startPosix
            , encode "stop_posix" Json.Encode.int model.stopPosix
            ]
    in
    pairs


encodeJsonChangeRunExperimentType : JsonChangeRunExperimentType -> Json.Encode.Value
encodeJsonChangeRunExperimentType =
    encodeObject << encodeJsonChangeRunExperimentTypePairs


encodeJsonChangeRunExperimentTypeWithTag : ( String, String ) -> JsonChangeRunExperimentType -> Json.Encode.Value
encodeJsonChangeRunExperimentTypeWithTag (tagField, tag) model =
    encodeObject (encodeJsonChangeRunExperimentTypePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonChangeRunExperimentTypePairs : JsonChangeRunExperimentType -> List EncodedField
encodeJsonChangeRunExperimentTypePairs model =
    let
        pairs =
            [ encode "run_internal_id" Json.Encode.int model.runInternalId
            , maybeEncode "experiment_type_id" Json.Encode.int model.experimentTypeId
            ]
    in
    pairs


encodeJsonChangeRunExperimentTypeOutput : JsonChangeRunExperimentTypeOutput -> Json.Encode.Value
encodeJsonChangeRunExperimentTypeOutput =
    encodeObject << encodeJsonChangeRunExperimentTypeOutputPairs


encodeJsonChangeRunExperimentTypeOutputWithTag : ( String, String ) -> JsonChangeRunExperimentTypeOutput -> Json.Encode.Value
encodeJsonChangeRunExperimentTypeOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonChangeRunExperimentTypeOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonChangeRunExperimentTypeOutputPairs : JsonChangeRunExperimentTypeOutput -> List EncodedField
encodeJsonChangeRunExperimentTypeOutputPairs model =
    let
        pairs =
            [ encode "result" Json.Encode.bool model.result
            ]
    in
    pairs


encodeJsonCheckStandardUnitInput : JsonCheckStandardUnitInput -> Json.Encode.Value
encodeJsonCheckStandardUnitInput =
    encodeObject << encodeJsonCheckStandardUnitInputPairs


encodeJsonCheckStandardUnitInputWithTag : ( String, String ) -> JsonCheckStandardUnitInput -> Json.Encode.Value
encodeJsonCheckStandardUnitInputWithTag (tagField, tag) model =
    encodeObject (encodeJsonCheckStandardUnitInputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonCheckStandardUnitInputPairs : JsonCheckStandardUnitInput -> List EncodedField
encodeJsonCheckStandardUnitInputPairs model =
    let
        pairs =
            [ encode "input" Json.Encode.string model.input
            ]
    in
    pairs


encodeJsonCheckStandardUnitOutput : JsonCheckStandardUnitOutput -> Json.Encode.Value
encodeJsonCheckStandardUnitOutput =
    encodeObject << encodeJsonCheckStandardUnitOutputPairs


encodeJsonCheckStandardUnitOutputWithTag : ( String, String ) -> JsonCheckStandardUnitOutput -> Json.Encode.Value
encodeJsonCheckStandardUnitOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonCheckStandardUnitOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonCheckStandardUnitOutputPairs : JsonCheckStandardUnitOutput -> List EncodedField
encodeJsonCheckStandardUnitOutputPairs model =
    let
        pairs =
            [ encode "input" Json.Encode.string model.input
            , maybeEncode "error" Json.Encode.string model.error
            , maybeEncode "normalized" Json.Encode.string model.normalized
            ]
    in
    pairs


encodeJsonChemical : JsonChemical -> Json.Encode.Value
encodeJsonChemical =
    encodeObject << encodeJsonChemicalPairs


encodeJsonChemicalWithTag : ( String, String ) -> JsonChemical -> Json.Encode.Value
encodeJsonChemicalWithTag (tagField, tag) model =
    encodeObject (encodeJsonChemicalPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonChemicalPairs : JsonChemical -> List EncodedField
encodeJsonChemicalPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "beamtime_id" Json.Encode.int model.beamtimeId
            , encode "name" Json.Encode.string model.name
            , encode "responsible_person" Json.Encode.string model.responsiblePerson
            , encode "chemical_type" encodeChemicalType model.chemicalType
            , encode "attributi" (Json.Encode.list encodeJsonAttributoValue) model.attributi
            , encode "files" (Json.Encode.list encodeJsonFileOutput) model.files
            ]
    in
    pairs


encodeJsonChemicalIdAndName : JsonChemicalIdAndName -> Json.Encode.Value
encodeJsonChemicalIdAndName =
    encodeObject << encodeJsonChemicalIdAndNamePairs


encodeJsonChemicalIdAndNameWithTag : ( String, String ) -> JsonChemicalIdAndName -> Json.Encode.Value
encodeJsonChemicalIdAndNameWithTag (tagField, tag) model =
    encodeObject (encodeJsonChemicalIdAndNamePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonChemicalIdAndNamePairs : JsonChemicalIdAndName -> List EncodedField
encodeJsonChemicalIdAndNamePairs model =
    let
        pairs =
            [ encode "chemical_id" Json.Encode.int model.chemicalId
            , encode "name" Json.Encode.string model.name
            ]
    in
    pairs


encodeJsonChemicalWithId : JsonChemicalWithId -> Json.Encode.Value
encodeJsonChemicalWithId =
    encodeObject << encodeJsonChemicalWithIdPairs


encodeJsonChemicalWithIdWithTag : ( String, String ) -> JsonChemicalWithId -> Json.Encode.Value
encodeJsonChemicalWithIdWithTag (tagField, tag) model =
    encodeObject (encodeJsonChemicalWithIdPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonChemicalWithIdPairs : JsonChemicalWithId -> List EncodedField
encodeJsonChemicalWithIdPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "beamtime_id" Json.Encode.int model.beamtimeId
            , encode "name" Json.Encode.string model.name
            , encode "responsible_person" Json.Encode.string model.responsiblePerson
            , encode "chemical_type" encodeChemicalType model.chemicalType
            , encode "attributi" (Json.Encode.list encodeJsonAttributoValue) model.attributi
            , encode "file_ids" (Json.Encode.list Json.Encode.int) model.fileIds
            ]
    in
    pairs


encodeJsonChemicalWithoutId : JsonChemicalWithoutId -> Json.Encode.Value
encodeJsonChemicalWithoutId =
    encodeObject << encodeJsonChemicalWithoutIdPairs


encodeJsonChemicalWithoutIdWithTag : ( String, String ) -> JsonChemicalWithoutId -> Json.Encode.Value
encodeJsonChemicalWithoutIdWithTag (tagField, tag) model =
    encodeObject (encodeJsonChemicalWithoutIdPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonChemicalWithoutIdPairs : JsonChemicalWithoutId -> List EncodedField
encodeJsonChemicalWithoutIdPairs model =
    let
        pairs =
            [ encode "beamtime_id" Json.Encode.int model.beamtimeId
            , encode "name" Json.Encode.string model.name
            , encode "responsible_person" Json.Encode.string model.responsiblePerson
            , encode "chemical_type" encodeChemicalType model.chemicalType
            , encode "attributi" (Json.Encode.list encodeJsonAttributoValue) model.attributi
            , encode "file_ids" (Json.Encode.list Json.Encode.int) model.fileIds
            ]
    in
    pairs


encodeJsonCopyChemicalInput : JsonCopyChemicalInput -> Json.Encode.Value
encodeJsonCopyChemicalInput =
    encodeObject << encodeJsonCopyChemicalInputPairs


encodeJsonCopyChemicalInputWithTag : ( String, String ) -> JsonCopyChemicalInput -> Json.Encode.Value
encodeJsonCopyChemicalInputWithTag (tagField, tag) model =
    encodeObject (encodeJsonCopyChemicalInputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonCopyChemicalInputPairs : JsonCopyChemicalInput -> List EncodedField
encodeJsonCopyChemicalInputPairs model =
    let
        pairs =
            [ encode "chemical_id" Json.Encode.int model.chemicalId
            , encode "target_beamtime_id" Json.Encode.int model.targetBeamtimeId
            , encode "create_attributi" Json.Encode.bool model.createAttributi
            ]
    in
    pairs


encodeJsonCopyChemicalOutput : JsonCopyChemicalOutput -> Json.Encode.Value
encodeJsonCopyChemicalOutput =
    encodeObject << encodeJsonCopyChemicalOutputPairs


encodeJsonCopyChemicalOutputWithTag : ( String, String ) -> JsonCopyChemicalOutput -> Json.Encode.Value
encodeJsonCopyChemicalOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonCopyChemicalOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonCopyChemicalOutputPairs : JsonCopyChemicalOutput -> List EncodedField
encodeJsonCopyChemicalOutputPairs model =
    let
        pairs =
            [ encode "new_chemical_id" Json.Encode.int model.newChemicalId
            ]
    in
    pairs


encodeJsonCopyExperimentTypesInput : JsonCopyExperimentTypesInput -> Json.Encode.Value
encodeJsonCopyExperimentTypesInput =
    encodeObject << encodeJsonCopyExperimentTypesInputPairs


encodeJsonCopyExperimentTypesInputWithTag : ( String, String ) -> JsonCopyExperimentTypesInput -> Json.Encode.Value
encodeJsonCopyExperimentTypesInputWithTag (tagField, tag) model =
    encodeObject (encodeJsonCopyExperimentTypesInputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonCopyExperimentTypesInputPairs : JsonCopyExperimentTypesInput -> List EncodedField
encodeJsonCopyExperimentTypesInputPairs model =
    let
        pairs =
            [ encode "from_beamtime" Json.Encode.int model.fromBeamtime
            , encode "to_beamtime" Json.Encode.int model.toBeamtime
            ]
    in
    pairs


encodeJsonCopyExperimentTypesOutput : JsonCopyExperimentTypesOutput -> Json.Encode.Value
encodeJsonCopyExperimentTypesOutput =
    encodeObject << encodeJsonCopyExperimentTypesOutputPairs


encodeJsonCopyExperimentTypesOutputWithTag : ( String, String ) -> JsonCopyExperimentTypesOutput -> Json.Encode.Value
encodeJsonCopyExperimentTypesOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonCopyExperimentTypesOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonCopyExperimentTypesOutputPairs : JsonCopyExperimentTypesOutput -> List EncodedField
encodeJsonCopyExperimentTypesOutputPairs model =
    let
        pairs =
            [ encode "to_beamtime_experiment_type_ids" (Json.Encode.list Json.Encode.int) model.toBeamtimeExperimentTypeIds
            ]
    in
    pairs


encodeJsonCreateAttributiFromSchemaInput : JsonCreateAttributiFromSchemaInput -> Json.Encode.Value
encodeJsonCreateAttributiFromSchemaInput =
    encodeObject << encodeJsonCreateAttributiFromSchemaInputPairs


encodeJsonCreateAttributiFromSchemaInputWithTag : ( String, String ) -> JsonCreateAttributiFromSchemaInput -> Json.Encode.Value
encodeJsonCreateAttributiFromSchemaInputWithTag (tagField, tag) model =
    encodeObject (encodeJsonCreateAttributiFromSchemaInputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonCreateAttributiFromSchemaInputPairs : JsonCreateAttributiFromSchemaInput -> List EncodedField
encodeJsonCreateAttributiFromSchemaInputPairs model =
    let
        pairs =
            [ encode "attributi_schema" (Json.Encode.list encodeJsonCreateAttributiFromSchemaSingleAttributo) model.attributiSchema
            , encode "beamtime_id" Json.Encode.int model.beamtimeId
            ]
    in
    pairs


encodeJsonCreateAttributiFromSchemaOutput : JsonCreateAttributiFromSchemaOutput -> Json.Encode.Value
encodeJsonCreateAttributiFromSchemaOutput =
    encodeObject << encodeJsonCreateAttributiFromSchemaOutputPairs


encodeJsonCreateAttributiFromSchemaOutputWithTag : ( String, String ) -> JsonCreateAttributiFromSchemaOutput -> Json.Encode.Value
encodeJsonCreateAttributiFromSchemaOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonCreateAttributiFromSchemaOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonCreateAttributiFromSchemaOutputPairs : JsonCreateAttributiFromSchemaOutput -> List EncodedField
encodeJsonCreateAttributiFromSchemaOutputPairs model =
    let
        pairs =
            [ encode "created_attributi" Json.Encode.int model.createdAttributi
            ]
    in
    pairs


encodeJsonCreateAttributiFromSchemaSingleAttributo : JsonCreateAttributiFromSchemaSingleAttributo -> Json.Encode.Value
encodeJsonCreateAttributiFromSchemaSingleAttributo =
    encodeObject << encodeJsonCreateAttributiFromSchemaSingleAttributoPairs


encodeJsonCreateAttributiFromSchemaSingleAttributoWithTag : ( String, String ) -> JsonCreateAttributiFromSchemaSingleAttributo -> Json.Encode.Value
encodeJsonCreateAttributiFromSchemaSingleAttributoWithTag (tagField, tag) model =
    encodeObject (encodeJsonCreateAttributiFromSchemaSingleAttributoPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonCreateAttributiFromSchemaSingleAttributoPairs : JsonCreateAttributiFromSchemaSingleAttributo -> List EncodedField
encodeJsonCreateAttributiFromSchemaSingleAttributoPairs model =
    let
        pairs =
            [ encode "attributo_name" Json.Encode.string model.attributoName
            , encode "attributo_type" encodeAttributoType model.attributoType
            , maybeEncode "description" Json.Encode.string model.description
            ]
    in
    pairs


encodeJsonCreateAttributoInput : JsonCreateAttributoInput -> Json.Encode.Value
encodeJsonCreateAttributoInput =
    encodeObject << encodeJsonCreateAttributoInputPairs


encodeJsonCreateAttributoInputWithTag : ( String, String ) -> JsonCreateAttributoInput -> Json.Encode.Value
encodeJsonCreateAttributoInputWithTag (tagField, tag) model =
    encodeObject (encodeJsonCreateAttributoInputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonCreateAttributoInputPairs : JsonCreateAttributoInput -> List EncodedField
encodeJsonCreateAttributoInputPairs model =
    let
        pairs =
            [ encode "beamtime_id" Json.Encode.int model.beamtimeId
            , encode "name" Json.Encode.string model.name
            , encode "description" Json.Encode.string model.description
            , encode "group" Json.Encode.string model.group
            , encode "associated_table" encodeAssociatedTable model.associatedTable
            , maybeEncode "attributo_type_integer" encodeJSONSchemaInteger model.attributoTypeInteger
            , maybeEncode "attributo_type_number" encodeJSONSchemaNumber model.attributoTypeNumber
            , maybeEncode "attributo_type_string" encodeJSONSchemaString model.attributoTypeString
            , maybeEncode "attributo_type_array" encodeJSONSchemaArray model.attributoTypeArray
            , maybeEncode "attributo_type_boolean" encodeJSONSchemaBoolean model.attributoTypeBoolean
            ]
    in
    pairs


encodeJsonCreateAttributoOutput : JsonCreateAttributoOutput -> Json.Encode.Value
encodeJsonCreateAttributoOutput =
    encodeObject << encodeJsonCreateAttributoOutputPairs


encodeJsonCreateAttributoOutputWithTag : ( String, String ) -> JsonCreateAttributoOutput -> Json.Encode.Value
encodeJsonCreateAttributoOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonCreateAttributoOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonCreateAttributoOutputPairs : JsonCreateAttributoOutput -> List EncodedField
encodeJsonCreateAttributoOutputPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            ]
    in
    pairs


encodeJsonCreateChemicalOutput : JsonCreateChemicalOutput -> Json.Encode.Value
encodeJsonCreateChemicalOutput =
    encodeObject << encodeJsonCreateChemicalOutputPairs


encodeJsonCreateChemicalOutputWithTag : ( String, String ) -> JsonCreateChemicalOutput -> Json.Encode.Value
encodeJsonCreateChemicalOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonCreateChemicalOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonCreateChemicalOutputPairs : JsonCreateChemicalOutput -> List EncodedField
encodeJsonCreateChemicalOutputPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            ]
    in
    pairs


encodeJsonCreateDataSetFromRun : JsonCreateDataSetFromRun -> Json.Encode.Value
encodeJsonCreateDataSetFromRun =
    encodeObject << encodeJsonCreateDataSetFromRunPairs


encodeJsonCreateDataSetFromRunWithTag : ( String, String ) -> JsonCreateDataSetFromRun -> Json.Encode.Value
encodeJsonCreateDataSetFromRunWithTag (tagField, tag) model =
    encodeObject (encodeJsonCreateDataSetFromRunPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonCreateDataSetFromRunPairs : JsonCreateDataSetFromRun -> List EncodedField
encodeJsonCreateDataSetFromRunPairs model =
    let
        pairs =
            [ encode "run_internal_id" Json.Encode.int model.runInternalId
            ]
    in
    pairs


encodeJsonCreateDataSetFromRunOutput : JsonCreateDataSetFromRunOutput -> Json.Encode.Value
encodeJsonCreateDataSetFromRunOutput =
    encodeObject << encodeJsonCreateDataSetFromRunOutputPairs


encodeJsonCreateDataSetFromRunOutputWithTag : ( String, String ) -> JsonCreateDataSetFromRunOutput -> Json.Encode.Value
encodeJsonCreateDataSetFromRunOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonCreateDataSetFromRunOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonCreateDataSetFromRunOutputPairs : JsonCreateDataSetFromRunOutput -> List EncodedField
encodeJsonCreateDataSetFromRunOutputPairs model =
    let
        pairs =
            [ encode "data_set_id" Json.Encode.int model.dataSetId
            ]
    in
    pairs


encodeJsonCreateDataSetInput : JsonCreateDataSetInput -> Json.Encode.Value
encodeJsonCreateDataSetInput =
    encodeObject << encodeJsonCreateDataSetInputPairs


encodeJsonCreateDataSetInputWithTag : ( String, String ) -> JsonCreateDataSetInput -> Json.Encode.Value
encodeJsonCreateDataSetInputWithTag (tagField, tag) model =
    encodeObject (encodeJsonCreateDataSetInputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonCreateDataSetInputPairs : JsonCreateDataSetInput -> List EncodedField
encodeJsonCreateDataSetInputPairs model =
    let
        pairs =
            [ encode "experiment_type_id" Json.Encode.int model.experimentTypeId
            , encode "attributi" (Json.Encode.list encodeJsonAttributoValue) model.attributi
            ]
    in
    pairs


encodeJsonCreateDataSetOutput : JsonCreateDataSetOutput -> Json.Encode.Value
encodeJsonCreateDataSetOutput =
    encodeObject << encodeJsonCreateDataSetOutputPairs


encodeJsonCreateDataSetOutputWithTag : ( String, String ) -> JsonCreateDataSetOutput -> Json.Encode.Value
encodeJsonCreateDataSetOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonCreateDataSetOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonCreateDataSetOutputPairs : JsonCreateDataSetOutput -> List EncodedField
encodeJsonCreateDataSetOutputPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            ]
    in
    pairs


encodeJsonCreateExperimentTypeInput : JsonCreateExperimentTypeInput -> Json.Encode.Value
encodeJsonCreateExperimentTypeInput =
    encodeObject << encodeJsonCreateExperimentTypeInputPairs


encodeJsonCreateExperimentTypeInputWithTag : ( String, String ) -> JsonCreateExperimentTypeInput -> Json.Encode.Value
encodeJsonCreateExperimentTypeInputWithTag (tagField, tag) model =
    encodeObject (encodeJsonCreateExperimentTypeInputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonCreateExperimentTypeInputPairs : JsonCreateExperimentTypeInput -> List EncodedField
encodeJsonCreateExperimentTypeInputPairs model =
    let
        pairs =
            [ encode "name" Json.Encode.string model.name
            , encode "beamtime_id" Json.Encode.int model.beamtimeId
            , encode "attributi" (Json.Encode.list encodeJsonAttributiIdAndRole) model.attributi
            ]
    in
    pairs


encodeJsonCreateExperimentTypeOutput : JsonCreateExperimentTypeOutput -> Json.Encode.Value
encodeJsonCreateExperimentTypeOutput =
    encodeObject << encodeJsonCreateExperimentTypeOutputPairs


encodeJsonCreateExperimentTypeOutputWithTag : ( String, String ) -> JsonCreateExperimentTypeOutput -> Json.Encode.Value
encodeJsonCreateExperimentTypeOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonCreateExperimentTypeOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonCreateExperimentTypeOutputPairs : JsonCreateExperimentTypeOutput -> List EncodedField
encodeJsonCreateExperimentTypeOutputPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            ]
    in
    pairs


encodeJsonCreateFileOutput : JsonCreateFileOutput -> Json.Encode.Value
encodeJsonCreateFileOutput =
    encodeObject << encodeJsonCreateFileOutputPairs


encodeJsonCreateFileOutputWithTag : ( String, String ) -> JsonCreateFileOutput -> Json.Encode.Value
encodeJsonCreateFileOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonCreateFileOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonCreateFileOutputPairs : JsonCreateFileOutput -> List EncodedField
encodeJsonCreateFileOutputPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "file_name" Json.Encode.string model.fileName
            , encode "description" Json.Encode.string model.description
            , encode "type_" Json.Encode.string model.type__
            , encode "size_in_bytes" Json.Encode.int model.sizeInBytes
            , maybeEncode "original_path" Json.Encode.string model.originalPath
            ]
    in
    pairs


encodeJsonCreateIndexingForDataSetInput : JsonCreateIndexingForDataSetInput -> Json.Encode.Value
encodeJsonCreateIndexingForDataSetInput =
    encodeObject << encodeJsonCreateIndexingForDataSetInputPairs


encodeJsonCreateIndexingForDataSetInputWithTag : ( String, String ) -> JsonCreateIndexingForDataSetInput -> Json.Encode.Value
encodeJsonCreateIndexingForDataSetInputWithTag (tagField, tag) model =
    encodeObject (encodeJsonCreateIndexingForDataSetInputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonCreateIndexingForDataSetInputPairs : JsonCreateIndexingForDataSetInput -> List EncodedField
encodeJsonCreateIndexingForDataSetInputPairs model =
    let
        pairs =
            [ encode "data_set_id" Json.Encode.int model.dataSetId
            , encode "is_online" Json.Encode.bool model.isOnline
            , encode "cell_description" Json.Encode.string model.cellDescription
            , encode "geometry_file" Json.Encode.string model.geometryFile
            , encode "command_line" Json.Encode.string model.commandLine
            , encode "source" Json.Encode.string model.source
            ]
    in
    pairs


encodeJsonCreateIndexingForDataSetOutput : JsonCreateIndexingForDataSetOutput -> Json.Encode.Value
encodeJsonCreateIndexingForDataSetOutput =
    encodeObject << encodeJsonCreateIndexingForDataSetOutputPairs


encodeJsonCreateIndexingForDataSetOutputWithTag : ( String, String ) -> JsonCreateIndexingForDataSetOutput -> Json.Encode.Value
encodeJsonCreateIndexingForDataSetOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonCreateIndexingForDataSetOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonCreateIndexingForDataSetOutputPairs : JsonCreateIndexingForDataSetOutput -> List EncodedField
encodeJsonCreateIndexingForDataSetOutputPairs model =
    let
        pairs =
            [ encode "jobs_started_run_external_ids" (Json.Encode.list Json.Encode.int) model.jobsStartedRunExternalIds
            , encode "indexing_result_id" Json.Encode.int model.indexingResultId
            , encode "data_set_id" Json.Encode.int model.dataSetId
            , encode "indexing_parameters_id" Json.Encode.int model.indexingParametersId
            ]
    in
    pairs


encodeJsonCreateLiveStreamSnapshotOutput : JsonCreateLiveStreamSnapshotOutput -> Json.Encode.Value
encodeJsonCreateLiveStreamSnapshotOutput =
    encodeObject << encodeJsonCreateLiveStreamSnapshotOutputPairs


encodeJsonCreateLiveStreamSnapshotOutputWithTag : ( String, String ) -> JsonCreateLiveStreamSnapshotOutput -> Json.Encode.Value
encodeJsonCreateLiveStreamSnapshotOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonCreateLiveStreamSnapshotOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonCreateLiveStreamSnapshotOutputPairs : JsonCreateLiveStreamSnapshotOutput -> List EncodedField
encodeJsonCreateLiveStreamSnapshotOutputPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "file_name" Json.Encode.string model.fileName
            , encode "description" Json.Encode.string model.description
            , encode "type_" Json.Encode.string model.type__
            , encode "size_in_bytes" Json.Encode.int model.sizeInBytes
            , maybeEncode "original_path" Json.Encode.string model.originalPath
            ]
    in
    pairs


encodeJsonCreateOrUpdateRun : JsonCreateOrUpdateRun -> Json.Encode.Value
encodeJsonCreateOrUpdateRun =
    encodeObject << encodeJsonCreateOrUpdateRunPairs


encodeJsonCreateOrUpdateRunWithTag : ( String, String ) -> JsonCreateOrUpdateRun -> Json.Encode.Value
encodeJsonCreateOrUpdateRunWithTag (tagField, tag) model =
    encodeObject (encodeJsonCreateOrUpdateRunPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonCreateOrUpdateRunPairs : JsonCreateOrUpdateRun -> List EncodedField
encodeJsonCreateOrUpdateRunPairs model =
    let
        pairs =
            [ encode "beamtime_id" Json.Encode.int model.beamtimeId
            , encode "attributi" (Json.Encode.list encodeJsonAttributoValue) model.attributi
            , maybeEncode "files" (Json.Encode.list encodeJsonRunFile) model.files
            , maybeEncode "started" Json.Encode.int model.started
            , maybeEncode "stopped" Json.Encode.int model.stopped
            , maybeEncode "create_data_set" Json.Encode.bool model.createDataSet
            ]
    in
    pairs


encodeJsonCreateOrUpdateRunOutput : JsonCreateOrUpdateRunOutput -> Json.Encode.Value
encodeJsonCreateOrUpdateRunOutput =
    encodeObject << encodeJsonCreateOrUpdateRunOutputPairs


encodeJsonCreateOrUpdateRunOutputWithTag : ( String, String ) -> JsonCreateOrUpdateRunOutput -> Json.Encode.Value
encodeJsonCreateOrUpdateRunOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonCreateOrUpdateRunOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonCreateOrUpdateRunOutputPairs : JsonCreateOrUpdateRunOutput -> List EncodedField
encodeJsonCreateOrUpdateRunOutputPairs model =
    let
        pairs =
            [ encode "run_created" Json.Encode.bool model.runCreated
            , maybeEncode "indexing_result_id" Json.Encode.int model.indexingResultId
            , maybeEncode "error_message" Json.Encode.string model.errorMessage
            , maybeEncode "run_internal_id" Json.Encode.int model.runInternalId
            , encode "files" (Json.Encode.list encodeJsonRunFile) model.files
            ]
    in
    pairs


encodeJsonDataSet : JsonDataSet -> Json.Encode.Value
encodeJsonDataSet =
    encodeObject << encodeJsonDataSetPairs


encodeJsonDataSetWithTag : ( String, String ) -> JsonDataSet -> Json.Encode.Value
encodeJsonDataSetWithTag (tagField, tag) model =
    encodeObject (encodeJsonDataSetPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonDataSetPairs : JsonDataSet -> List EncodedField
encodeJsonDataSetPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "experiment_type_id" Json.Encode.int model.experimentTypeId
            , encode "beamtime_id" Json.Encode.int model.beamtimeId
            , encode "attributi" (Json.Encode.list encodeJsonAttributoValue) model.attributi
            ]
    in
    pairs


encodeJsonDataSetStatistics : JsonDataSetStatistics -> Json.Encode.Value
encodeJsonDataSetStatistics =
    encodeObject << encodeJsonDataSetStatisticsPairs


encodeJsonDataSetStatisticsWithTag : ( String, String ) -> JsonDataSetStatistics -> Json.Encode.Value
encodeJsonDataSetStatisticsWithTag (tagField, tag) model =
    encodeObject (encodeJsonDataSetStatisticsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonDataSetStatisticsPairs : JsonDataSetStatistics -> List EncodedField
encodeJsonDataSetStatisticsPairs model =
    let
        pairs =
            [ encode "data_set_id" Json.Encode.int model.dataSetId
            , encode "run_count" Json.Encode.int model.runCount
            , encode "merge_results_count" Json.Encode.int model.mergeResultsCount
            , encode "indexed_frames" Json.Encode.int model.indexedFrames
            , encode "merge_or_indexing_jobs_running" Json.Encode.bool model.mergeOrIndexingJobsRunning
            ]
    in
    pairs


encodeJsonDataSetWithFom : JsonDataSetWithFom -> Json.Encode.Value
encodeJsonDataSetWithFom =
    encodeObject << encodeJsonDataSetWithFomPairs


encodeJsonDataSetWithFomWithTag : ( String, String ) -> JsonDataSetWithFom -> Json.Encode.Value
encodeJsonDataSetWithFomWithTag (tagField, tag) model =
    encodeObject (encodeJsonDataSetWithFomPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonDataSetWithFomPairs : JsonDataSetWithFom -> List EncodedField
encodeJsonDataSetWithFomPairs model =
    let
        pairs =
            [ encode "data_set" encodeJsonDataSet model.dataSet
            , encode "fom" encodeJsonIndexingFom model.fom
            ]
    in
    pairs


encodeJsonDataSetWithIndexingResults : JsonDataSetWithIndexingResults -> Json.Encode.Value
encodeJsonDataSetWithIndexingResults =
    encodeObject << encodeJsonDataSetWithIndexingResultsPairs


encodeJsonDataSetWithIndexingResultsWithTag : ( String, String ) -> JsonDataSetWithIndexingResults -> Json.Encode.Value
encodeJsonDataSetWithIndexingResultsWithTag (tagField, tag) model =
    encodeObject (encodeJsonDataSetWithIndexingResultsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonDataSetWithIndexingResultsPairs : JsonDataSetWithIndexingResults -> List EncodedField
encodeJsonDataSetWithIndexingResultsPairs model =
    let
        pairs =
            [ encode "data_set" encodeJsonDataSet model.dataSet
            , encode "internal_run_ids" (Json.Encode.list Json.Encode.int) model.internalRunIds
            , encode "runs" (Json.Encode.list encodeJsonRunRange) model.runs
            , encode "point_group" Json.Encode.string model.pointGroup
            , encode "space_group" Json.Encode.string model.spaceGroup
            , encode "cell_description" Json.Encode.string model.cellDescription
            , encode "indexing_results" (Json.Encode.list encodeJsonIndexingParametersWithResults) model.indexingResults
            ]
    in
    pairs


encodeJsonDeleteAttributoInput : JsonDeleteAttributoInput -> Json.Encode.Value
encodeJsonDeleteAttributoInput =
    encodeObject << encodeJsonDeleteAttributoInputPairs


encodeJsonDeleteAttributoInputWithTag : ( String, String ) -> JsonDeleteAttributoInput -> Json.Encode.Value
encodeJsonDeleteAttributoInputWithTag (tagField, tag) model =
    encodeObject (encodeJsonDeleteAttributoInputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonDeleteAttributoInputPairs : JsonDeleteAttributoInput -> List EncodedField
encodeJsonDeleteAttributoInputPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            ]
    in
    pairs


encodeJsonDeleteAttributoOutput : JsonDeleteAttributoOutput -> Json.Encode.Value
encodeJsonDeleteAttributoOutput =
    encodeObject << encodeJsonDeleteAttributoOutputPairs


encodeJsonDeleteAttributoOutputWithTag : ( String, String ) -> JsonDeleteAttributoOutput -> Json.Encode.Value
encodeJsonDeleteAttributoOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonDeleteAttributoOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonDeleteAttributoOutputPairs : JsonDeleteAttributoOutput -> List EncodedField
encodeJsonDeleteAttributoOutputPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            ]
    in
    pairs


encodeJsonDeleteChemicalInput : JsonDeleteChemicalInput -> Json.Encode.Value
encodeJsonDeleteChemicalInput =
    encodeObject << encodeJsonDeleteChemicalInputPairs


encodeJsonDeleteChemicalInputWithTag : ( String, String ) -> JsonDeleteChemicalInput -> Json.Encode.Value
encodeJsonDeleteChemicalInputWithTag (tagField, tag) model =
    encodeObject (encodeJsonDeleteChemicalInputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonDeleteChemicalInputPairs : JsonDeleteChemicalInput -> List EncodedField
encodeJsonDeleteChemicalInputPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            ]
    in
    pairs


encodeJsonDeleteChemicalOutput : JsonDeleteChemicalOutput -> Json.Encode.Value
encodeJsonDeleteChemicalOutput =
    encodeObject << encodeJsonDeleteChemicalOutputPairs


encodeJsonDeleteChemicalOutputWithTag : ( String, String ) -> JsonDeleteChemicalOutput -> Json.Encode.Value
encodeJsonDeleteChemicalOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonDeleteChemicalOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonDeleteChemicalOutputPairs : JsonDeleteChemicalOutput -> List EncodedField
encodeJsonDeleteChemicalOutputPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            ]
    in
    pairs


encodeJsonDeleteDataSetInput : JsonDeleteDataSetInput -> Json.Encode.Value
encodeJsonDeleteDataSetInput =
    encodeObject << encodeJsonDeleteDataSetInputPairs


encodeJsonDeleteDataSetInputWithTag : ( String, String ) -> JsonDeleteDataSetInput -> Json.Encode.Value
encodeJsonDeleteDataSetInputWithTag (tagField, tag) model =
    encodeObject (encodeJsonDeleteDataSetInputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonDeleteDataSetInputPairs : JsonDeleteDataSetInput -> List EncodedField
encodeJsonDeleteDataSetInputPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            ]
    in
    pairs


encodeJsonDeleteDataSetOutput : JsonDeleteDataSetOutput -> Json.Encode.Value
encodeJsonDeleteDataSetOutput =
    encodeObject << encodeJsonDeleteDataSetOutputPairs


encodeJsonDeleteDataSetOutputWithTag : ( String, String ) -> JsonDeleteDataSetOutput -> Json.Encode.Value
encodeJsonDeleteDataSetOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonDeleteDataSetOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonDeleteDataSetOutputPairs : JsonDeleteDataSetOutput -> List EncodedField
encodeJsonDeleteDataSetOutputPairs model =
    let
        pairs =
            [ encode "result" Json.Encode.bool model.result
            ]
    in
    pairs


encodeJsonDeleteEventInput : JsonDeleteEventInput -> Json.Encode.Value
encodeJsonDeleteEventInput =
    encodeObject << encodeJsonDeleteEventInputPairs


encodeJsonDeleteEventInputWithTag : ( String, String ) -> JsonDeleteEventInput -> Json.Encode.Value
encodeJsonDeleteEventInputWithTag (tagField, tag) model =
    encodeObject (encodeJsonDeleteEventInputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonDeleteEventInputPairs : JsonDeleteEventInput -> List EncodedField
encodeJsonDeleteEventInputPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            ]
    in
    pairs


encodeJsonDeleteEventOutput : JsonDeleteEventOutput -> Json.Encode.Value
encodeJsonDeleteEventOutput =
    encodeObject << encodeJsonDeleteEventOutputPairs


encodeJsonDeleteEventOutputWithTag : ( String, String ) -> JsonDeleteEventOutput -> Json.Encode.Value
encodeJsonDeleteEventOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonDeleteEventOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonDeleteEventOutputPairs : JsonDeleteEventOutput -> List EncodedField
encodeJsonDeleteEventOutputPairs model =
    let
        pairs =
            [ encode "result" Json.Encode.bool model.result
            ]
    in
    pairs


encodeJsonDeleteExperimentType : JsonDeleteExperimentType -> Json.Encode.Value
encodeJsonDeleteExperimentType =
    encodeObject << encodeJsonDeleteExperimentTypePairs


encodeJsonDeleteExperimentTypeWithTag : ( String, String ) -> JsonDeleteExperimentType -> Json.Encode.Value
encodeJsonDeleteExperimentTypeWithTag (tagField, tag) model =
    encodeObject (encodeJsonDeleteExperimentTypePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonDeleteExperimentTypePairs : JsonDeleteExperimentType -> List EncodedField
encodeJsonDeleteExperimentTypePairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            ]
    in
    pairs


encodeJsonDeleteExperimentTypeOutput : JsonDeleteExperimentTypeOutput -> Json.Encode.Value
encodeJsonDeleteExperimentTypeOutput =
    encodeObject << encodeJsonDeleteExperimentTypeOutputPairs


encodeJsonDeleteExperimentTypeOutputWithTag : ( String, String ) -> JsonDeleteExperimentTypeOutput -> Json.Encode.Value
encodeJsonDeleteExperimentTypeOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonDeleteExperimentTypeOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonDeleteExperimentTypeOutputPairs : JsonDeleteExperimentTypeOutput -> List EncodedField
encodeJsonDeleteExperimentTypeOutputPairs model =
    let
        pairs =
            [ encode "result" Json.Encode.bool model.result
            ]
    in
    pairs


encodeJsonDeleteFileInput : JsonDeleteFileInput -> Json.Encode.Value
encodeJsonDeleteFileInput =
    encodeObject << encodeJsonDeleteFileInputPairs


encodeJsonDeleteFileInputWithTag : ( String, String ) -> JsonDeleteFileInput -> Json.Encode.Value
encodeJsonDeleteFileInputWithTag (tagField, tag) model =
    encodeObject (encodeJsonDeleteFileInputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonDeleteFileInputPairs : JsonDeleteFileInput -> List EncodedField
encodeJsonDeleteFileInputPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            ]
    in
    pairs


encodeJsonDeleteFileOutput : JsonDeleteFileOutput -> Json.Encode.Value
encodeJsonDeleteFileOutput =
    encodeObject << encodeJsonDeleteFileOutputPairs


encodeJsonDeleteFileOutputWithTag : ( String, String ) -> JsonDeleteFileOutput -> Json.Encode.Value
encodeJsonDeleteFileOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonDeleteFileOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonDeleteFileOutputPairs : JsonDeleteFileOutput -> List EncodedField
encodeJsonDeleteFileOutputPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            ]
    in
    pairs


encodeJsonDeleteRunOutput : JsonDeleteRunOutput -> Json.Encode.Value
encodeJsonDeleteRunOutput =
    encodeObject << encodeJsonDeleteRunOutputPairs


encodeJsonDeleteRunOutputWithTag : ( String, String ) -> JsonDeleteRunOutput -> Json.Encode.Value
encodeJsonDeleteRunOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonDeleteRunOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonDeleteRunOutputPairs : JsonDeleteRunOutput -> List EncodedField
encodeJsonDeleteRunOutputPairs model =
    let
        pairs =
            [ encode "result" Json.Encode.bool model.result
            ]
    in
    pairs


encodeJsonDetectorShift : JsonDetectorShift -> Json.Encode.Value
encodeJsonDetectorShift =
    encodeObject << encodeJsonDetectorShiftPairs


encodeJsonDetectorShiftWithTag : ( String, String ) -> JsonDetectorShift -> Json.Encode.Value
encodeJsonDetectorShiftWithTag (tagField, tag) model =
    encodeObject (encodeJsonDetectorShiftPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonDetectorShiftPairs : JsonDetectorShift -> List EncodedField
encodeJsonDetectorShiftPairs model =
    let
        pairs =
            [ encode "run_external_id" Json.Encode.int model.runExternalId
            , encode "run_start" Json.Encode.int model.runStart
            , maybeEncode "run_end" Json.Encode.int model.runEnd
            , encode "shift_x_mm" Json.Encode.float model.shiftXMm
            , encode "shift_y_mm" Json.Encode.float model.shiftYMm
            , encode "geometry_hash" Json.Encode.string model.geometryHash
            ]
    in
    pairs


encodeJsonEvent : JsonEvent -> Json.Encode.Value
encodeJsonEvent =
    encodeObject << encodeJsonEventPairs


encodeJsonEventWithTag : ( String, String ) -> JsonEvent -> Json.Encode.Value
encodeJsonEventWithTag (tagField, tag) model =
    encodeObject (encodeJsonEventPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonEventPairs : JsonEvent -> List EncodedField
encodeJsonEventPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "source" Json.Encode.string model.source
            , encode "text" Json.Encode.string model.text
            , encode "created" Json.Encode.int model.created
            , encode "level" Json.Encode.string model.level
            , encode "files" (Json.Encode.list encodeJsonFileOutput) model.files
            ]
    in
    pairs


encodeJsonEventInput : JsonEventInput -> Json.Encode.Value
encodeJsonEventInput =
    encodeObject << encodeJsonEventInputPairs


encodeJsonEventInputWithTag : ( String, String ) -> JsonEventInput -> Json.Encode.Value
encodeJsonEventInputWithTag (tagField, tag) model =
    encodeObject (encodeJsonEventInputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonEventInputPairs : JsonEventInput -> List EncodedField
encodeJsonEventInputPairs model =
    let
        pairs =
            [ encode "source" Json.Encode.string model.source
            , encode "text" Json.Encode.string model.text
            , encode "level" Json.Encode.string model.level
            , encode "file_ids" (Json.Encode.list Json.Encode.int) model.fileIds
            ]
    in
    pairs


encodeJsonEventTopLevelInput : JsonEventTopLevelInput -> Json.Encode.Value
encodeJsonEventTopLevelInput =
    encodeObject << encodeJsonEventTopLevelInputPairs


encodeJsonEventTopLevelInputWithTag : ( String, String ) -> JsonEventTopLevelInput -> Json.Encode.Value
encodeJsonEventTopLevelInputWithTag (tagField, tag) model =
    encodeObject (encodeJsonEventTopLevelInputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonEventTopLevelInputPairs : JsonEventTopLevelInput -> List EncodedField
encodeJsonEventTopLevelInputPairs model =
    let
        pairs =
            [ encode "beamtime_id" Json.Encode.int model.beamtimeId
            , encode "event" encodeJsonEventInput model.event
            , encode "with_live_stream" Json.Encode.bool model.withLiveStream
            ]
    in
    pairs


encodeJsonEventTopLevelOutput : JsonEventTopLevelOutput -> Json.Encode.Value
encodeJsonEventTopLevelOutput =
    encodeObject << encodeJsonEventTopLevelOutputPairs


encodeJsonEventTopLevelOutputWithTag : ( String, String ) -> JsonEventTopLevelOutput -> Json.Encode.Value
encodeJsonEventTopLevelOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonEventTopLevelOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonEventTopLevelOutputPairs : JsonEventTopLevelOutput -> List EncodedField
encodeJsonEventTopLevelOutputPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            ]
    in
    pairs


encodeJsonExperimentType : JsonExperimentType -> Json.Encode.Value
encodeJsonExperimentType =
    encodeObject << encodeJsonExperimentTypePairs


encodeJsonExperimentTypeWithTag : ( String, String ) -> JsonExperimentType -> Json.Encode.Value
encodeJsonExperimentTypeWithTag (tagField, tag) model =
    encodeObject (encodeJsonExperimentTypePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonExperimentTypePairs : JsonExperimentType -> List EncodedField
encodeJsonExperimentTypePairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "name" Json.Encode.string model.name
            , encode "attributi" (Json.Encode.list encodeJsonAttributiIdAndRole) model.attributi
            ]
    in
    pairs


encodeJsonExperimentTypeAndRuns : JsonExperimentTypeAndRuns -> Json.Encode.Value
encodeJsonExperimentTypeAndRuns =
    encodeObject << encodeJsonExperimentTypeAndRunsPairs


encodeJsonExperimentTypeAndRunsWithTag : ( String, String ) -> JsonExperimentTypeAndRuns -> Json.Encode.Value
encodeJsonExperimentTypeAndRunsWithTag (tagField, tag) model =
    encodeObject (encodeJsonExperimentTypeAndRunsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonExperimentTypeAndRunsPairs : JsonExperimentTypeAndRuns -> List EncodedField
encodeJsonExperimentTypeAndRunsPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "runs" (Json.Encode.list Json.Encode.string) model.runs
            , encode "number_of_runs" Json.Encode.int model.numberOfRuns
            ]
    in
    pairs


encodeJsonExperimentTypeWithBeamtimeInformation : JsonExperimentTypeWithBeamtimeInformation -> Json.Encode.Value
encodeJsonExperimentTypeWithBeamtimeInformation =
    encodeObject << encodeJsonExperimentTypeWithBeamtimeInformationPairs


encodeJsonExperimentTypeWithBeamtimeInformationWithTag : ( String, String ) -> JsonExperimentTypeWithBeamtimeInformation -> Json.Encode.Value
encodeJsonExperimentTypeWithBeamtimeInformationWithTag (tagField, tag) model =
    encodeObject (encodeJsonExperimentTypeWithBeamtimeInformationPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonExperimentTypeWithBeamtimeInformationPairs : JsonExperimentTypeWithBeamtimeInformation -> List EncodedField
encodeJsonExperimentTypeWithBeamtimeInformationPairs model =
    let
        pairs =
            [ encode "experiment_type" encodeJsonExperimentType model.experimentType
            , encode "beamtime" encodeJsonBeamtime model.beamtime
            ]
    in
    pairs


encodeJsonFileOutput : JsonFileOutput -> Json.Encode.Value
encodeJsonFileOutput =
    encodeObject << encodeJsonFileOutputPairs


encodeJsonFileOutputWithTag : ( String, String ) -> JsonFileOutput -> Json.Encode.Value
encodeJsonFileOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonFileOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonFileOutputPairs : JsonFileOutput -> List EncodedField
encodeJsonFileOutputPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "description" Json.Encode.string model.description
            , encode "type_" Json.Encode.string model.type__
            , maybeEncode "original_path" Json.Encode.string model.originalPath
            , encode "file_name" Json.Encode.string model.fileName
            , encode "size_in_bytes" Json.Encode.int model.sizeInBytes
            ]
    in
    pairs


encodeJsonImportFinishedIndexingJobInput : JsonImportFinishedIndexingJobInput -> Json.Encode.Value
encodeJsonImportFinishedIndexingJobInput =
    encodeObject << encodeJsonImportFinishedIndexingJobInputPairs


encodeJsonImportFinishedIndexingJobInputWithTag : ( String, String ) -> JsonImportFinishedIndexingJobInput -> Json.Encode.Value
encodeJsonImportFinishedIndexingJobInputWithTag (tagField, tag) model =
    encodeObject (encodeJsonImportFinishedIndexingJobInputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonImportFinishedIndexingJobInputPairs : JsonImportFinishedIndexingJobInput -> List EncodedField
encodeJsonImportFinishedIndexingJobInputPairs model =
    let
        pairs =
            [ encode "is_online" Json.Encode.bool model.isOnline
            , encode "cell_description" Json.Encode.string model.cellDescription
            , encode "command_line" Json.Encode.string model.commandLine
            , encode "source" Json.Encode.string model.source
            , encode "run_internal_id" Json.Encode.int model.runInternalId
            , encode "stream_file" Json.Encode.string model.streamFile
            , encode "program_version" Json.Encode.string model.programVersion
            , encode "frames" Json.Encode.int model.frames
            , encode "hits" Json.Encode.int model.hits
            , encode "indexed_frames" Json.Encode.int model.indexedFrames
            , maybeEncode "detector_shift_x_mm" Json.Encode.float model.detectorShiftXMm
            , maybeEncode "detector_shift_y_mm" Json.Encode.float model.detectorShiftYMm
            , encode "geometry_file" Json.Encode.string model.geometryFile
            , encode "geometry_hash" Json.Encode.string model.geometryHash
            , maybeEncode "generated_geometry_file" Json.Encode.string model.generatedGeometryFile
            , encode "job_log" Json.Encode.string model.jobLog
            ]
    in
    pairs


encodeJsonImportFinishedIndexingJobOutput : JsonImportFinishedIndexingJobOutput -> Json.Encode.Value
encodeJsonImportFinishedIndexingJobOutput =
    encodeObject << encodeJsonImportFinishedIndexingJobOutputPairs


encodeJsonImportFinishedIndexingJobOutputWithTag : ( String, String ) -> JsonImportFinishedIndexingJobOutput -> Json.Encode.Value
encodeJsonImportFinishedIndexingJobOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonImportFinishedIndexingJobOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonImportFinishedIndexingJobOutputPairs : JsonImportFinishedIndexingJobOutput -> List EncodedField
encodeJsonImportFinishedIndexingJobOutputPairs model =
    let
        pairs =
            [ encode "indexing_result_id" Json.Encode.int model.indexingResultId
            ]
    in
    pairs


encodeJsonIndexingFom : JsonIndexingFom -> Json.Encode.Value
encodeJsonIndexingFom =
    encodeObject << encodeJsonIndexingFomPairs


encodeJsonIndexingFomWithTag : ( String, String ) -> JsonIndexingFom -> Json.Encode.Value
encodeJsonIndexingFomWithTag (tagField, tag) model =
    encodeObject (encodeJsonIndexingFomPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonIndexingFomPairs : JsonIndexingFom -> List EncodedField
encodeJsonIndexingFomPairs model =
    let
        pairs =
            [ encode "hit_rate" Json.Encode.float model.hitRate
            , encode "indexing_rate" Json.Encode.float model.indexingRate
            , encode "indexed_frames" Json.Encode.int model.indexedFrames
            , maybeEncode "detector_shift_x_mm" Json.Encode.float model.detectorShiftXMm
            , maybeEncode "detector_shift_y_mm" Json.Encode.float model.detectorShiftYMm
            ]
    in
    pairs


encodeJsonIndexingJob : JsonIndexingJob -> Json.Encode.Value
encodeJsonIndexingJob =
    encodeObject << encodeJsonIndexingJobPairs


encodeJsonIndexingJobWithTag : ( String, String ) -> JsonIndexingJob -> Json.Encode.Value
encodeJsonIndexingJobWithTag (tagField, tag) model =
    encodeObject (encodeJsonIndexingJobPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonIndexingJobPairs : JsonIndexingJob -> List EncodedField
encodeJsonIndexingJobPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , maybeEncode "job_id" Json.Encode.int model.jobId
            , encode "job_status" encodeDBJobStatus model.jobStatus
            , maybeEncode "started" Json.Encode.int model.started
            , maybeEncode "stopped" Json.Encode.int model.stopped
            , encode "is_online" Json.Encode.bool model.isOnline
            , maybeEncode "stream_file" Json.Encode.string model.streamFile
            , encode "source" Json.Encode.string model.source
            , maybeEncode "cell_description" Json.Encode.string model.cellDescription
            , encode "geometry_file_input" Json.Encode.string model.geometryFileInput
            , encode "geometry_file_output" Json.Encode.string model.geometryFileOutput
            , encode "command_line" Json.Encode.string model.commandLine
            , encode "run_internal_id" Json.Encode.int model.runInternalId
            , encode "run_external_id" Json.Encode.int model.runExternalId
            , encode "beamtime" encodeJsonBeamtime model.beamtime
            , encode "input_file_globs" (Json.Encode.list Json.Encode.string) model.inputFileGlobs
            ]
    in
    pairs


encodeJsonIndexingJobUpdateOutput : JsonIndexingJobUpdateOutput -> Json.Encode.Value
encodeJsonIndexingJobUpdateOutput =
    encodeObject << encodeJsonIndexingJobUpdateOutputPairs


encodeJsonIndexingJobUpdateOutputWithTag : ( String, String ) -> JsonIndexingJobUpdateOutput -> Json.Encode.Value
encodeJsonIndexingJobUpdateOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonIndexingJobUpdateOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonIndexingJobUpdateOutputPairs : JsonIndexingJobUpdateOutput -> List EncodedField
encodeJsonIndexingJobUpdateOutputPairs model =
    let
        pairs =
            [ encode "result" Json.Encode.bool model.result
            ]
    in
    pairs


encodeJsonIndexingParameters : JsonIndexingParameters -> Json.Encode.Value
encodeJsonIndexingParameters =
    encodeObject << encodeJsonIndexingParametersPairs


encodeJsonIndexingParametersWithTag : ( String, String ) -> JsonIndexingParameters -> Json.Encode.Value
encodeJsonIndexingParametersWithTag (tagField, tag) model =
    encodeObject (encodeJsonIndexingParametersPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonIndexingParametersPairs : JsonIndexingParameters -> List EncodedField
encodeJsonIndexingParametersPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "cell_description" Json.Encode.string model.cellDescription
            , encode "is_online" Json.Encode.bool model.isOnline
            , encode "command_line" Json.Encode.string model.commandLine
            , encode "geometry_file" Json.Encode.string model.geometryFile
            ]
    in
    pairs


encodeJsonIndexingParametersWithResults : JsonIndexingParametersWithResults -> Json.Encode.Value
encodeJsonIndexingParametersWithResults =
    encodeObject << encodeJsonIndexingParametersWithResultsPairs


encodeJsonIndexingParametersWithResultsWithTag : ( String, String ) -> JsonIndexingParametersWithResults -> Json.Encode.Value
encodeJsonIndexingParametersWithResultsWithTag (tagField, tag) model =
    encodeObject (encodeJsonIndexingParametersWithResultsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonIndexingParametersWithResultsPairs : JsonIndexingParametersWithResults -> List EncodedField
encodeJsonIndexingParametersWithResultsPairs model =
    let
        pairs =
            [ encode "parameters" encodeJsonIndexingParameters model.parameters
            , encode "indexing_results" (Json.Encode.list encodeJsonIndexingResult) model.indexingResults
            , encode "merge_results" (Json.Encode.list encodeJsonMergeResult) model.mergeResults
            ]
    in
    pairs


encodeJsonIndexingResult : JsonIndexingResult -> Json.Encode.Value
encodeJsonIndexingResult =
    encodeObject << encodeJsonIndexingResultPairs


encodeJsonIndexingResultWithTag : ( String, String ) -> JsonIndexingResult -> Json.Encode.Value
encodeJsonIndexingResultWithTag (tagField, tag) model =
    encodeObject (encodeJsonIndexingResultPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonIndexingResultPairs : JsonIndexingResult -> List EncodedField
encodeJsonIndexingResultPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "created" Json.Encode.int model.created
            , maybeEncode "started" Json.Encode.int model.started
            , maybeEncode "stopped" Json.Encode.int model.stopped
            , encode "parameters" encodeJsonIndexingParameters model.parameters
            , encode "stream_file" Json.Encode.string model.streamFile
            , encode "program_version" Json.Encode.string model.programVersion
            , encode "run_internal_id" Json.Encode.int model.runInternalId
            , encode "run_external_id" Json.Encode.int model.runExternalId
            , encode "frames" Json.Encode.int model.frames
            , encode "hits" Json.Encode.int model.hits
            , encode "indexed_frames" Json.Encode.int model.indexedFrames
            , encode "indexed_crystals" Json.Encode.int model.indexedCrystals
            , encode "status" encodeDBJobStatus model.status
            , maybeEncode "detector_shift_x_mm" Json.Encode.float model.detectorShiftXMm
            , maybeEncode "detector_shift_y_mm" Json.Encode.float model.detectorShiftYMm
            , encode "geometry_file" Json.Encode.string model.geometryFile
            , encode "geometry_hash" Json.Encode.string model.geometryHash
            , encode "generated_geometry_file" Json.Encode.string model.generatedGeometryFile
            , maybeEncode "unit_cell_histograms_file_id" Json.Encode.int model.unitCellHistogramsFileId
            , encode "has_error" Json.Encode.bool model.hasError
            ]
    in
    pairs


encodeJsonIndexingResultFinishSuccessfully : JsonIndexingResultFinishSuccessfully -> Json.Encode.Value
encodeJsonIndexingResultFinishSuccessfully =
    encodeObject << encodeJsonIndexingResultFinishSuccessfullyPairs


encodeJsonIndexingResultFinishSuccessfullyWithTag : ( String, String ) -> JsonIndexingResultFinishSuccessfully -> Json.Encode.Value
encodeJsonIndexingResultFinishSuccessfullyWithTag (tagField, tag) model =
    encodeObject (encodeJsonIndexingResultFinishSuccessfullyPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonIndexingResultFinishSuccessfullyPairs : JsonIndexingResultFinishSuccessfully -> List EncodedField
encodeJsonIndexingResultFinishSuccessfullyPairs model =
    let
        pairs =
            [ encode "workload_manager_job_id" Json.Encode.int model.workloadManagerJobId
            , encode "stream_file" Json.Encode.string model.streamFile
            , encode "program_version" Json.Encode.string model.programVersion
            , encode "frames" Json.Encode.int model.frames
            , encode "hits" Json.Encode.int model.hits
            , encode "indexed_frames" Json.Encode.int model.indexedFrames
            , encode "indexed_crystals" Json.Encode.int model.indexedCrystals
            , maybeEncode "detector_shift_x_mm" Json.Encode.float model.detectorShiftXMm
            , maybeEncode "detector_shift_y_mm" Json.Encode.float model.detectorShiftYMm
            , encode "geometry_file" Json.Encode.string model.geometryFile
            , encode "geometry_hash" Json.Encode.string model.geometryHash
            , encode "generated_geometry_file" Json.Encode.string model.generatedGeometryFile
            , maybeEncode "unit_cell_histograms_id" Json.Encode.int model.unitCellHistogramsId
            , maybeEncode "latest_log" Json.Encode.string model.latestLog
            ]
    in
    pairs


encodeJsonIndexingResultFinishWithError : JsonIndexingResultFinishWithError -> Json.Encode.Value
encodeJsonIndexingResultFinishWithError =
    encodeObject << encodeJsonIndexingResultFinishWithErrorPairs


encodeJsonIndexingResultFinishWithErrorWithTag : ( String, String ) -> JsonIndexingResultFinishWithError -> Json.Encode.Value
encodeJsonIndexingResultFinishWithErrorWithTag (tagField, tag) model =
    encodeObject (encodeJsonIndexingResultFinishWithErrorPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonIndexingResultFinishWithErrorPairs : JsonIndexingResultFinishWithError -> List EncodedField
encodeJsonIndexingResultFinishWithErrorPairs model =
    let
        pairs =
            [ encode "error_message" Json.Encode.string model.errorMessage
            , encode "latest_log" Json.Encode.string model.latestLog
            , maybeEncode "workload_manager_job_id" Json.Encode.int model.workloadManagerJobId
            ]
    in
    pairs


encodeJsonIndexingResultStillRunning : JsonIndexingResultStillRunning -> Json.Encode.Value
encodeJsonIndexingResultStillRunning =
    encodeObject << encodeJsonIndexingResultStillRunningPairs


encodeJsonIndexingResultStillRunningWithTag : ( String, String ) -> JsonIndexingResultStillRunning -> Json.Encode.Value
encodeJsonIndexingResultStillRunningWithTag (tagField, tag) model =
    encodeObject (encodeJsonIndexingResultStillRunningPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonIndexingResultStillRunningPairs : JsonIndexingResultStillRunning -> List EncodedField
encodeJsonIndexingResultStillRunningPairs model =
    let
        pairs =
            [ encode "workload_manager_job_id" Json.Encode.int model.workloadManagerJobId
            , encode "stream_file" Json.Encode.string model.streamFile
            , encode "frames" Json.Encode.int model.frames
            , encode "hits" Json.Encode.int model.hits
            , encode "indexed_frames" Json.Encode.int model.indexedFrames
            , encode "indexed_crystals" Json.Encode.int model.indexedCrystals
            , maybeEncode "detector_shift_x_mm" Json.Encode.float model.detectorShiftXMm
            , maybeEncode "detector_shift_y_mm" Json.Encode.float model.detectorShiftYMm
            , encode "geometry_file" Json.Encode.string model.geometryFile
            , encode "geometry_hash" Json.Encode.string model.geometryHash
            , maybeEncode "job_started" Json.Encode.int model.jobStarted
            , maybeEncode "latest_log" Json.Encode.string model.latestLog
            ]
    in
    pairs


encodeJsonIndexingStatistic : JsonIndexingStatistic -> Json.Encode.Value
encodeJsonIndexingStatistic =
    encodeObject << encodeJsonIndexingStatisticPairs


encodeJsonIndexingStatisticWithTag : ( String, String ) -> JsonIndexingStatistic -> Json.Encode.Value
encodeJsonIndexingStatisticWithTag (tagField, tag) model =
    encodeObject (encodeJsonIndexingStatisticPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonIndexingStatisticPairs : JsonIndexingStatistic -> List EncodedField
encodeJsonIndexingStatisticPairs model =
    let
        pairs =
            [ encode "time" Json.Encode.int model.time
            , encode "frames" Json.Encode.int model.frames
            , encode "hits" Json.Encode.int model.hits
            , encode "indexed" Json.Encode.int model.indexed
            , encode "crystals" Json.Encode.int model.crystals
            ]
    in
    pairs


encodeJsonLiveStream : JsonLiveStream -> Json.Encode.Value
encodeJsonLiveStream =
    encodeObject << encodeJsonLiveStreamPairs


encodeJsonLiveStreamWithTag : ( String, String ) -> JsonLiveStream -> Json.Encode.Value
encodeJsonLiveStreamWithTag (tagField, tag) model =
    encodeObject (encodeJsonLiveStreamPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonLiveStreamPairs : JsonLiveStream -> List EncodedField
encodeJsonLiveStreamPairs model =
    let
        pairs =
            [ encode "file_id" Json.Encode.int model.fileId
            , encode "modified" Json.Encode.int model.modified
            ]
    in
    pairs


encodeJsonMergeJob : JsonMergeJob -> Json.Encode.Value
encodeJsonMergeJob =
    encodeObject << encodeJsonMergeJobPairs


encodeJsonMergeJobWithTag : ( String, String ) -> JsonMergeJob -> Json.Encode.Value
encodeJsonMergeJobWithTag (tagField, tag) model =
    encodeObject (encodeJsonMergeJobPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonMergeJobPairs : JsonMergeJob -> List EncodedField
encodeJsonMergeJobPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , maybeEncode "job_id" Json.Encode.int model.jobId
            , encode "job_status" encodeDBJobStatus model.jobStatus
            , encode "parameters" encodeJsonMergeParameters model.parameters
            , encode "indexing_results" (Json.Encode.list encodeJsonIndexingJob) model.indexingResults
            , encode "files_from_indexing" (Json.Encode.list encodeJsonFileOutput) model.filesFromIndexing
            , encode "point_group" Json.Encode.string model.pointGroup
            , encode "cell_description" Json.Encode.string model.cellDescription
            ]
    in
    pairs


encodeJsonMergeJobFinishOutput : JsonMergeJobFinishOutput -> Json.Encode.Value
encodeJsonMergeJobFinishOutput =
    encodeObject << encodeJsonMergeJobFinishOutputPairs


encodeJsonMergeJobFinishOutputWithTag : ( String, String ) -> JsonMergeJobFinishOutput -> Json.Encode.Value
encodeJsonMergeJobFinishOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonMergeJobFinishOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonMergeJobFinishOutputPairs : JsonMergeJobFinishOutput -> List EncodedField
encodeJsonMergeJobFinishOutputPairs model =
    let
        pairs =
            [ encode "result" Json.Encode.bool model.result
            ]
    in
    pairs


encodeJsonMergeJobFinishedInput : JsonMergeJobFinishedInput -> Json.Encode.Value
encodeJsonMergeJobFinishedInput =
    encodeObject << encodeJsonMergeJobFinishedInputPairs


encodeJsonMergeJobFinishedInputWithTag : ( String, String ) -> JsonMergeJobFinishedInput -> Json.Encode.Value
encodeJsonMergeJobFinishedInputWithTag (tagField, tag) model =
    encodeObject (encodeJsonMergeJobFinishedInputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonMergeJobFinishedInputPairs : JsonMergeJobFinishedInput -> List EncodedField
encodeJsonMergeJobFinishedInputPairs model =
    let
        pairs =
            [ maybeEncode "latest_log" Json.Encode.string model.latestLog
            , maybeEncode "error" Json.Encode.string model.error
            , maybeEncode "result" encodeJsonMergeResultInternal model.result
            ]
    in
    pairs


encodeJsonMergeJobStartedInput : JsonMergeJobStartedInput -> Json.Encode.Value
encodeJsonMergeJobStartedInput =
    encodeObject << encodeJsonMergeJobStartedInputPairs


encodeJsonMergeJobStartedInputWithTag : ( String, String ) -> JsonMergeJobStartedInput -> Json.Encode.Value
encodeJsonMergeJobStartedInputWithTag (tagField, tag) model =
    encodeObject (encodeJsonMergeJobStartedInputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonMergeJobStartedInputPairs : JsonMergeJobStartedInput -> List EncodedField
encodeJsonMergeJobStartedInputPairs model =
    let
        pairs =
            [ encode "job_id" Json.Encode.int model.jobId
            , encode "time" Json.Encode.int model.time
            ]
    in
    pairs


encodeJsonMergeJobStartedOutput : JsonMergeJobStartedOutput -> Json.Encode.Value
encodeJsonMergeJobStartedOutput =
    encodeObject << encodeJsonMergeJobStartedOutputPairs


encodeJsonMergeJobStartedOutputWithTag : ( String, String ) -> JsonMergeJobStartedOutput -> Json.Encode.Value
encodeJsonMergeJobStartedOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonMergeJobStartedOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonMergeJobStartedOutputPairs : JsonMergeJobStartedOutput -> List EncodedField
encodeJsonMergeJobStartedOutputPairs model =
    let
        pairs =
            [ encode "time" Json.Encode.int model.time
            ]
    in
    pairs


encodeJsonMergeParameters : JsonMergeParameters -> Json.Encode.Value
encodeJsonMergeParameters =
    encodeObject << encodeJsonMergeParametersPairs


encodeJsonMergeParametersWithTag : ( String, String ) -> JsonMergeParameters -> Json.Encode.Value
encodeJsonMergeParametersWithTag (tagField, tag) model =
    encodeObject (encodeJsonMergeParametersPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonMergeParametersPairs : JsonMergeParameters -> List EncodedField
encodeJsonMergeParametersPairs model =
    let
        pairs =
            [ encode "point_group" Json.Encode.string model.pointGroup
            , maybeEncode "space_group" Json.Encode.string model.spaceGroup
            , encode "cell_description" Json.Encode.string model.cellDescription
            , maybeEncode "negative_handling" encodeMergeNegativeHandling model.negativeHandling
            , encode "merge_model" encodeMergeModel model.mergeModel
            , encode "scale_intensities" encodeScaleIntensities model.scaleIntensities
            , encode "post_refinement" Json.Encode.bool model.postRefinement
            , encode "iterations" Json.Encode.int model.iterations
            , maybeEncode "polarisation" encodeJsonPolarisation model.polarisation
            , maybeEncode "start_after" Json.Encode.int model.startAfter
            , maybeEncode "stop_after" Json.Encode.int model.stopAfter
            , encode "rel_b" Json.Encode.float model.relB
            , encode "no_pr" Json.Encode.bool model.noPr
            , maybeEncode "force_bandwidth" Json.Encode.float model.forceBandwidth
            , maybeEncode "force_radius" Json.Encode.float model.forceRadius
            , maybeEncode "force_lambda" Json.Encode.float model.forceLambda
            , encode "no_delta_cc_half" Json.Encode.bool model.noDeltaCcHalf
            , maybeEncode "max_adu" Json.Encode.float model.maxAdu
            , encode "min_measurements" Json.Encode.int model.minMeasurements
            , encode "logs" Json.Encode.bool model.logs
            , maybeEncode "min_res" Json.Encode.float model.minRes
            , maybeEncode "push_res" Json.Encode.float model.pushRes
            , maybeEncode "w" Json.Encode.string model.w
            , encode "ambigator_command_line" Json.Encode.string model.ambigatorCommandLine
            ]
    in
    pairs


encodeJsonMergeResult : JsonMergeResult -> Json.Encode.Value
encodeJsonMergeResult =
    encodeObject << encodeJsonMergeResultPairs


encodeJsonMergeResultWithTag : ( String, String ) -> JsonMergeResult -> Json.Encode.Value
encodeJsonMergeResultWithTag (tagField, tag) model =
    encodeObject (encodeJsonMergeResultPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonMergeResultPairs : JsonMergeResult -> List EncodedField
encodeJsonMergeResultPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "created" Json.Encode.int model.created
            , encode "runs" (Json.Encode.list Json.Encode.string) model.runs
            , encode "indexing_result_ids" (Json.Encode.list Json.Encode.int) model.indexingResultIds
            , maybeEncode "state_queued" encodeJsonMergeResultStateQueued model.stateQueued
            , maybeEncode "state_error" encodeJsonMergeResultStateError model.stateError
            , maybeEncode "state_running" encodeJsonMergeResultStateRunning model.stateRunning
            , maybeEncode "state_done" encodeJsonMergeResultStateDone model.stateDone
            , encode "parameters" encodeJsonMergeParameters model.parameters
            , encode "refinement_results" (Json.Encode.list encodeJsonRefinementResult) model.refinementResults
            ]
    in
    pairs


encodeJsonMergeResultFom : JsonMergeResultFom -> Json.Encode.Value
encodeJsonMergeResultFom =
    encodeObject << encodeJsonMergeResultFomPairs


encodeJsonMergeResultFomWithTag : ( String, String ) -> JsonMergeResultFom -> Json.Encode.Value
encodeJsonMergeResultFomWithTag (tagField, tag) model =
    encodeObject (encodeJsonMergeResultFomPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonMergeResultFomPairs : JsonMergeResultFom -> List EncodedField
encodeJsonMergeResultFomPairs model =
    let
        pairs =
            [ encode "snr" Json.Encode.float model.snr
            , maybeEncode "wilson" Json.Encode.float model.wilson
            , maybeEncode "ln_k" Json.Encode.float model.lnK
            , encode "discarded_reflections" Json.Encode.int model.discardedReflections
            , encode "one_over_d_from" Json.Encode.float model.oneOverDFrom
            , encode "one_over_d_to" Json.Encode.float model.oneOverDTo
            , encode "redundancy" Json.Encode.float model.redundancy
            , encode "completeness" Json.Encode.float model.completeness
            , encode "measurements_total" Json.Encode.int model.measurementsTotal
            , encode "reflections_total" Json.Encode.int model.reflectionsTotal
            , encode "reflections_possible" Json.Encode.int model.reflectionsPossible
            , encode "r_split" Json.Encode.float model.rSplit
            , encode "r1i" Json.Encode.float model.r1i
            , encode "r2" Json.Encode.float model.r2
            , encode "cc" Json.Encode.float model.cc
            , encode "ccstar" Json.Encode.float model.ccstar
            , maybeEncode "ccano" Json.Encode.float model.ccano
            , maybeEncode "crdano" Json.Encode.float model.crdano
            , maybeEncode "rano" Json.Encode.float model.rano
            , maybeEncode "rano_over_r_split" Json.Encode.float model.ranoOverRSplit
            , encode "d1sig" Json.Encode.float model.d1sig
            , encode "d2sig" Json.Encode.float model.d2sig
            , encode "outer_shell" encodeJsonMergeResultOuterShell model.outerShell
            ]
    in
    pairs


encodeJsonMergeResultInternal : JsonMergeResultInternal -> Json.Encode.Value
encodeJsonMergeResultInternal =
    encodeObject << encodeJsonMergeResultInternalPairs


encodeJsonMergeResultInternalWithTag : ( String, String ) -> JsonMergeResultInternal -> Json.Encode.Value
encodeJsonMergeResultInternalWithTag (tagField, tag) model =
    encodeObject (encodeJsonMergeResultInternalPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonMergeResultInternalPairs : JsonMergeResultInternal -> List EncodedField
encodeJsonMergeResultInternalPairs model =
    let
        pairs =
            [ encode "mtz_file_id" Json.Encode.int model.mtzFileId
            , encode "fom" encodeJsonMergeResultFom model.fom
            , maybeEncode "ambigator_fg_graph_file_id" Json.Encode.int model.ambigatorFgGraphFileId
            , encode "detailed_foms" (Json.Encode.list encodeJsonMergeResultShell) model.detailedFoms
            , encode "refinement_results" (Json.Encode.list encodeJsonRefinementResultInternal) model.refinementResults
            ]
    in
    pairs


encodeJsonMergeResultOuterShell : JsonMergeResultOuterShell -> Json.Encode.Value
encodeJsonMergeResultOuterShell =
    encodeObject << encodeJsonMergeResultOuterShellPairs


encodeJsonMergeResultOuterShellWithTag : ( String, String ) -> JsonMergeResultOuterShell -> Json.Encode.Value
encodeJsonMergeResultOuterShellWithTag (tagField, tag) model =
    encodeObject (encodeJsonMergeResultOuterShellPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonMergeResultOuterShellPairs : JsonMergeResultOuterShell -> List EncodedField
encodeJsonMergeResultOuterShellPairs model =
    let
        pairs =
            [ encode "resolution" Json.Encode.float model.resolution
            , encode "ccstar" Json.Encode.float model.ccstar
            , encode "r_split" Json.Encode.float model.rSplit
            , encode "cc" Json.Encode.float model.cc
            , encode "unique_reflections" Json.Encode.int model.uniqueReflections
            , encode "completeness" Json.Encode.float model.completeness
            , encode "redundancy" Json.Encode.float model.redundancy
            , encode "snr" Json.Encode.float model.snr
            , encode "min_res" Json.Encode.float model.minRes
            , encode "max_res" Json.Encode.float model.maxRes
            ]
    in
    pairs


encodeJsonMergeResultShell : JsonMergeResultShell -> Json.Encode.Value
encodeJsonMergeResultShell =
    encodeObject << encodeJsonMergeResultShellPairs


encodeJsonMergeResultShellWithTag : ( String, String ) -> JsonMergeResultShell -> Json.Encode.Value
encodeJsonMergeResultShellWithTag (tagField, tag) model =
    encodeObject (encodeJsonMergeResultShellPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonMergeResultShellPairs : JsonMergeResultShell -> List EncodedField
encodeJsonMergeResultShellPairs model =
    let
        pairs =
            [ encode "one_over_d_centre" Json.Encode.float model.oneOverDCentre
            , encode "nref" Json.Encode.int model.nref
            , encode "d_over_a" Json.Encode.float model.dOverA
            , encode "min_res" Json.Encode.float model.minRes
            , encode "max_res" Json.Encode.float model.maxRes
            , encode "cc" Json.Encode.float model.cc
            , encode "ccstar" Json.Encode.float model.ccstar
            , encode "r_split" Json.Encode.float model.rSplit
            , encode "reflections_possible" Json.Encode.int model.reflectionsPossible
            , encode "completeness" Json.Encode.float model.completeness
            , encode "measurements" Json.Encode.int model.measurements
            , encode "redundancy" Json.Encode.float model.redundancy
            , encode "snr" Json.Encode.float model.snr
            , encode "mean_i" Json.Encode.float model.meanI
            ]
    in
    pairs


encodeJsonMergeResultStateDone : JsonMergeResultStateDone -> Json.Encode.Value
encodeJsonMergeResultStateDone =
    encodeObject << encodeJsonMergeResultStateDonePairs


encodeJsonMergeResultStateDoneWithTag : ( String, String ) -> JsonMergeResultStateDone -> Json.Encode.Value
encodeJsonMergeResultStateDoneWithTag (tagField, tag) model =
    encodeObject (encodeJsonMergeResultStateDonePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonMergeResultStateDonePairs : JsonMergeResultStateDone -> List EncodedField
encodeJsonMergeResultStateDonePairs model =
    let
        pairs =
            [ encode "started" Json.Encode.int model.started
            , encode "stopped" Json.Encode.int model.stopped
            , encode "result" encodeJsonMergeResultInternal model.result
            ]
    in
    pairs


encodeJsonMergeResultStateError : JsonMergeResultStateError -> Json.Encode.Value
encodeJsonMergeResultStateError =
    encodeObject << encodeJsonMergeResultStateErrorPairs


encodeJsonMergeResultStateErrorWithTag : ( String, String ) -> JsonMergeResultStateError -> Json.Encode.Value
encodeJsonMergeResultStateErrorWithTag (tagField, tag) model =
    encodeObject (encodeJsonMergeResultStateErrorPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonMergeResultStateErrorPairs : JsonMergeResultStateError -> List EncodedField
encodeJsonMergeResultStateErrorPairs model =
    let
        pairs =
            [ encode "started" Json.Encode.int model.started
            , encode "stopped" Json.Encode.int model.stopped
            , encode "error" Json.Encode.string model.error
            , encode "latest_log" Json.Encode.string model.latestLog
            ]
    in
    pairs


encodeJsonMergeResultStateQueued : JsonMergeResultStateQueued -> Json.Encode.Value
encodeJsonMergeResultStateQueued =
    encodeObject << encodeJsonMergeResultStateQueuedPairs


encodeJsonMergeResultStateQueuedWithTag : ( String, String ) -> JsonMergeResultStateQueued -> Json.Encode.Value
encodeJsonMergeResultStateQueuedWithTag (tagField, tag) model =
    encodeObject (encodeJsonMergeResultStateQueuedPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonMergeResultStateQueuedPairs : JsonMergeResultStateQueued -> List EncodedField
encodeJsonMergeResultStateQueuedPairs model =
    let
        pairs =
            [ encode "queued" Json.Encode.bool model.queued
            ]
    in
    pairs


encodeJsonMergeResultStateRunning : JsonMergeResultStateRunning -> Json.Encode.Value
encodeJsonMergeResultStateRunning =
    encodeObject << encodeJsonMergeResultStateRunningPairs


encodeJsonMergeResultStateRunningWithTag : ( String, String ) -> JsonMergeResultStateRunning -> Json.Encode.Value
encodeJsonMergeResultStateRunningWithTag (tagField, tag) model =
    encodeObject (encodeJsonMergeResultStateRunningPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonMergeResultStateRunningPairs : JsonMergeResultStateRunning -> List EncodedField
encodeJsonMergeResultStateRunningPairs model =
    let
        pairs =
            [ encode "started" Json.Encode.int model.started
            , encode "job_id" Json.Encode.int model.jobId
            , encode "latest_log" Json.Encode.string model.latestLog
            ]
    in
    pairs


stringFromJsonMergeStatus : JsonMergeStatus -> String
stringFromJsonMergeStatus model =
    case model of
        JsonMergeStatusBoth ->
            "both"

        JsonMergeStatusUnmerged ->
            "unmerged"

        JsonMergeStatusMerged ->
            "merged"


encodeJsonMergeStatus : JsonMergeStatus -> Json.Encode.Value
encodeJsonMergeStatus =
    Json.Encode.string << stringFromJsonMergeStatus


encodeJsonPolarisation : JsonPolarisation -> Json.Encode.Value
encodeJsonPolarisation =
    encodeObject << encodeJsonPolarisationPairs


encodeJsonPolarisationWithTag : ( String, String ) -> JsonPolarisation -> Json.Encode.Value
encodeJsonPolarisationWithTag (tagField, tag) model =
    encodeObject (encodeJsonPolarisationPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonPolarisationPairs : JsonPolarisation -> List EncodedField
encodeJsonPolarisationPairs model =
    let
        pairs =
            [ encode "angle" Json.Encode.int model.angle
            , encode "percent" Json.Encode.int model.percent
            ]
    in
    pairs


encodeJsonQueueMergeJobInput : JsonQueueMergeJobInput -> Json.Encode.Value
encodeJsonQueueMergeJobInput =
    encodeObject << encodeJsonQueueMergeJobInputPairs


encodeJsonQueueMergeJobInputWithTag : ( String, String ) -> JsonQueueMergeJobInput -> Json.Encode.Value
encodeJsonQueueMergeJobInputWithTag (tagField, tag) model =
    encodeObject (encodeJsonQueueMergeJobInputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonQueueMergeJobInputPairs : JsonQueueMergeJobInput -> List EncodedField
encodeJsonQueueMergeJobInputPairs model =
    let
        pairs =
            [ encode "strict_mode" Json.Encode.bool model.strictMode
            , encode "indexing_parameters_id" Json.Encode.int model.indexingParametersId
            , encode "data_set_id" Json.Encode.int model.dataSetId
            , encode "merge_parameters" encodeJsonMergeParameters model.mergeParameters
            ]
    in
    pairs


encodeJsonQueueMergeJobOutput : JsonQueueMergeJobOutput -> Json.Encode.Value
encodeJsonQueueMergeJobOutput =
    encodeObject << encodeJsonQueueMergeJobOutputPairs


encodeJsonQueueMergeJobOutputWithTag : ( String, String ) -> JsonQueueMergeJobOutput -> Json.Encode.Value
encodeJsonQueueMergeJobOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonQueueMergeJobOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonQueueMergeJobOutputPairs : JsonQueueMergeJobOutput -> List EncodedField
encodeJsonQueueMergeJobOutputPairs model =
    let
        pairs =
            [ encode "merge_result_id" Json.Encode.int model.mergeResultId
            ]
    in
    pairs


encodeJsonReadAllChemicals : JsonReadAllChemicals -> Json.Encode.Value
encodeJsonReadAllChemicals =
    encodeObject << encodeJsonReadAllChemicalsPairs


encodeJsonReadAllChemicalsWithTag : ( String, String ) -> JsonReadAllChemicals -> Json.Encode.Value
encodeJsonReadAllChemicalsWithTag (tagField, tag) model =
    encodeObject (encodeJsonReadAllChemicalsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonReadAllChemicalsPairs : JsonReadAllChemicals -> List EncodedField
encodeJsonReadAllChemicalsPairs model =
    let
        pairs =
            [ encode "chemicals" (Json.Encode.list encodeJsonChemical) model.chemicals
            , encode "beamtimes" (Json.Encode.list encodeJsonBeamtime) model.beamtimes
            , encode "attributi_names" (Json.Encode.list encodeJsonAttributoWithName) model.attributiNames
            ]
    in
    pairs


encodeJsonReadAttributi : JsonReadAttributi -> Json.Encode.Value
encodeJsonReadAttributi =
    encodeObject << encodeJsonReadAttributiPairs


encodeJsonReadAttributiWithTag : ( String, String ) -> JsonReadAttributi -> Json.Encode.Value
encodeJsonReadAttributiWithTag (tagField, tag) model =
    encodeObject (encodeJsonReadAttributiPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonReadAttributiPairs : JsonReadAttributi -> List EncodedField
encodeJsonReadAttributiPairs model =
    let
        pairs =
            [ encode "attributi" (Json.Encode.list encodeJsonAttributo) model.attributi
            ]
    in
    pairs


encodeJsonReadBeamtime : JsonReadBeamtime -> Json.Encode.Value
encodeJsonReadBeamtime =
    encodeObject << encodeJsonReadBeamtimePairs


encodeJsonReadBeamtimeWithTag : ( String, String ) -> JsonReadBeamtime -> Json.Encode.Value
encodeJsonReadBeamtimeWithTag (tagField, tag) model =
    encodeObject (encodeJsonReadBeamtimePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonReadBeamtimePairs : JsonReadBeamtime -> List EncodedField
encodeJsonReadBeamtimePairs model =
    let
        pairs =
            [ encode "beamtimes" (Json.Encode.list encodeJsonBeamtime) model.beamtimes
            ]
    in
    pairs


encodeJsonReadBeamtimeGeometryDetails : JsonReadBeamtimeGeometryDetails -> Json.Encode.Value
encodeJsonReadBeamtimeGeometryDetails =
    encodeObject << encodeJsonReadBeamtimeGeometryDetailsPairs


encodeJsonReadBeamtimeGeometryDetailsWithTag : ( String, String ) -> JsonReadBeamtimeGeometryDetails -> Json.Encode.Value
encodeJsonReadBeamtimeGeometryDetailsWithTag (tagField, tag) model =
    encodeObject (encodeJsonReadBeamtimeGeometryDetailsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonReadBeamtimeGeometryDetailsPairs : JsonReadBeamtimeGeometryDetails -> List EncodedField
encodeJsonReadBeamtimeGeometryDetailsPairs model =
    let
        pairs =
            [ encode "detector_shifts" (Json.Encode.list encodeJsonDetectorShift) model.detectorShifts
            ]
    in
    pairs


encodeJsonReadChemicals : JsonReadChemicals -> Json.Encode.Value
encodeJsonReadChemicals =
    encodeObject << encodeJsonReadChemicalsPairs


encodeJsonReadChemicalsWithTag : ( String, String ) -> JsonReadChemicals -> Json.Encode.Value
encodeJsonReadChemicalsWithTag (tagField, tag) model =
    encodeObject (encodeJsonReadChemicalsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonReadChemicalsPairs : JsonReadChemicals -> List EncodedField
encodeJsonReadChemicalsPairs model =
    let
        pairs =
            [ encode "chemicals" (Json.Encode.list encodeJsonChemical) model.chemicals
            , encode "attributi" (Json.Encode.list encodeJsonAttributo) model.attributi
            ]
    in
    pairs


encodeJsonReadDataSets : JsonReadDataSets -> Json.Encode.Value
encodeJsonReadDataSets =
    encodeObject << encodeJsonReadDataSetsPairs


encodeJsonReadDataSetsWithTag : ( String, String ) -> JsonReadDataSets -> Json.Encode.Value
encodeJsonReadDataSetsWithTag (tagField, tag) model =
    encodeObject (encodeJsonReadDataSetsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonReadDataSetsPairs : JsonReadDataSets -> List EncodedField
encodeJsonReadDataSetsPairs model =
    let
        pairs =
            [ encode "data_sets" (Json.Encode.list encodeJsonDataSet) model.dataSets
            , encode "chemicals" (Json.Encode.list encodeJsonChemical) model.chemicals
            , encode "attributi" (Json.Encode.list encodeJsonAttributo) model.attributi
            , encode "experiment_types" (Json.Encode.list encodeJsonExperimentType) model.experimentTypes
            ]
    in
    pairs


encodeJsonReadEvents : JsonReadEvents -> Json.Encode.Value
encodeJsonReadEvents =
    encodeObject << encodeJsonReadEventsPairs


encodeJsonReadEventsWithTag : ( String, String ) -> JsonReadEvents -> Json.Encode.Value
encodeJsonReadEventsWithTag (tagField, tag) model =
    encodeObject (encodeJsonReadEventsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonReadEventsPairs : JsonReadEvents -> List EncodedField
encodeJsonReadEventsPairs model =
    let
        pairs =
            [ encode "events" (Json.Encode.list encodeJsonEvent) model.events
            , encode "filter_dates" (Json.Encode.list Json.Encode.string) model.filterDates
            ]
    in
    pairs


encodeJsonReadExperimentTypes : JsonReadExperimentTypes -> Json.Encode.Value
encodeJsonReadExperimentTypes =
    encodeObject << encodeJsonReadExperimentTypesPairs


encodeJsonReadExperimentTypesWithTag : ( String, String ) -> JsonReadExperimentTypes -> Json.Encode.Value
encodeJsonReadExperimentTypesWithTag (tagField, tag) model =
    encodeObject (encodeJsonReadExperimentTypesPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonReadExperimentTypesPairs : JsonReadExperimentTypes -> List EncodedField
encodeJsonReadExperimentTypesPairs model =
    let
        pairs =
            [ encode "experiment_types" (Json.Encode.list encodeJsonExperimentType) model.experimentTypes
            , encode "attributi" (Json.Encode.list encodeJsonAttributo) model.attributi
            , encode "experiment_type_id_to_run" (Json.Encode.list encodeJsonExperimentTypeAndRuns) model.experimentTypeIdToRun
            , maybeEncode "current_experiment_type_id" Json.Encode.int model.currentExperimentTypeId
            ]
    in
    pairs


encodeJsonReadIndexingParametersOutput : JsonReadIndexingParametersOutput -> Json.Encode.Value
encodeJsonReadIndexingParametersOutput =
    encodeObject << encodeJsonReadIndexingParametersOutputPairs


encodeJsonReadIndexingParametersOutputWithTag : ( String, String ) -> JsonReadIndexingParametersOutput -> Json.Encode.Value
encodeJsonReadIndexingParametersOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonReadIndexingParametersOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonReadIndexingParametersOutputPairs : JsonReadIndexingParametersOutput -> List EncodedField
encodeJsonReadIndexingParametersOutputPairs model =
    let
        pairs =
            [ encode "data_set_id" Json.Encode.int model.dataSetId
            , encode "cell_description" Json.Encode.string model.cellDescription
            , encode "sources" (Json.Encode.list Json.Encode.string) model.sources
            ]
    in
    pairs


encodeJsonReadIndexingResultsOutput : JsonReadIndexingResultsOutput -> Json.Encode.Value
encodeJsonReadIndexingResultsOutput =
    encodeObject << encodeJsonReadIndexingResultsOutputPairs


encodeJsonReadIndexingResultsOutputWithTag : ( String, String ) -> JsonReadIndexingResultsOutput -> Json.Encode.Value
encodeJsonReadIndexingResultsOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonReadIndexingResultsOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonReadIndexingResultsOutputPairs : JsonReadIndexingResultsOutput -> List EncodedField
encodeJsonReadIndexingResultsOutputPairs model =
    let
        pairs =
            [ encode "indexing_jobs" (Json.Encode.list encodeJsonIndexingJob) model.indexingJobs
            ]
    in
    pairs


encodeJsonReadMergeResultsOutput : JsonReadMergeResultsOutput -> Json.Encode.Value
encodeJsonReadMergeResultsOutput =
    encodeObject << encodeJsonReadMergeResultsOutputPairs


encodeJsonReadMergeResultsOutputWithTag : ( String, String ) -> JsonReadMergeResultsOutput -> Json.Encode.Value
encodeJsonReadMergeResultsOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonReadMergeResultsOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonReadMergeResultsOutputPairs : JsonReadMergeResultsOutput -> List EncodedField
encodeJsonReadMergeResultsOutputPairs model =
    let
        pairs =
            [ encode "merge_jobs" (Json.Encode.list encodeJsonMergeJob) model.mergeJobs
            ]
    in
    pairs


encodeJsonReadNewAnalysisInput : JsonReadNewAnalysisInput -> Json.Encode.Value
encodeJsonReadNewAnalysisInput =
    encodeObject << encodeJsonReadNewAnalysisInputPairs


encodeJsonReadNewAnalysisInputWithTag : ( String, String ) -> JsonReadNewAnalysisInput -> Json.Encode.Value
encodeJsonReadNewAnalysisInputWithTag (tagField, tag) model =
    encodeObject (encodeJsonReadNewAnalysisInputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonReadNewAnalysisInputPairs : JsonReadNewAnalysisInput -> List EncodedField
encodeJsonReadNewAnalysisInputPairs model =
    let
        pairs =
            [ encode "attributi_filter" (Json.Encode.list encodeJsonAttributoValue) model.attributiFilter
            , maybeEncode "beamtime_id" Json.Encode.int model.beamtimeId
            , encode "merge_status" encodeJsonMergeStatus model.mergeStatus
            ]
    in
    pairs


encodeJsonReadNewAnalysisOutput : JsonReadNewAnalysisOutput -> Json.Encode.Value
encodeJsonReadNewAnalysisOutput =
    encodeObject << encodeJsonReadNewAnalysisOutputPairs


encodeJsonReadNewAnalysisOutputWithTag : ( String, String ) -> JsonReadNewAnalysisOutput -> Json.Encode.Value
encodeJsonReadNewAnalysisOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonReadNewAnalysisOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonReadNewAnalysisOutputPairs : JsonReadNewAnalysisOutput -> List EncodedField
encodeJsonReadNewAnalysisOutputPairs model =
    let
        pairs =
            [ encode "searchable_attributi" (Json.Encode.list encodeJsonAttributo) model.searchableAttributi
            , encode "attributi" (Json.Encode.list encodeJsonAttributo) model.attributi
            , encode "chemical_id_to_name" (Json.Encode.list encodeJsonChemicalIdAndName) model.chemicalIdToName
            , encode "experiment_types" (Json.Encode.list encodeJsonExperimentTypeWithBeamtimeInformation) model.experimentTypes
            , encode "filtered_data_sets" (Json.Encode.list encodeJsonDataSet) model.filteredDataSets
            , encode "data_set_statistics" (Json.Encode.list encodeJsonDataSetStatistics) model.dataSetStatistics
            , encode "attributi_values" (Json.Encode.list encodeJsonAttributoValue) model.attributiValues
            ]
    in
    pairs


encodeJsonReadRunAnalysis : JsonReadRunAnalysis -> Json.Encode.Value
encodeJsonReadRunAnalysis =
    encodeObject << encodeJsonReadRunAnalysisPairs


encodeJsonReadRunAnalysisWithTag : ( String, String ) -> JsonReadRunAnalysis -> Json.Encode.Value
encodeJsonReadRunAnalysisWithTag (tagField, tag) model =
    encodeObject (encodeJsonReadRunAnalysisPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonReadRunAnalysisPairs : JsonReadRunAnalysis -> List EncodedField
encodeJsonReadRunAnalysisPairs model =
    let
        pairs =
            [ encode "chemicals" (Json.Encode.list encodeJsonChemical) model.chemicals
            , encode "attributi" (Json.Encode.list encodeJsonAttributo) model.attributi
            , maybeEncode "run" encodeJsonAnalysisRun model.run
            , encode "run_ids" (Json.Encode.list encodeJsonRunId) model.runIds
            , encode "indexing_results" (Json.Encode.list encodeJsonRunAnalysisIndexingResult) model.indexingResults
            ]
    in
    pairs


encodeJsonReadRuns : JsonReadRuns -> Json.Encode.Value
encodeJsonReadRuns =
    encodeObject << encodeJsonReadRunsPairs


encodeJsonReadRunsWithTag : ( String, String ) -> JsonReadRuns -> Json.Encode.Value
encodeJsonReadRunsWithTag (tagField, tag) model =
    encodeObject (encodeJsonReadRunsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonReadRunsPairs : JsonReadRuns -> List EncodedField
encodeJsonReadRunsPairs model =
    let
        pairs =
            [ encode "filter_dates" (Json.Encode.list Json.Encode.string) model.filterDates
            , encode "runs" (Json.Encode.list encodeJsonRun) model.runs
            , encode "attributi" (Json.Encode.list encodeJsonAttributo) model.attributi
            , encode "experiment_types" (Json.Encode.list encodeJsonExperimentType) model.experimentTypes
            , encode "events" (Json.Encode.list encodeJsonEvent) model.events
            , encode "chemicals" (Json.Encode.list encodeJsonChemical) model.chemicals
            ]
    in
    pairs


encodeJsonReadRunsBulkInput : JsonReadRunsBulkInput -> Json.Encode.Value
encodeJsonReadRunsBulkInput =
    encodeObject << encodeJsonReadRunsBulkInputPairs


encodeJsonReadRunsBulkInputWithTag : ( String, String ) -> JsonReadRunsBulkInput -> Json.Encode.Value
encodeJsonReadRunsBulkInputWithTag (tagField, tag) model =
    encodeObject (encodeJsonReadRunsBulkInputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonReadRunsBulkInputPairs : JsonReadRunsBulkInput -> List EncodedField
encodeJsonReadRunsBulkInputPairs model =
    let
        pairs =
            [ encode "beamtime_id" Json.Encode.int model.beamtimeId
            , encode "external_run_ids" (Json.Encode.list Json.Encode.int) model.externalRunIds
            ]
    in
    pairs


encodeJsonReadRunsBulkOutput : JsonReadRunsBulkOutput -> Json.Encode.Value
encodeJsonReadRunsBulkOutput =
    encodeObject << encodeJsonReadRunsBulkOutputPairs


encodeJsonReadRunsBulkOutputWithTag : ( String, String ) -> JsonReadRunsBulkOutput -> Json.Encode.Value
encodeJsonReadRunsBulkOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonReadRunsBulkOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonReadRunsBulkOutputPairs : JsonReadRunsBulkOutput -> List EncodedField
encodeJsonReadRunsBulkOutputPairs model =
    let
        pairs =
            [ encode "chemicals" (Json.Encode.list encodeJsonChemical) model.chemicals
            , encode "attributi" (Json.Encode.list encodeJsonAttributo) model.attributi
            , encode "attributi_values" (Json.Encode.list encodeJsonAttributoBulkValue) model.attributiValues
            , encode "experiment_types" (Json.Encode.list encodeJsonExperimentType) model.experimentTypes
            , encode "experiment_type_ids" (Json.Encode.list Json.Encode.int) model.experimentTypeIds
            ]
    in
    pairs


encodeJsonReadRunsOverview : JsonReadRunsOverview -> Json.Encode.Value
encodeJsonReadRunsOverview =
    encodeObject << encodeJsonReadRunsOverviewPairs


encodeJsonReadRunsOverviewWithTag : ( String, String ) -> JsonReadRunsOverview -> Json.Encode.Value
encodeJsonReadRunsOverviewWithTag (tagField, tag) model =
    encodeObject (encodeJsonReadRunsOverviewPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonReadRunsOverviewPairs : JsonReadRunsOverview -> List EncodedField
encodeJsonReadRunsOverviewPairs model =
    let
        pairs =
            [ maybeEncode "live_stream" encodeJsonLiveStream model.liveStream
            , encode "attributi" (Json.Encode.list encodeJsonAttributo) model.attributi
            , maybeEncode "latest_indexing_result" encodeJsonRunAnalysisIndexingResult model.latestIndexingResult
            , maybeEncode "latest_run" encodeJsonRun model.latestRun
            , maybeEncode "foms_for_this_data_set" encodeJsonDataSetWithFom model.fomsForThisDataSet
            , encode "experiment_types" (Json.Encode.list encodeJsonExperimentType) model.experimentTypes
            , encode "events" (Json.Encode.list encodeJsonEvent) model.events
            , encode "chemicals" (Json.Encode.list encodeJsonChemical) model.chemicals
            , encode "user_config" encodeJsonUserConfig model.userConfig
            , maybeEncode "current_beamtime_user" Json.Encode.string model.currentBeamtimeUser
            ]
    in
    pairs


encodeJsonReadSingleDataSetResults : JsonReadSingleDataSetResults -> Json.Encode.Value
encodeJsonReadSingleDataSetResults =
    encodeObject << encodeJsonReadSingleDataSetResultsPairs


encodeJsonReadSingleDataSetResultsWithTag : ( String, String ) -> JsonReadSingleDataSetResults -> Json.Encode.Value
encodeJsonReadSingleDataSetResultsWithTag (tagField, tag) model =
    encodeObject (encodeJsonReadSingleDataSetResultsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonReadSingleDataSetResultsPairs : JsonReadSingleDataSetResults -> List EncodedField
encodeJsonReadSingleDataSetResultsPairs model =
    let
        pairs =
            [ encode "attributi" (Json.Encode.list encodeJsonAttributo) model.attributi
            , encode "chemical_id_to_name" (Json.Encode.list encodeJsonChemicalIdAndName) model.chemicalIdToName
            , encode "experiment_type" encodeJsonExperimentType model.experimentType
            , encode "data_set" encodeJsonDataSetWithIndexingResults model.dataSet
            ]
    in
    pairs


encodeJsonReadSingleMergeResult : JsonReadSingleMergeResult -> Json.Encode.Value
encodeJsonReadSingleMergeResult =
    encodeObject << encodeJsonReadSingleMergeResultPairs


encodeJsonReadSingleMergeResultWithTag : ( String, String ) -> JsonReadSingleMergeResult -> Json.Encode.Value
encodeJsonReadSingleMergeResultWithTag (tagField, tag) model =
    encodeObject (encodeJsonReadSingleMergeResultPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonReadSingleMergeResultPairs : JsonReadSingleMergeResult -> List EncodedField
encodeJsonReadSingleMergeResultPairs model =
    let
        pairs =
            [ encode "experiment_type" encodeJsonExperimentType model.experimentType
            , encode "result" encodeJsonMergeResult model.result
            ]
    in
    pairs


encodeJsonRefinementResult : JsonRefinementResult -> Json.Encode.Value
encodeJsonRefinementResult =
    encodeObject << encodeJsonRefinementResultPairs


encodeJsonRefinementResultWithTag : ( String, String ) -> JsonRefinementResult -> Json.Encode.Value
encodeJsonRefinementResultWithTag (tagField, tag) model =
    encodeObject (encodeJsonRefinementResultPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonRefinementResultPairs : JsonRefinementResult -> List EncodedField
encodeJsonRefinementResultPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "merge_result_id" Json.Encode.int model.mergeResultId
            , encode "pdb_file_id" Json.Encode.int model.pdbFileId
            , encode "mtz_file_id" Json.Encode.int model.mtzFileId
            , encode "r_free" Json.Encode.float model.rFree
            , encode "r_work" Json.Encode.float model.rWork
            , encode "rms_bond_angle" Json.Encode.float model.rmsBondAngle
            , encode "rms_bond_length" Json.Encode.float model.rmsBondLength
            ]
    in
    pairs


encodeJsonRefinementResultInternal : JsonRefinementResultInternal -> Json.Encode.Value
encodeJsonRefinementResultInternal =
    encodeObject << encodeJsonRefinementResultInternalPairs


encodeJsonRefinementResultInternalWithTag : ( String, String ) -> JsonRefinementResultInternal -> Json.Encode.Value
encodeJsonRefinementResultInternalWithTag (tagField, tag) model =
    encodeObject (encodeJsonRefinementResultInternalPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonRefinementResultInternalPairs : JsonRefinementResultInternal -> List EncodedField
encodeJsonRefinementResultInternalPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , encode "pdb_file_id" Json.Encode.int model.pdbFileId
            , encode "mtz_file_id" Json.Encode.int model.mtzFileId
            , encode "r_free" Json.Encode.float model.rFree
            , encode "r_work" Json.Encode.float model.rWork
            , encode "rms_bond_angle" Json.Encode.float model.rmsBondAngle
            , encode "rms_bond_length" Json.Encode.float model.rmsBondLength
            ]
    in
    pairs


encodeJsonRun : JsonRun -> Json.Encode.Value
encodeJsonRun =
    encodeObject << encodeJsonRunPairs


encodeJsonRunWithTag : ( String, String ) -> JsonRun -> Json.Encode.Value
encodeJsonRunWithTag (tagField, tag) model =
    encodeObject (encodeJsonRunPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonRunPairs : JsonRun -> List EncodedField
encodeJsonRunPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "external_id" Json.Encode.int model.externalId
            , encode "attributi" (Json.Encode.list encodeJsonAttributoValue) model.attributi
            , encode "started" Json.Encode.int model.started
            , maybeEncode "stopped" Json.Encode.int model.stopped
            , encode "files" (Json.Encode.list encodeJsonRunFile) model.files
            , encode "summary" encodeJsonIndexingFom model.summary
            , encode "experiment_type_id" Json.Encode.int model.experimentTypeId
            ]
    in
    pairs


encodeJsonRunAnalysisIndexingResult : JsonRunAnalysisIndexingResult -> Json.Encode.Value
encodeJsonRunAnalysisIndexingResult =
    encodeObject << encodeJsonRunAnalysisIndexingResultPairs


encodeJsonRunAnalysisIndexingResultWithTag : ( String, String ) -> JsonRunAnalysisIndexingResult -> Json.Encode.Value
encodeJsonRunAnalysisIndexingResultWithTag (tagField, tag) model =
    encodeObject (encodeJsonRunAnalysisIndexingResultPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonRunAnalysisIndexingResultPairs : JsonRunAnalysisIndexingResult -> List EncodedField
encodeJsonRunAnalysisIndexingResultPairs model =
    let
        pairs =
            [ encode "run_id" Json.Encode.int model.runId
            , encode "foms" encodeJsonIndexingFom model.foms
            , encode "indexing_statistics" (Json.Encode.list encodeJsonIndexingStatistic) model.indexingStatistics
            , encode "running" Json.Encode.bool model.running
            , maybeEncode "frames" Json.Encode.int model.frames
            , maybeEncode "total_frames" Json.Encode.int model.totalFrames
            ]
    in
    pairs


encodeJsonRunFile : JsonRunFile -> Json.Encode.Value
encodeJsonRunFile =
    encodeObject << encodeJsonRunFilePairs


encodeJsonRunFileWithTag : ( String, String ) -> JsonRunFile -> Json.Encode.Value
encodeJsonRunFileWithTag (tagField, tag) model =
    encodeObject (encodeJsonRunFilePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonRunFilePairs : JsonRunFile -> List EncodedField
encodeJsonRunFilePairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "glob" Json.Encode.string model.glob
            , encode "source" Json.Encode.string model.source
            ]
    in
    pairs


encodeJsonRunId : JsonRunId -> Json.Encode.Value
encodeJsonRunId =
    encodeObject << encodeJsonRunIdPairs


encodeJsonRunIdWithTag : ( String, String ) -> JsonRunId -> Json.Encode.Value
encodeJsonRunIdWithTag (tagField, tag) model =
    encodeObject (encodeJsonRunIdPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonRunIdPairs : JsonRunId -> List EncodedField
encodeJsonRunIdPairs model =
    let
        pairs =
            [ encode "internal_run_id" Json.Encode.int model.internalRunId
            , encode "external_run_id" Json.Encode.int model.externalRunId
            ]
    in
    pairs


encodeJsonRunRange : JsonRunRange -> Json.Encode.Value
encodeJsonRunRange =
    encodeObject << encodeJsonRunRangePairs


encodeJsonRunRangeWithTag : ( String, String ) -> JsonRunRange -> Json.Encode.Value
encodeJsonRunRangeWithTag (tagField, tag) model =
    encodeObject (encodeJsonRunRangePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonRunRangePairs : JsonRunRange -> List EncodedField
encodeJsonRunRangePairs model =
    let
        pairs =
            [ encode "run_from" Json.Encode.int model.runFrom
            , encode "run_to" Json.Encode.int model.runTo
            ]
    in
    pairs


encodeJsonRunsBulkImportInfo : JsonRunsBulkImportInfo -> Json.Encode.Value
encodeJsonRunsBulkImportInfo =
    encodeObject << encodeJsonRunsBulkImportInfoPairs


encodeJsonRunsBulkImportInfoWithTag : ( String, String ) -> JsonRunsBulkImportInfo -> Json.Encode.Value
encodeJsonRunsBulkImportInfoWithTag (tagField, tag) model =
    encodeObject (encodeJsonRunsBulkImportInfoPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonRunsBulkImportInfoPairs : JsonRunsBulkImportInfo -> List EncodedField
encodeJsonRunsBulkImportInfoPairs model =
    let
        pairs =
            [ encode "run_attributi" (Json.Encode.list encodeJsonAttributo) model.runAttributi
            , encode "experiment_types" (Json.Encode.list Json.Encode.string) model.experimentTypes
            , encode "chemicals" (Json.Encode.list encodeJsonChemical) model.chemicals
            ]
    in
    pairs


encodeJsonRunsBulkImportOutput : JsonRunsBulkImportOutput -> Json.Encode.Value
encodeJsonRunsBulkImportOutput =
    encodeObject << encodeJsonRunsBulkImportOutputPairs


encodeJsonRunsBulkImportOutputWithTag : ( String, String ) -> JsonRunsBulkImportOutput -> Json.Encode.Value
encodeJsonRunsBulkImportOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonRunsBulkImportOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonRunsBulkImportOutputPairs : JsonRunsBulkImportOutput -> List EncodedField
encodeJsonRunsBulkImportOutputPairs model =
    let
        pairs =
            [ encode "simulated" Json.Encode.bool model.simulated
            , encode "create_data_sets" Json.Encode.bool model.createDataSets
            , encode "errors" (Json.Encode.list Json.Encode.string) model.errors
            , encode "warnings" (Json.Encode.list Json.Encode.string) model.warnings
            , encode "number_of_runs" Json.Encode.int model.numberOfRuns
            , encode "data_sets" (Json.Encode.list encodeJsonDataSet) model.dataSets
            ]
    in
    pairs


encodeJsonStartRunOutput : JsonStartRunOutput -> Json.Encode.Value
encodeJsonStartRunOutput =
    encodeObject << encodeJsonStartRunOutputPairs


encodeJsonStartRunOutputWithTag : ( String, String ) -> JsonStartRunOutput -> Json.Encode.Value
encodeJsonStartRunOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonStartRunOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonStartRunOutputPairs : JsonStartRunOutput -> List EncodedField
encodeJsonStartRunOutputPairs model =
    let
        pairs =
            [ encode "run_internal_id" Json.Encode.int model.runInternalId
            ]
    in
    pairs


encodeJsonStopRunOutput : JsonStopRunOutput -> Json.Encode.Value
encodeJsonStopRunOutput =
    encodeObject << encodeJsonStopRunOutputPairs


encodeJsonStopRunOutputWithTag : ( String, String ) -> JsonStopRunOutput -> Json.Encode.Value
encodeJsonStopRunOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonStopRunOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonStopRunOutputPairs : JsonStopRunOutput -> List EncodedField
encodeJsonStopRunOutputPairs model =
    let
        pairs =
            [ encode "result" Json.Encode.bool model.result
            ]
    in
    pairs


encodeJsonUpdateAttributoConversionFlags : JsonUpdateAttributoConversionFlags -> Json.Encode.Value
encodeJsonUpdateAttributoConversionFlags =
    encodeObject << encodeJsonUpdateAttributoConversionFlagsPairs


encodeJsonUpdateAttributoConversionFlagsWithTag : ( String, String ) -> JsonUpdateAttributoConversionFlags -> Json.Encode.Value
encodeJsonUpdateAttributoConversionFlagsWithTag (tagField, tag) model =
    encodeObject (encodeJsonUpdateAttributoConversionFlagsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonUpdateAttributoConversionFlagsPairs : JsonUpdateAttributoConversionFlags -> List EncodedField
encodeJsonUpdateAttributoConversionFlagsPairs model =
    let
        pairs =
            [ encode "ignore_units" Json.Encode.bool model.ignoreUnits
            ]
    in
    pairs


encodeJsonUpdateAttributoInput : JsonUpdateAttributoInput -> Json.Encode.Value
encodeJsonUpdateAttributoInput =
    encodeObject << encodeJsonUpdateAttributoInputPairs


encodeJsonUpdateAttributoInputWithTag : ( String, String ) -> JsonUpdateAttributoInput -> Json.Encode.Value
encodeJsonUpdateAttributoInputWithTag (tagField, tag) model =
    encodeObject (encodeJsonUpdateAttributoInputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonUpdateAttributoInputPairs : JsonUpdateAttributoInput -> List EncodedField
encodeJsonUpdateAttributoInputPairs model =
    let
        pairs =
            [ encode "attributo" encodeJsonAttributo model.attributo
            , encode "conversion_flags" encodeJsonUpdateAttributoConversionFlags model.conversionFlags
            ]
    in
    pairs


encodeJsonUpdateAttributoOutput : JsonUpdateAttributoOutput -> Json.Encode.Value
encodeJsonUpdateAttributoOutput =
    encodeObject << encodeJsonUpdateAttributoOutputPairs


encodeJsonUpdateAttributoOutputWithTag : ( String, String ) -> JsonUpdateAttributoOutput -> Json.Encode.Value
encodeJsonUpdateAttributoOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonUpdateAttributoOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonUpdateAttributoOutputPairs : JsonUpdateAttributoOutput -> List EncodedField
encodeJsonUpdateAttributoOutputPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            ]
    in
    pairs


encodeJsonUpdateBeamtimeInput : JsonUpdateBeamtimeInput -> Json.Encode.Value
encodeJsonUpdateBeamtimeInput =
    encodeObject << encodeJsonUpdateBeamtimeInputPairs


encodeJsonUpdateBeamtimeInputWithTag : ( String, String ) -> JsonUpdateBeamtimeInput -> Json.Encode.Value
encodeJsonUpdateBeamtimeInputWithTag (tagField, tag) model =
    encodeObject (encodeJsonUpdateBeamtimeInputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonUpdateBeamtimeInputPairs : JsonUpdateBeamtimeInput -> List EncodedField
encodeJsonUpdateBeamtimeInputPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "external_id" Json.Encode.string model.externalId
            , encode "beamline" Json.Encode.string model.beamline
            , encode "proposal" Json.Encode.string model.proposal
            , encode "title" Json.Encode.string model.title
            , encode "comment" Json.Encode.string model.comment
            , encode "start" Json.Encode.int model.start
            , encode "end" Json.Encode.int model.end
            , encode "analysis_output_path" Json.Encode.string model.analysisOutputPath
            ]
    in
    pairs


encodeJsonUpdateBeamtimeScheduleInput : JsonUpdateBeamtimeScheduleInput -> Json.Encode.Value
encodeJsonUpdateBeamtimeScheduleInput =
    encodeObject << encodeJsonUpdateBeamtimeScheduleInputPairs


encodeJsonUpdateBeamtimeScheduleInputWithTag : ( String, String ) -> JsonUpdateBeamtimeScheduleInput -> Json.Encode.Value
encodeJsonUpdateBeamtimeScheduleInputWithTag (tagField, tag) model =
    encodeObject (encodeJsonUpdateBeamtimeScheduleInputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonUpdateBeamtimeScheduleInputPairs : JsonUpdateBeamtimeScheduleInput -> List EncodedField
encodeJsonUpdateBeamtimeScheduleInputPairs model =
    let
        pairs =
            [ encode "beamtime_id" Json.Encode.int model.beamtimeId
            , encode "schedule" (Json.Encode.list encodeJsonBeamtimeScheduleRow) model.schedule
            ]
    in
    pairs


encodeJsonUpdateLiveStream : JsonUpdateLiveStream -> Json.Encode.Value
encodeJsonUpdateLiveStream =
    encodeObject << encodeJsonUpdateLiveStreamPairs


encodeJsonUpdateLiveStreamWithTag : ( String, String ) -> JsonUpdateLiveStream -> Json.Encode.Value
encodeJsonUpdateLiveStreamWithTag (tagField, tag) model =
    encodeObject (encodeJsonUpdateLiveStreamPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonUpdateLiveStreamPairs : JsonUpdateLiveStream -> List EncodedField
encodeJsonUpdateLiveStreamPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            ]
    in
    pairs


encodeJsonUpdateOnlineIndexingParametersInput : JsonUpdateOnlineIndexingParametersInput -> Json.Encode.Value
encodeJsonUpdateOnlineIndexingParametersInput =
    encodeObject << encodeJsonUpdateOnlineIndexingParametersInputPairs


encodeJsonUpdateOnlineIndexingParametersInputWithTag : ( String, String ) -> JsonUpdateOnlineIndexingParametersInput -> Json.Encode.Value
encodeJsonUpdateOnlineIndexingParametersInputWithTag (tagField, tag) model =
    encodeObject (encodeJsonUpdateOnlineIndexingParametersInputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonUpdateOnlineIndexingParametersInputPairs : JsonUpdateOnlineIndexingParametersInput -> List EncodedField
encodeJsonUpdateOnlineIndexingParametersInputPairs model =
    let
        pairs =
            [ encode "command_line" Json.Encode.string model.commandLine
            , encode "geometry_file" Json.Encode.string model.geometryFile
            , encode "source" Json.Encode.string model.source
            ]
    in
    pairs


encodeJsonUpdateOnlineIndexingParametersOutput : JsonUpdateOnlineIndexingParametersOutput -> Json.Encode.Value
encodeJsonUpdateOnlineIndexingParametersOutput =
    encodeObject << encodeJsonUpdateOnlineIndexingParametersOutputPairs


encodeJsonUpdateOnlineIndexingParametersOutputWithTag : ( String, String ) -> JsonUpdateOnlineIndexingParametersOutput -> Json.Encode.Value
encodeJsonUpdateOnlineIndexingParametersOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonUpdateOnlineIndexingParametersOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonUpdateOnlineIndexingParametersOutputPairs : JsonUpdateOnlineIndexingParametersOutput -> List EncodedField
encodeJsonUpdateOnlineIndexingParametersOutputPairs model =
    let
        pairs =
            [ encode "success" Json.Encode.bool model.success
            ]
    in
    pairs


encodeJsonUpdateRun : JsonUpdateRun -> Json.Encode.Value
encodeJsonUpdateRun =
    encodeObject << encodeJsonUpdateRunPairs


encodeJsonUpdateRunWithTag : ( String, String ) -> JsonUpdateRun -> Json.Encode.Value
encodeJsonUpdateRunWithTag (tagField, tag) model =
    encodeObject (encodeJsonUpdateRunPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonUpdateRunPairs : JsonUpdateRun -> List EncodedField
encodeJsonUpdateRunPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "experiment_type_id" Json.Encode.int model.experimentTypeId
            , encode "attributi" (Json.Encode.list encodeJsonAttributoValue) model.attributi
            , maybeEncode "files" (Json.Encode.list encodeJsonRunFile) model.files
            ]
    in
    pairs


encodeJsonUpdateRunOutput : JsonUpdateRunOutput -> Json.Encode.Value
encodeJsonUpdateRunOutput =
    encodeObject << encodeJsonUpdateRunOutputPairs


encodeJsonUpdateRunOutputWithTag : ( String, String ) -> JsonUpdateRunOutput -> Json.Encode.Value
encodeJsonUpdateRunOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonUpdateRunOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonUpdateRunOutputPairs : JsonUpdateRunOutput -> List EncodedField
encodeJsonUpdateRunOutputPairs model =
    let
        pairs =
            [ encode "result" Json.Encode.bool model.result
            , encode "files" (Json.Encode.list encodeJsonRunFile) model.files
            ]
    in
    pairs


encodeJsonUpdateRunsBulkInput : JsonUpdateRunsBulkInput -> Json.Encode.Value
encodeJsonUpdateRunsBulkInput =
    encodeObject << encodeJsonUpdateRunsBulkInputPairs


encodeJsonUpdateRunsBulkInputWithTag : ( String, String ) -> JsonUpdateRunsBulkInput -> Json.Encode.Value
encodeJsonUpdateRunsBulkInputWithTag (tagField, tag) model =
    encodeObject (encodeJsonUpdateRunsBulkInputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonUpdateRunsBulkInputPairs : JsonUpdateRunsBulkInput -> List EncodedField
encodeJsonUpdateRunsBulkInputPairs model =
    let
        pairs =
            [ encode "beamtime_id" Json.Encode.int model.beamtimeId
            , encode "external_run_ids" (Json.Encode.list Json.Encode.int) model.externalRunIds
            , encode "attributi" (Json.Encode.list encodeJsonAttributoValue) model.attributi
            , maybeEncode "new_experiment_type_id" Json.Encode.int model.newExperimentTypeId
            ]
    in
    pairs


encodeJsonUpdateRunsBulkOutput : JsonUpdateRunsBulkOutput -> Json.Encode.Value
encodeJsonUpdateRunsBulkOutput =
    encodeObject << encodeJsonUpdateRunsBulkOutputPairs


encodeJsonUpdateRunsBulkOutputWithTag : ( String, String ) -> JsonUpdateRunsBulkOutput -> Json.Encode.Value
encodeJsonUpdateRunsBulkOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonUpdateRunsBulkOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonUpdateRunsBulkOutputPairs : JsonUpdateRunsBulkOutput -> List EncodedField
encodeJsonUpdateRunsBulkOutputPairs model =
    let
        pairs =
            [ encode "result" Json.Encode.bool model.result
            ]
    in
    pairs


encodeJsonUserConfig : JsonUserConfig -> Json.Encode.Value
encodeJsonUserConfig =
    encodeObject << encodeJsonUserConfigPairs


encodeJsonUserConfigWithTag : ( String, String ) -> JsonUserConfig -> Json.Encode.Value
encodeJsonUserConfigWithTag (tagField, tag) model =
    encodeObject (encodeJsonUserConfigPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonUserConfigPairs : JsonUserConfig -> List EncodedField
encodeJsonUserConfigPairs model =
    let
        pairs =
            [ encode "online_crystfel" Json.Encode.bool model.onlineCrystfel
            , encode "auto_pilot" Json.Encode.bool model.autoPilot
            , maybeEncode "current_experiment_type_id" Json.Encode.int model.currentExperimentTypeId
            , maybeEncode "current_online_indexing_parameters_id" Json.Encode.int model.currentOnlineIndexingParametersId
            ]
    in
    pairs


encodeJsonUserConfigurationSingleOutput : JsonUserConfigurationSingleOutput -> Json.Encode.Value
encodeJsonUserConfigurationSingleOutput =
    encodeObject << encodeJsonUserConfigurationSingleOutputPairs


encodeJsonUserConfigurationSingleOutputWithTag : ( String, String ) -> JsonUserConfigurationSingleOutput -> Json.Encode.Value
encodeJsonUserConfigurationSingleOutputWithTag (tagField, tag) model =
    encodeObject (encodeJsonUserConfigurationSingleOutputPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonUserConfigurationSingleOutputPairs : JsonUserConfigurationSingleOutput -> List EncodedField
encodeJsonUserConfigurationSingleOutputPairs model =
    let
        pairs =
            [ maybeEncode "value_bool" Json.Encode.bool model.valueBool
            , maybeEncode "value_int" Json.Encode.int model.valueInt
            ]
    in
    pairs


stringFromMergeModel : MergeModel -> String
stringFromMergeModel model =
    case model of
        MergeModelUnity ->
            "unity"

        MergeModelXsphere ->
            "xsphere"

        MergeModelOffset ->
            "offset"

        MergeModelGgpm ->
            "ggpm"


encodeMergeModel : MergeModel -> Json.Encode.Value
encodeMergeModel =
    Json.Encode.string << stringFromMergeModel


stringFromMergeNegativeHandling : MergeNegativeHandling -> String
stringFromMergeNegativeHandling model =
    case model of
        MergeNegativeHandlingIgnore ->
            "ignore"

        MergeNegativeHandlingZero ->
            "zero"


encodeMergeNegativeHandling : MergeNegativeHandling -> Json.Encode.Value
encodeMergeNegativeHandling =
    Json.Encode.string << stringFromMergeNegativeHandling


stringFromScaleIntensities : ScaleIntensities -> String
stringFromScaleIntensities model =
    case model of
        ScaleIntensitiesOff ->
            "off"

        ScaleIntensitiesNormal ->
            "normal"

        ScaleIntensitiesDebyewaller ->
            "debyewaller"


encodeScaleIntensities : ScaleIntensities -> Json.Encode.Value
encodeScaleIntensities =
    Json.Encode.string << stringFromScaleIntensities


encodeValidationError : ValidationError -> Json.Encode.Value
encodeValidationError =
    encodeObject << encodeValidationErrorPairs


encodeValidationErrorWithTag : ( String, String ) -> ValidationError -> Json.Encode.Value
encodeValidationErrorWithTag (tagField, tag) model =
    encodeObject (encodeValidationErrorPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeValidationErrorPairs : ValidationError -> List EncodedField
encodeValidationErrorPairs model =
    let
        pairs =
            [ encode "loc" (Json.Encode.list Json.Encode.string) model.loc
            , encode "msg" Json.Encode.string model.msg
            , encode "type" Json.Encode.string model.type_
            ]
    in
    pairs


-- DECODER


associatedTableDecoder : Json.Decode.Decoder AssociatedTable
associatedTableDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "run" ->
                        Json.Decode.succeed AssociatedTableRun

                    "chemical" ->
                        Json.Decode.succeed AssociatedTableChemical

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


attributoTypeDecoder : Json.Decode.Decoder AttributoType
attributoTypeDecoder =
    Json.Decode.field "type" Json.Decode.string
        |> Json.Decode.andThen attributoTypeTagDecoder


attributoTypeTagDecoder : String -> Json.Decode.Decoder AttributoType
attributoTypeTagDecoder tag =
    case tag of
        "array" ->
            Json.Decode.map AttributoTypeJSONSchemaArray jSONSchemaArrayDecoder

        "boolean" ->
            Json.Decode.map AttributoTypeJSONSchemaBoolean jSONSchemaBooleanDecoder

        "integer" ->
            Json.Decode.map AttributoTypeJSONSchemaInteger jSONSchemaIntegerDecoder

        "number" ->
            Json.Decode.map AttributoTypeJSONSchemaNumber jSONSchemaNumberDecoder

        "string" ->
            Json.Decode.map AttributoTypeJSONSchemaString jSONSchemaStringDecoder

        _ ->
            Json.Decode.fail <| "Trying to decode AttributoType, but type_ '" ++ tag ++ "' is not supported."



chemicalTypeDecoder : Json.Decode.Decoder ChemicalType
chemicalTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "crystal" ->
                        Json.Decode.succeed ChemicalTypeCrystal

                    "solution" ->
                        Json.Decode.succeed ChemicalTypeSolution

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


dBJobStatusDecoder : Json.Decode.Decoder DBJobStatus
dBJobStatusDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "queued" ->
                        Json.Decode.succeed DBJobStatusQueued

                    "running" ->
                        Json.Decode.succeed DBJobStatusRunning

                    "done" ->
                        Json.Decode.succeed DBJobStatusDone

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


hTTPValidationErrorDecoder : Json.Decode.Decoder HTTPValidationError
hTTPValidationErrorDecoder =
    Json.Decode.succeed HTTPValidationError
        |> maybeDecode "detail" (Json.Decode.list validationErrorDecoder) Nothing


jSONSchemaArrayDecoder : Json.Decode.Decoder JSONSchemaArray
jSONSchemaArrayDecoder =
    Json.Decode.succeed JSONSchemaArray
        |> decode "type" jSONSchemaArrayTypeDecoder 
        |> decode "item_type" jSONSchemaArraySubtypeDecoder 
        |> maybeDecode "minItems" Json.Decode.int Nothing
        |> maybeDecode "maxItems" Json.Decode.int Nothing


jSONSchemaArrayTypeDecoder : Json.Decode.Decoder JSONSchemaArrayType
jSONSchemaArrayTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "array" ->
                        Json.Decode.succeed JSONSchemaArrayTypeArray

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



jSONSchemaArraySubtypeDecoder : Json.Decode.Decoder JSONSchemaArraySubtype
jSONSchemaArraySubtypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "string" ->
                        Json.Decode.succeed JSONSchemaArraySubtypeString

                    "bool" ->
                        Json.Decode.succeed JSONSchemaArraySubtypeBool

                    "number" ->
                        Json.Decode.succeed JSONSchemaArraySubtypeNumber

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


jSONSchemaBooleanDecoder : Json.Decode.Decoder JSONSchemaBoolean
jSONSchemaBooleanDecoder =
    Json.Decode.succeed JSONSchemaBoolean
        |> decode "type" jSONSchemaBooleanTypeDecoder 


jSONSchemaBooleanTypeDecoder : Json.Decode.Decoder JSONSchemaBooleanType
jSONSchemaBooleanTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "boolean" ->
                        Json.Decode.succeed JSONSchemaBooleanTypeBoolean

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



jSONSchemaIntegerDecoder : Json.Decode.Decoder JSONSchemaInteger
jSONSchemaIntegerDecoder =
    Json.Decode.succeed JSONSchemaInteger
        |> decode "type" jSONSchemaIntegerTypeDecoder 
        |> maybeDecode "format" jSONSchemaIntegerFormatDecoder Nothing


jSONSchemaIntegerTypeDecoder : Json.Decode.Decoder JSONSchemaIntegerType
jSONSchemaIntegerTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "integer" ->
                        Json.Decode.succeed JSONSchemaIntegerTypeInteger

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



jSONSchemaIntegerFormatDecoder : Json.Decode.Decoder JSONSchemaIntegerFormat
jSONSchemaIntegerFormatDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "date-time" ->
                        Json.Decode.succeed JSONSchemaIntegerFormatDateTime

                    "chemical-id" ->
                        Json.Decode.succeed JSONSchemaIntegerFormatChemicalId

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



jSONSchemaNumberDecoder : Json.Decode.Decoder JSONSchemaNumber
jSONSchemaNumberDecoder =
    Json.Decode.succeed JSONSchemaNumber
        |> decode "type" jSONSchemaNumberTypeDecoder 
        |> maybeDecode "minimum" Json.Decode.float Nothing
        |> maybeDecode "maximum" Json.Decode.float Nothing
        |> maybeDecode "exclusiveMinimum" Json.Decode.float Nothing
        |> maybeDecode "exclusiveMaximum" Json.Decode.float Nothing
        |> maybeDecode "suffix" Json.Decode.string Nothing
        |> maybeDecode "format" jSONSchemaNumberFormatDecoder Nothing
        |> maybeDecode "tolerance" Json.Decode.float Nothing
        |> maybeDecode "toleranceIsAbsolute" Json.Decode.bool (Just False)


jSONSchemaNumberTypeDecoder : Json.Decode.Decoder JSONSchemaNumberType
jSONSchemaNumberTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "number" ->
                        Json.Decode.succeed JSONSchemaNumberTypeNumber

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



jSONSchemaNumberFormatDecoder : Json.Decode.Decoder JSONSchemaNumberFormat
jSONSchemaNumberFormatDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "standard-unit" ->
                        Json.Decode.succeed JSONSchemaNumberFormatStandardUnit

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



jSONSchemaStringDecoder : Json.Decode.Decoder JSONSchemaString
jSONSchemaStringDecoder =
    Json.Decode.succeed JSONSchemaString
        |> decode "type" jSONSchemaStringTypeDecoder 
        |> maybeDecode "enum" (Json.Decode.list Json.Decode.string) Nothing


jSONSchemaStringTypeDecoder : Json.Decode.Decoder JSONSchemaStringType
jSONSchemaStringTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "string" ->
                        Json.Decode.succeed JSONSchemaStringTypeString

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



jsonAnalysisRunDecoder : Json.Decode.Decoder JsonAnalysisRun
jsonAnalysisRunDecoder =
    Json.Decode.succeed JsonAnalysisRun
        |> decode "id" Json.Decode.int 
        |> decode "external_id" Json.Decode.int 
        |> decode "attributi" (Json.Decode.list jsonAttributoValueDecoder) 
        |> decode "file_paths" (Json.Decode.list jsonRunFileDecoder) 


jsonAttributiIdAndRoleDecoder : Json.Decode.Decoder JsonAttributiIdAndRole
jsonAttributiIdAndRoleDecoder =
    Json.Decode.succeed JsonAttributiIdAndRole
        |> decode "id" Json.Decode.int 
        |> decode "role" chemicalTypeDecoder 


jsonAttributoDecoder : Json.Decode.Decoder JsonAttributo
jsonAttributoDecoder =
    Json.Decode.succeed JsonAttributo
        |> decode "id" Json.Decode.int 
        |> decode "name" Json.Decode.string 
        |> decode "description" Json.Decode.string 
        |> decode "group" Json.Decode.string 
        |> decode "associated_table" associatedTableDecoder 
        |> maybeDecode "attributo_type_integer" jSONSchemaIntegerDecoder Nothing
        |> maybeDecode "attributo_type_number" jSONSchemaNumberDecoder Nothing
        |> maybeDecode "attributo_type_string" jSONSchemaStringDecoder Nothing
        |> maybeDecode "attributo_type_array" jSONSchemaArrayDecoder Nothing
        |> maybeDecode "attributo_type_boolean" jSONSchemaBooleanDecoder Nothing


jsonAttributoBulkValueDecoder : Json.Decode.Decoder JsonAttributoBulkValue
jsonAttributoBulkValueDecoder =
    Json.Decode.succeed JsonAttributoBulkValue
        |> decode "attributo_id" Json.Decode.int 
        |> decode "values" (Json.Decode.list jsonAttributoValueDecoder) 


jsonAttributoValueDecoder : Json.Decode.Decoder JsonAttributoValue
jsonAttributoValueDecoder =
    Json.Decode.succeed JsonAttributoValue
        |> decode "attributo_id" Json.Decode.int 
        |> maybeDecode "attributo_value_str" Json.Decode.string Nothing
        |> maybeDecode "attributo_value_int" Json.Decode.int Nothing
        |> maybeDecode "attributo_value_chemical" Json.Decode.int Nothing
        |> maybeDecode "attributo_value_datetime" Json.Decode.int Nothing
        |> maybeDecode "attributo_value_float" Json.Decode.float Nothing
        |> maybeDecode "attributo_value_bool" Json.Decode.bool Nothing
        |> maybeDecode "attributo_value_list_str" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "attributo_value_list_float" (Json.Decode.list Json.Decode.float) Nothing
        |> maybeDecode "attributo_value_list_bool" (Json.Decode.list Json.Decode.bool) Nothing


jsonAttributoWithNameDecoder : Json.Decode.Decoder JsonAttributoWithName
jsonAttributoWithNameDecoder =
    Json.Decode.succeed JsonAttributoWithName
        |> decode "id" Json.Decode.int 
        |> decode "name" Json.Decode.string 


jsonBeamtimeDecoder : Json.Decode.Decoder JsonBeamtime
jsonBeamtimeDecoder =
    Json.Decode.succeed JsonBeamtime
        |> decode "id" Json.Decode.int 
        |> decode "external_id" Json.Decode.string 
        |> decode "proposal" Json.Decode.string 
        |> decode "beamline" Json.Decode.string 
        |> decode "title" Json.Decode.string 
        |> decode "comment" Json.Decode.string 
        |> decode "start" Json.Decode.int 
        |> decode "end" Json.Decode.int 
        |> decode "chemical_names" (Json.Decode.list Json.Decode.string) 
        |> decode "analysis_output_path" Json.Decode.string 


jsonBeamtimeOutputDecoder : Json.Decode.Decoder JsonBeamtimeOutput
jsonBeamtimeOutputDecoder =
    Json.Decode.succeed JsonBeamtimeOutput
        |> decode "id" Json.Decode.int 


jsonBeamtimeScheduleDecoder : Json.Decode.Decoder JsonBeamtimeSchedule
jsonBeamtimeScheduleDecoder =
    Json.Decode.succeed JsonBeamtimeSchedule
        |> decode "schedule" (Json.Decode.list jsonBeamtimeScheduleRowDecoder) 


jsonBeamtimeScheduleOutputDecoder : Json.Decode.Decoder JsonBeamtimeScheduleOutput
jsonBeamtimeScheduleOutputDecoder =
    Json.Decode.succeed JsonBeamtimeScheduleOutput
        |> decode "schedule" (Json.Decode.list jsonBeamtimeScheduleRowDecoder) 


jsonBeamtimeScheduleRowDecoder : Json.Decode.Decoder JsonBeamtimeScheduleRow
jsonBeamtimeScheduleRowDecoder =
    Json.Decode.succeed JsonBeamtimeScheduleRow
        |> decode "users" Json.Decode.string 
        |> decode "date" Json.Decode.string 
        |> decode "shift" Json.Decode.string 
        |> decode "comment" Json.Decode.string 
        |> decode "td_support" Json.Decode.string 
        |> decode "chemicals" (Json.Decode.list Json.Decode.int) 
        |> decode "start_posix" Json.Decode.int 
        |> decode "stop_posix" Json.Decode.int 


jsonChangeRunExperimentTypeDecoder : Json.Decode.Decoder JsonChangeRunExperimentType
jsonChangeRunExperimentTypeDecoder =
    Json.Decode.succeed JsonChangeRunExperimentType
        |> decode "run_internal_id" Json.Decode.int 
        |> maybeDecode "experiment_type_id" Json.Decode.int Nothing


jsonChangeRunExperimentTypeOutputDecoder : Json.Decode.Decoder JsonChangeRunExperimentTypeOutput
jsonChangeRunExperimentTypeOutputDecoder =
    Json.Decode.succeed JsonChangeRunExperimentTypeOutput
        |> decode "result" Json.Decode.bool 


jsonCheckStandardUnitInputDecoder : Json.Decode.Decoder JsonCheckStandardUnitInput
jsonCheckStandardUnitInputDecoder =
    Json.Decode.succeed JsonCheckStandardUnitInput
        |> decode "input" Json.Decode.string 


jsonCheckStandardUnitOutputDecoder : Json.Decode.Decoder JsonCheckStandardUnitOutput
jsonCheckStandardUnitOutputDecoder =
    Json.Decode.succeed JsonCheckStandardUnitOutput
        |> decode "input" Json.Decode.string 
        |> maybeDecode "error" Json.Decode.string Nothing
        |> maybeDecode "normalized" Json.Decode.string Nothing


jsonChemicalDecoder : Json.Decode.Decoder JsonChemical
jsonChemicalDecoder =
    Json.Decode.succeed JsonChemical
        |> decode "id" Json.Decode.int 
        |> decode "beamtime_id" Json.Decode.int 
        |> decode "name" Json.Decode.string 
        |> decode "responsible_person" Json.Decode.string 
        |> decode "chemical_type" chemicalTypeDecoder 
        |> decode "attributi" (Json.Decode.list jsonAttributoValueDecoder) 
        |> decode "files" (Json.Decode.list jsonFileOutputDecoder) 


jsonChemicalIdAndNameDecoder : Json.Decode.Decoder JsonChemicalIdAndName
jsonChemicalIdAndNameDecoder =
    Json.Decode.succeed JsonChemicalIdAndName
        |> decode "chemical_id" Json.Decode.int 
        |> decode "name" Json.Decode.string 


jsonChemicalWithIdDecoder : Json.Decode.Decoder JsonChemicalWithId
jsonChemicalWithIdDecoder =
    Json.Decode.succeed JsonChemicalWithId
        |> decode "id" Json.Decode.int 
        |> decode "beamtime_id" Json.Decode.int 
        |> decode "name" Json.Decode.string 
        |> decode "responsible_person" Json.Decode.string 
        |> decode "chemical_type" chemicalTypeDecoder 
        |> decode "attributi" (Json.Decode.list jsonAttributoValueDecoder) 
        |> decode "file_ids" (Json.Decode.list Json.Decode.int) 


jsonChemicalWithoutIdDecoder : Json.Decode.Decoder JsonChemicalWithoutId
jsonChemicalWithoutIdDecoder =
    Json.Decode.succeed JsonChemicalWithoutId
        |> decode "beamtime_id" Json.Decode.int 
        |> decode "name" Json.Decode.string 
        |> decode "responsible_person" Json.Decode.string 
        |> decode "chemical_type" chemicalTypeDecoder 
        |> decode "attributi" (Json.Decode.list jsonAttributoValueDecoder) 
        |> decode "file_ids" (Json.Decode.list Json.Decode.int) 


jsonCopyChemicalInputDecoder : Json.Decode.Decoder JsonCopyChemicalInput
jsonCopyChemicalInputDecoder =
    Json.Decode.succeed JsonCopyChemicalInput
        |> decode "chemical_id" Json.Decode.int 
        |> decode "target_beamtime_id" Json.Decode.int 
        |> decode "create_attributi" Json.Decode.bool 


jsonCopyChemicalOutputDecoder : Json.Decode.Decoder JsonCopyChemicalOutput
jsonCopyChemicalOutputDecoder =
    Json.Decode.succeed JsonCopyChemicalOutput
        |> decode "new_chemical_id" Json.Decode.int 


jsonCopyExperimentTypesInputDecoder : Json.Decode.Decoder JsonCopyExperimentTypesInput
jsonCopyExperimentTypesInputDecoder =
    Json.Decode.succeed JsonCopyExperimentTypesInput
        |> decode "from_beamtime" Json.Decode.int 
        |> decode "to_beamtime" Json.Decode.int 


jsonCopyExperimentTypesOutputDecoder : Json.Decode.Decoder JsonCopyExperimentTypesOutput
jsonCopyExperimentTypesOutputDecoder =
    Json.Decode.succeed JsonCopyExperimentTypesOutput
        |> decode "to_beamtime_experiment_type_ids" (Json.Decode.list Json.Decode.int) 


jsonCreateAttributiFromSchemaInputDecoder : Json.Decode.Decoder JsonCreateAttributiFromSchemaInput
jsonCreateAttributiFromSchemaInputDecoder =
    Json.Decode.succeed JsonCreateAttributiFromSchemaInput
        |> decode "attributi_schema" (Json.Decode.list jsonCreateAttributiFromSchemaSingleAttributoDecoder) 
        |> decode "beamtime_id" Json.Decode.int 


jsonCreateAttributiFromSchemaOutputDecoder : Json.Decode.Decoder JsonCreateAttributiFromSchemaOutput
jsonCreateAttributiFromSchemaOutputDecoder =
    Json.Decode.succeed JsonCreateAttributiFromSchemaOutput
        |> decode "created_attributi" Json.Decode.int 


jsonCreateAttributiFromSchemaSingleAttributoDecoder : Json.Decode.Decoder JsonCreateAttributiFromSchemaSingleAttributo
jsonCreateAttributiFromSchemaSingleAttributoDecoder =
    Json.Decode.succeed JsonCreateAttributiFromSchemaSingleAttributo
        |> decode "attributo_name" Json.Decode.string 
        |> decode "attributo_type" attributoTypeDecoder 
        |> maybeDecode "description" Json.Decode.string Nothing


jsonCreateAttributoInputDecoder : Json.Decode.Decoder JsonCreateAttributoInput
jsonCreateAttributoInputDecoder =
    Json.Decode.succeed JsonCreateAttributoInput
        |> decode "beamtime_id" Json.Decode.int 
        |> decode "name" Json.Decode.string 
        |> decode "description" Json.Decode.string 
        |> decode "group" Json.Decode.string 
        |> decode "associated_table" associatedTableDecoder 
        |> maybeDecode "attributo_type_integer" jSONSchemaIntegerDecoder Nothing
        |> maybeDecode "attributo_type_number" jSONSchemaNumberDecoder Nothing
        |> maybeDecode "attributo_type_string" jSONSchemaStringDecoder Nothing
        |> maybeDecode "attributo_type_array" jSONSchemaArrayDecoder Nothing
        |> maybeDecode "attributo_type_boolean" jSONSchemaBooleanDecoder Nothing


jsonCreateAttributoOutputDecoder : Json.Decode.Decoder JsonCreateAttributoOutput
jsonCreateAttributoOutputDecoder =
    Json.Decode.succeed JsonCreateAttributoOutput
        |> decode "id" Json.Decode.int 


jsonCreateChemicalOutputDecoder : Json.Decode.Decoder JsonCreateChemicalOutput
jsonCreateChemicalOutputDecoder =
    Json.Decode.succeed JsonCreateChemicalOutput
        |> decode "id" Json.Decode.int 


jsonCreateDataSetFromRunDecoder : Json.Decode.Decoder JsonCreateDataSetFromRun
jsonCreateDataSetFromRunDecoder =
    Json.Decode.succeed JsonCreateDataSetFromRun
        |> decode "run_internal_id" Json.Decode.int 


jsonCreateDataSetFromRunOutputDecoder : Json.Decode.Decoder JsonCreateDataSetFromRunOutput
jsonCreateDataSetFromRunOutputDecoder =
    Json.Decode.succeed JsonCreateDataSetFromRunOutput
        |> decode "data_set_id" Json.Decode.int 


jsonCreateDataSetInputDecoder : Json.Decode.Decoder JsonCreateDataSetInput
jsonCreateDataSetInputDecoder =
    Json.Decode.succeed JsonCreateDataSetInput
        |> decode "experiment_type_id" Json.Decode.int 
        |> decode "attributi" (Json.Decode.list jsonAttributoValueDecoder) 


jsonCreateDataSetOutputDecoder : Json.Decode.Decoder JsonCreateDataSetOutput
jsonCreateDataSetOutputDecoder =
    Json.Decode.succeed JsonCreateDataSetOutput
        |> decode "id" Json.Decode.int 


jsonCreateExperimentTypeInputDecoder : Json.Decode.Decoder JsonCreateExperimentTypeInput
jsonCreateExperimentTypeInputDecoder =
    Json.Decode.succeed JsonCreateExperimentTypeInput
        |> decode "name" Json.Decode.string 
        |> decode "beamtime_id" Json.Decode.int 
        |> decode "attributi" (Json.Decode.list jsonAttributiIdAndRoleDecoder) 


jsonCreateExperimentTypeOutputDecoder : Json.Decode.Decoder JsonCreateExperimentTypeOutput
jsonCreateExperimentTypeOutputDecoder =
    Json.Decode.succeed JsonCreateExperimentTypeOutput
        |> decode "id" Json.Decode.int 


jsonCreateFileOutputDecoder : Json.Decode.Decoder JsonCreateFileOutput
jsonCreateFileOutputDecoder =
    Json.Decode.succeed JsonCreateFileOutput
        |> decode "id" Json.Decode.int 
        |> decode "file_name" Json.Decode.string 
        |> decode "description" Json.Decode.string 
        |> decode "type_" Json.Decode.string 
        |> decode "size_in_bytes" Json.Decode.int 
        |> maybeDecode "original_path" Json.Decode.string Nothing


jsonCreateIndexingForDataSetInputDecoder : Json.Decode.Decoder JsonCreateIndexingForDataSetInput
jsonCreateIndexingForDataSetInputDecoder =
    Json.Decode.succeed JsonCreateIndexingForDataSetInput
        |> decode "data_set_id" Json.Decode.int 
        |> decode "is_online" Json.Decode.bool 
        |> decode "cell_description" Json.Decode.string 
        |> decode "geometry_file" Json.Decode.string 
        |> decode "command_line" Json.Decode.string 
        |> decode "source" Json.Decode.string 


jsonCreateIndexingForDataSetOutputDecoder : Json.Decode.Decoder JsonCreateIndexingForDataSetOutput
jsonCreateIndexingForDataSetOutputDecoder =
    Json.Decode.succeed JsonCreateIndexingForDataSetOutput
        |> decode "jobs_started_run_external_ids" (Json.Decode.list Json.Decode.int) 
        |> decode "indexing_result_id" Json.Decode.int 
        |> decode "data_set_id" Json.Decode.int 
        |> decode "indexing_parameters_id" Json.Decode.int 


jsonCreateLiveStreamSnapshotOutputDecoder : Json.Decode.Decoder JsonCreateLiveStreamSnapshotOutput
jsonCreateLiveStreamSnapshotOutputDecoder =
    Json.Decode.succeed JsonCreateLiveStreamSnapshotOutput
        |> decode "id" Json.Decode.int 
        |> decode "file_name" Json.Decode.string 
        |> decode "description" Json.Decode.string 
        |> decode "type_" Json.Decode.string 
        |> decode "size_in_bytes" Json.Decode.int 
        |> maybeDecode "original_path" Json.Decode.string Nothing


jsonCreateOrUpdateRunDecoder : Json.Decode.Decoder JsonCreateOrUpdateRun
jsonCreateOrUpdateRunDecoder =
    Json.Decode.succeed JsonCreateOrUpdateRun
        |> decode "beamtime_id" Json.Decode.int 
        |> decode "attributi" (Json.Decode.list jsonAttributoValueDecoder) 
        |> maybeDecode "files" (Json.Decode.list jsonRunFileDecoder) Nothing
        |> maybeDecode "started" Json.Decode.int Nothing
        |> maybeDecode "stopped" Json.Decode.int Nothing
        |> maybeDecode "create_data_set" Json.Decode.bool (Just False)


jsonCreateOrUpdateRunOutputDecoder : Json.Decode.Decoder JsonCreateOrUpdateRunOutput
jsonCreateOrUpdateRunOutputDecoder =
    Json.Decode.succeed JsonCreateOrUpdateRunOutput
        |> decode "run_created" Json.Decode.bool 
        |> maybeDecode "indexing_result_id" Json.Decode.int Nothing
        |> maybeDecode "error_message" Json.Decode.string Nothing
        |> maybeDecode "run_internal_id" Json.Decode.int Nothing
        |> decode "files" (Json.Decode.list jsonRunFileDecoder) 


jsonDataSetDecoder : Json.Decode.Decoder JsonDataSet
jsonDataSetDecoder =
    Json.Decode.succeed JsonDataSet
        |> decode "id" Json.Decode.int 
        |> decode "experiment_type_id" Json.Decode.int 
        |> decode "beamtime_id" Json.Decode.int 
        |> decode "attributi" (Json.Decode.list jsonAttributoValueDecoder) 


jsonDataSetStatisticsDecoder : Json.Decode.Decoder JsonDataSetStatistics
jsonDataSetStatisticsDecoder =
    Json.Decode.succeed JsonDataSetStatistics
        |> decode "data_set_id" Json.Decode.int 
        |> decode "run_count" Json.Decode.int 
        |> decode "merge_results_count" Json.Decode.int 
        |> decode "indexed_frames" Json.Decode.int 
        |> decode "merge_or_indexing_jobs_running" Json.Decode.bool 


jsonDataSetWithFomDecoder : Json.Decode.Decoder JsonDataSetWithFom
jsonDataSetWithFomDecoder =
    Json.Decode.succeed JsonDataSetWithFom
        |> decode "data_set" jsonDataSetDecoder 
        |> decode "fom" jsonIndexingFomDecoder 


jsonDataSetWithIndexingResultsDecoder : Json.Decode.Decoder JsonDataSetWithIndexingResults
jsonDataSetWithIndexingResultsDecoder =
    Json.Decode.succeed JsonDataSetWithIndexingResults
        |> decode "data_set" jsonDataSetDecoder 
        |> decode "internal_run_ids" (Json.Decode.list Json.Decode.int) 
        |> decode "runs" (Json.Decode.list jsonRunRangeDecoder) 
        |> decode "point_group" Json.Decode.string 
        |> decode "space_group" Json.Decode.string 
        |> decode "cell_description" Json.Decode.string 
        |> decode "indexing_results" (Json.Decode.list jsonIndexingParametersWithResultsDecoder) 


jsonDeleteAttributoInputDecoder : Json.Decode.Decoder JsonDeleteAttributoInput
jsonDeleteAttributoInputDecoder =
    Json.Decode.succeed JsonDeleteAttributoInput
        |> decode "id" Json.Decode.int 


jsonDeleteAttributoOutputDecoder : Json.Decode.Decoder JsonDeleteAttributoOutput
jsonDeleteAttributoOutputDecoder =
    Json.Decode.succeed JsonDeleteAttributoOutput
        |> decode "id" Json.Decode.int 


jsonDeleteChemicalInputDecoder : Json.Decode.Decoder JsonDeleteChemicalInput
jsonDeleteChemicalInputDecoder =
    Json.Decode.succeed JsonDeleteChemicalInput
        |> decode "id" Json.Decode.int 


jsonDeleteChemicalOutputDecoder : Json.Decode.Decoder JsonDeleteChemicalOutput
jsonDeleteChemicalOutputDecoder =
    Json.Decode.succeed JsonDeleteChemicalOutput
        |> decode "id" Json.Decode.int 


jsonDeleteDataSetInputDecoder : Json.Decode.Decoder JsonDeleteDataSetInput
jsonDeleteDataSetInputDecoder =
    Json.Decode.succeed JsonDeleteDataSetInput
        |> decode "id" Json.Decode.int 


jsonDeleteDataSetOutputDecoder : Json.Decode.Decoder JsonDeleteDataSetOutput
jsonDeleteDataSetOutputDecoder =
    Json.Decode.succeed JsonDeleteDataSetOutput
        |> decode "result" Json.Decode.bool 


jsonDeleteEventInputDecoder : Json.Decode.Decoder JsonDeleteEventInput
jsonDeleteEventInputDecoder =
    Json.Decode.succeed JsonDeleteEventInput
        |> decode "id" Json.Decode.int 


jsonDeleteEventOutputDecoder : Json.Decode.Decoder JsonDeleteEventOutput
jsonDeleteEventOutputDecoder =
    Json.Decode.succeed JsonDeleteEventOutput
        |> decode "result" Json.Decode.bool 


jsonDeleteExperimentTypeDecoder : Json.Decode.Decoder JsonDeleteExperimentType
jsonDeleteExperimentTypeDecoder =
    Json.Decode.succeed JsonDeleteExperimentType
        |> decode "id" Json.Decode.int 


jsonDeleteExperimentTypeOutputDecoder : Json.Decode.Decoder JsonDeleteExperimentTypeOutput
jsonDeleteExperimentTypeOutputDecoder =
    Json.Decode.succeed JsonDeleteExperimentTypeOutput
        |> decode "result" Json.Decode.bool 


jsonDeleteFileInputDecoder : Json.Decode.Decoder JsonDeleteFileInput
jsonDeleteFileInputDecoder =
    Json.Decode.succeed JsonDeleteFileInput
        |> decode "id" Json.Decode.int 


jsonDeleteFileOutputDecoder : Json.Decode.Decoder JsonDeleteFileOutput
jsonDeleteFileOutputDecoder =
    Json.Decode.succeed JsonDeleteFileOutput
        |> decode "id" Json.Decode.int 


jsonDeleteRunOutputDecoder : Json.Decode.Decoder JsonDeleteRunOutput
jsonDeleteRunOutputDecoder =
    Json.Decode.succeed JsonDeleteRunOutput
        |> decode "result" Json.Decode.bool 


jsonDetectorShiftDecoder : Json.Decode.Decoder JsonDetectorShift
jsonDetectorShiftDecoder =
    Json.Decode.succeed JsonDetectorShift
        |> decode "run_external_id" Json.Decode.int 
        |> decode "run_start" Json.Decode.int 
        |> maybeDecode "run_end" Json.Decode.int Nothing
        |> decode "shift_x_mm" Json.Decode.float 
        |> decode "shift_y_mm" Json.Decode.float 
        |> decode "geometry_hash" Json.Decode.string 


jsonEventDecoder : Json.Decode.Decoder JsonEvent
jsonEventDecoder =
    Json.Decode.succeed JsonEvent
        |> decode "id" Json.Decode.int 
        |> decode "source" Json.Decode.string 
        |> decode "text" Json.Decode.string 
        |> decode "created" Json.Decode.int 
        |> decode "level" Json.Decode.string 
        |> decode "files" (Json.Decode.list jsonFileOutputDecoder) 


jsonEventInputDecoder : Json.Decode.Decoder JsonEventInput
jsonEventInputDecoder =
    Json.Decode.succeed JsonEventInput
        |> decode "source" Json.Decode.string 
        |> decode "text" Json.Decode.string 
        |> decode "level" Json.Decode.string 
        |> decode "file_ids" (Json.Decode.list Json.Decode.int) 


jsonEventTopLevelInputDecoder : Json.Decode.Decoder JsonEventTopLevelInput
jsonEventTopLevelInputDecoder =
    Json.Decode.succeed JsonEventTopLevelInput
        |> decode "beamtime_id" Json.Decode.int 
        |> decode "event" jsonEventInputDecoder 
        |> decode "with_live_stream" Json.Decode.bool 


jsonEventTopLevelOutputDecoder : Json.Decode.Decoder JsonEventTopLevelOutput
jsonEventTopLevelOutputDecoder =
    Json.Decode.succeed JsonEventTopLevelOutput
        |> decode "id" Json.Decode.int 


jsonExperimentTypeDecoder : Json.Decode.Decoder JsonExperimentType
jsonExperimentTypeDecoder =
    Json.Decode.succeed JsonExperimentType
        |> decode "id" Json.Decode.int 
        |> decode "name" Json.Decode.string 
        |> decode "attributi" (Json.Decode.list jsonAttributiIdAndRoleDecoder) 


jsonExperimentTypeAndRunsDecoder : Json.Decode.Decoder JsonExperimentTypeAndRuns
jsonExperimentTypeAndRunsDecoder =
    Json.Decode.succeed JsonExperimentTypeAndRuns
        |> decode "id" Json.Decode.int 
        |> decode "runs" (Json.Decode.list Json.Decode.string) 
        |> decode "number_of_runs" Json.Decode.int 


jsonExperimentTypeWithBeamtimeInformationDecoder : Json.Decode.Decoder JsonExperimentTypeWithBeamtimeInformation
jsonExperimentTypeWithBeamtimeInformationDecoder =
    Json.Decode.succeed JsonExperimentTypeWithBeamtimeInformation
        |> decode "experiment_type" jsonExperimentTypeDecoder 
        |> decode "beamtime" jsonBeamtimeDecoder 


jsonFileOutputDecoder : Json.Decode.Decoder JsonFileOutput
jsonFileOutputDecoder =
    Json.Decode.succeed JsonFileOutput
        |> decode "id" Json.Decode.int 
        |> decode "description" Json.Decode.string 
        |> decode "type_" Json.Decode.string 
        |> maybeDecode "original_path" Json.Decode.string Nothing
        |> decode "file_name" Json.Decode.string 
        |> decode "size_in_bytes" Json.Decode.int 


jsonImportFinishedIndexingJobInputDecoder : Json.Decode.Decoder JsonImportFinishedIndexingJobInput
jsonImportFinishedIndexingJobInputDecoder =
    Json.Decode.succeed JsonImportFinishedIndexingJobInput
        |> decode "is_online" Json.Decode.bool 
        |> decode "cell_description" Json.Decode.string 
        |> decode "command_line" Json.Decode.string 
        |> decode "source" Json.Decode.string 
        |> decode "run_internal_id" Json.Decode.int 
        |> decode "stream_file" Json.Decode.string 
        |> decode "program_version" Json.Decode.string 
        |> decode "frames" Json.Decode.int 
        |> decode "hits" Json.Decode.int 
        |> decode "indexed_frames" Json.Decode.int 
        |> maybeDecode "detector_shift_x_mm" Json.Decode.float Nothing
        |> maybeDecode "detector_shift_y_mm" Json.Decode.float Nothing
        |> decode "geometry_file" Json.Decode.string 
        |> decode "geometry_hash" Json.Decode.string 
        |> maybeDecode "generated_geometry_file" Json.Decode.string Nothing
        |> decode "job_log" Json.Decode.string 


jsonImportFinishedIndexingJobOutputDecoder : Json.Decode.Decoder JsonImportFinishedIndexingJobOutput
jsonImportFinishedIndexingJobOutputDecoder =
    Json.Decode.succeed JsonImportFinishedIndexingJobOutput
        |> decode "indexing_result_id" Json.Decode.int 


jsonIndexingFomDecoder : Json.Decode.Decoder JsonIndexingFom
jsonIndexingFomDecoder =
    Json.Decode.succeed JsonIndexingFom
        |> decode "hit_rate" Json.Decode.float 
        |> decode "indexing_rate" Json.Decode.float 
        |> decode "indexed_frames" Json.Decode.int 
        |> maybeDecode "detector_shift_x_mm" Json.Decode.float Nothing
        |> maybeDecode "detector_shift_y_mm" Json.Decode.float Nothing


jsonIndexingJobDecoder : Json.Decode.Decoder JsonIndexingJob
jsonIndexingJobDecoder =
    Json.Decode.succeed JsonIndexingJob
        |> decode "id" Json.Decode.int 
        |> maybeDecode "job_id" Json.Decode.int Nothing
        |> decode "job_status" dBJobStatusDecoder 
        |> maybeDecode "started" Json.Decode.int Nothing
        |> maybeDecode "stopped" Json.Decode.int Nothing
        |> decode "is_online" Json.Decode.bool 
        |> maybeDecode "stream_file" Json.Decode.string Nothing
        |> decode "source" Json.Decode.string 
        |> maybeDecode "cell_description" Json.Decode.string Nothing
        |> decode "geometry_file_input" Json.Decode.string 
        |> decode "geometry_file_output" Json.Decode.string 
        |> decode "command_line" Json.Decode.string 
        |> decode "run_internal_id" Json.Decode.int 
        |> decode "run_external_id" Json.Decode.int 
        |> decode "beamtime" jsonBeamtimeDecoder 
        |> decode "input_file_globs" (Json.Decode.list Json.Decode.string) 


jsonIndexingJobUpdateOutputDecoder : Json.Decode.Decoder JsonIndexingJobUpdateOutput
jsonIndexingJobUpdateOutputDecoder =
    Json.Decode.succeed JsonIndexingJobUpdateOutput
        |> decode "result" Json.Decode.bool 


jsonIndexingParametersDecoder : Json.Decode.Decoder JsonIndexingParameters
jsonIndexingParametersDecoder =
    Json.Decode.succeed JsonIndexingParameters
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "cell_description" Json.Decode.string Nothing
        |> decode "is_online" Json.Decode.bool 
        |> decode "command_line" Json.Decode.string 
        |> decode "geometry_file" Json.Decode.string 


jsonIndexingParametersWithResultsDecoder : Json.Decode.Decoder JsonIndexingParametersWithResults
jsonIndexingParametersWithResultsDecoder =
    Json.Decode.succeed JsonIndexingParametersWithResults
        |> decode "parameters" jsonIndexingParametersDecoder 
        |> decode "indexing_results" (Json.Decode.list jsonIndexingResultDecoder) 
        |> decode "merge_results" (Json.Decode.list jsonMergeResultDecoder) 


jsonIndexingResultDecoder : Json.Decode.Decoder JsonIndexingResult
jsonIndexingResultDecoder =
    Json.Decode.succeed JsonIndexingResult
        |> decode "id" Json.Decode.int 
        |> decode "created" Json.Decode.int 
        |> maybeDecode "started" Json.Decode.int Nothing
        |> maybeDecode "stopped" Json.Decode.int Nothing
        |> decode "parameters" jsonIndexingParametersDecoder 
        |> decode "stream_file" Json.Decode.string 
        |> decode "program_version" Json.Decode.string 
        |> decode "run_internal_id" Json.Decode.int 
        |> decode "run_external_id" Json.Decode.int 
        |> decode "frames" Json.Decode.int 
        |> decode "hits" Json.Decode.int 
        |> decode "indexed_frames" Json.Decode.int 
        |> decode "indexed_crystals" Json.Decode.int 
        |> decode "status" dBJobStatusDecoder 
        |> maybeDecode "detector_shift_x_mm" Json.Decode.float Nothing
        |> maybeDecode "detector_shift_y_mm" Json.Decode.float Nothing
        |> decode "geometry_file" Json.Decode.string 
        |> decode "geometry_hash" Json.Decode.string 
        |> decode "generated_geometry_file" Json.Decode.string 
        |> maybeDecode "unit_cell_histograms_file_id" Json.Decode.int Nothing
        |> decode "has_error" Json.Decode.bool 


jsonIndexingResultFinishSuccessfullyDecoder : Json.Decode.Decoder JsonIndexingResultFinishSuccessfully
jsonIndexingResultFinishSuccessfullyDecoder =
    Json.Decode.succeed JsonIndexingResultFinishSuccessfully
        |> decode "workload_manager_job_id" Json.Decode.int 
        |> decode "stream_file" Json.Decode.string 
        |> decode "program_version" Json.Decode.string 
        |> decode "frames" Json.Decode.int 
        |> decode "hits" Json.Decode.int 
        |> decode "indexed_frames" Json.Decode.int 
        |> decode "indexed_crystals" Json.Decode.int 
        |> maybeDecode "detector_shift_x_mm" Json.Decode.float Nothing
        |> maybeDecode "detector_shift_y_mm" Json.Decode.float Nothing
        |> decode "geometry_file" Json.Decode.string 
        |> decode "geometry_hash" Json.Decode.string 
        |> decode "generated_geometry_file" Json.Decode.string 
        |> maybeDecode "unit_cell_histograms_id" Json.Decode.int Nothing
        |> maybeDecode "latest_log" Json.Decode.string Nothing


jsonIndexingResultFinishWithErrorDecoder : Json.Decode.Decoder JsonIndexingResultFinishWithError
jsonIndexingResultFinishWithErrorDecoder =
    Json.Decode.succeed JsonIndexingResultFinishWithError
        |> decode "error_message" Json.Decode.string 
        |> decode "latest_log" Json.Decode.string 
        |> maybeDecode "workload_manager_job_id" Json.Decode.int Nothing


jsonIndexingResultStillRunningDecoder : Json.Decode.Decoder JsonIndexingResultStillRunning
jsonIndexingResultStillRunningDecoder =
    Json.Decode.succeed JsonIndexingResultStillRunning
        |> decode "workload_manager_job_id" Json.Decode.int 
        |> decode "stream_file" Json.Decode.string 
        |> decode "frames" Json.Decode.int 
        |> decode "hits" Json.Decode.int 
        |> decode "indexed_frames" Json.Decode.int 
        |> decode "indexed_crystals" Json.Decode.int 
        |> maybeDecode "detector_shift_x_mm" Json.Decode.float Nothing
        |> maybeDecode "detector_shift_y_mm" Json.Decode.float Nothing
        |> decode "geometry_file" Json.Decode.string 
        |> decode "geometry_hash" Json.Decode.string 
        |> maybeDecode "job_started" Json.Decode.int Nothing
        |> maybeDecode "latest_log" Json.Decode.string Nothing


jsonIndexingStatisticDecoder : Json.Decode.Decoder JsonIndexingStatistic
jsonIndexingStatisticDecoder =
    Json.Decode.succeed JsonIndexingStatistic
        |> decode "time" Json.Decode.int 
        |> decode "frames" Json.Decode.int 
        |> decode "hits" Json.Decode.int 
        |> decode "indexed" Json.Decode.int 
        |> decode "crystals" Json.Decode.int 


jsonLiveStreamDecoder : Json.Decode.Decoder JsonLiveStream
jsonLiveStreamDecoder =
    Json.Decode.succeed JsonLiveStream
        |> decode "file_id" Json.Decode.int 
        |> decode "modified" Json.Decode.int 


jsonMergeJobDecoder : Json.Decode.Decoder JsonMergeJob
jsonMergeJobDecoder =
    Json.Decode.succeed JsonMergeJob
        |> decode "id" Json.Decode.int 
        |> maybeDecode "job_id" Json.Decode.int Nothing
        |> decode "job_status" dBJobStatusDecoder 
        |> decode "parameters" jsonMergeParametersDecoder 
        |> decode "indexing_results" (Json.Decode.list jsonIndexingJobDecoder) 
        |> decode "files_from_indexing" (Json.Decode.list jsonFileOutputDecoder) 
        |> decode "point_group" Json.Decode.string 
        |> decode "cell_description" Json.Decode.string 


jsonMergeJobFinishOutputDecoder : Json.Decode.Decoder JsonMergeJobFinishOutput
jsonMergeJobFinishOutputDecoder =
    Json.Decode.succeed JsonMergeJobFinishOutput
        |> decode "result" Json.Decode.bool 


jsonMergeJobFinishedInputDecoder : Json.Decode.Decoder JsonMergeJobFinishedInput
jsonMergeJobFinishedInputDecoder =
    Json.Decode.succeed JsonMergeJobFinishedInput
        |> maybeDecode "latest_log" Json.Decode.string Nothing
        |> maybeDecode "error" Json.Decode.string Nothing
        |> maybeDecode "result" jsonMergeResultInternalDecoder Nothing


jsonMergeJobStartedInputDecoder : Json.Decode.Decoder JsonMergeJobStartedInput
jsonMergeJobStartedInputDecoder =
    Json.Decode.succeed JsonMergeJobStartedInput
        |> decode "job_id" Json.Decode.int 
        |> decode "time" Json.Decode.int 


jsonMergeJobStartedOutputDecoder : Json.Decode.Decoder JsonMergeJobStartedOutput
jsonMergeJobStartedOutputDecoder =
    Json.Decode.succeed JsonMergeJobStartedOutput
        |> decode "time" Json.Decode.int 


jsonMergeParametersDecoder : Json.Decode.Decoder JsonMergeParameters
jsonMergeParametersDecoder =
    Json.Decode.succeed JsonMergeParameters
        |> decode "point_group" Json.Decode.string 
        |> maybeDecode "space_group" Json.Decode.string Nothing
        |> decode "cell_description" Json.Decode.string 
        |> maybeDecode "negative_handling" mergeNegativeHandlingDecoder Nothing
        |> decode "merge_model" mergeModelDecoder 
        |> decode "scale_intensities" scaleIntensitiesDecoder 
        |> decode "post_refinement" Json.Decode.bool 
        |> decode "iterations" Json.Decode.int 
        |> maybeDecode "polarisation" jsonPolarisationDecoder Nothing
        |> maybeDecode "start_after" Json.Decode.int Nothing
        |> maybeDecode "stop_after" Json.Decode.int Nothing
        |> decode "rel_b" Json.Decode.float 
        |> decode "no_pr" Json.Decode.bool 
        |> maybeDecode "force_bandwidth" Json.Decode.float Nothing
        |> maybeDecode "force_radius" Json.Decode.float Nothing
        |> maybeDecode "force_lambda" Json.Decode.float Nothing
        |> decode "no_delta_cc_half" Json.Decode.bool 
        |> maybeDecode "max_adu" Json.Decode.float Nothing
        |> decode "min_measurements" Json.Decode.int 
        |> decode "logs" Json.Decode.bool 
        |> maybeDecode "min_res" Json.Decode.float Nothing
        |> maybeDecode "push_res" Json.Decode.float Nothing
        |> maybeDecode "w" Json.Decode.string Nothing
        |> decode "ambigator_command_line" Json.Decode.string 


jsonMergeResultDecoder : Json.Decode.Decoder JsonMergeResult
jsonMergeResultDecoder =
    Json.Decode.succeed JsonMergeResult
        |> decode "id" Json.Decode.int 
        |> decode "created" Json.Decode.int 
        |> decode "runs" (Json.Decode.list Json.Decode.string) 
        |> decode "indexing_result_ids" (Json.Decode.list Json.Decode.int) 
        |> maybeDecode "state_queued" jsonMergeResultStateQueuedDecoder Nothing
        |> maybeDecode "state_error" jsonMergeResultStateErrorDecoder Nothing
        |> maybeDecode "state_running" jsonMergeResultStateRunningDecoder Nothing
        |> maybeDecode "state_done" jsonMergeResultStateDoneDecoder Nothing
        |> decode "parameters" jsonMergeParametersDecoder 
        |> decode "refinement_results" (Json.Decode.list jsonRefinementResultDecoder) 


jsonMergeResultFomDecoder : Json.Decode.Decoder JsonMergeResultFom
jsonMergeResultFomDecoder =
    Json.Decode.succeed JsonMergeResultFom
        |> decode "snr" Json.Decode.float 
        |> maybeDecode "wilson" Json.Decode.float Nothing
        |> maybeDecode "ln_k" Json.Decode.float Nothing
        |> decode "discarded_reflections" Json.Decode.int 
        |> decode "one_over_d_from" Json.Decode.float 
        |> decode "one_over_d_to" Json.Decode.float 
        |> decode "redundancy" Json.Decode.float 
        |> decode "completeness" Json.Decode.float 
        |> decode "measurements_total" Json.Decode.int 
        |> decode "reflections_total" Json.Decode.int 
        |> decode "reflections_possible" Json.Decode.int 
        |> decode "r_split" Json.Decode.float 
        |> decode "r1i" Json.Decode.float 
        |> decode "r2" Json.Decode.float 
        |> decode "cc" Json.Decode.float 
        |> decode "ccstar" Json.Decode.float 
        |> maybeDecode "ccano" Json.Decode.float Nothing
        |> maybeDecode "crdano" Json.Decode.float Nothing
        |> maybeDecode "rano" Json.Decode.float Nothing
        |> maybeDecode "rano_over_r_split" Json.Decode.float Nothing
        |> decode "d1sig" Json.Decode.float 
        |> decode "d2sig" Json.Decode.float 
        |> decode "outer_shell" jsonMergeResultOuterShellDecoder 


jsonMergeResultInternalDecoder : Json.Decode.Decoder JsonMergeResultInternal
jsonMergeResultInternalDecoder =
    Json.Decode.succeed JsonMergeResultInternal
        |> decode "mtz_file_id" Json.Decode.int 
        |> decode "fom" jsonMergeResultFomDecoder 
        |> maybeDecode "ambigator_fg_graph_file_id" Json.Decode.int Nothing
        |> decode "detailed_foms" (Json.Decode.list jsonMergeResultShellDecoder) 
        |> decode "refinement_results" (Json.Decode.list jsonRefinementResultInternalDecoder) 


jsonMergeResultOuterShellDecoder : Json.Decode.Decoder JsonMergeResultOuterShell
jsonMergeResultOuterShellDecoder =
    Json.Decode.succeed JsonMergeResultOuterShell
        |> decode "resolution" Json.Decode.float 
        |> decode "ccstar" Json.Decode.float 
        |> decode "r_split" Json.Decode.float 
        |> decode "cc" Json.Decode.float 
        |> decode "unique_reflections" Json.Decode.int 
        |> decode "completeness" Json.Decode.float 
        |> decode "redundancy" Json.Decode.float 
        |> decode "snr" Json.Decode.float 
        |> decode "min_res" Json.Decode.float 
        |> decode "max_res" Json.Decode.float 


jsonMergeResultShellDecoder : Json.Decode.Decoder JsonMergeResultShell
jsonMergeResultShellDecoder =
    Json.Decode.succeed JsonMergeResultShell
        |> decode "one_over_d_centre" Json.Decode.float 
        |> decode "nref" Json.Decode.int 
        |> decode "d_over_a" Json.Decode.float 
        |> decode "min_res" Json.Decode.float 
        |> decode "max_res" Json.Decode.float 
        |> decode "cc" Json.Decode.float 
        |> decode "ccstar" Json.Decode.float 
        |> decode "r_split" Json.Decode.float 
        |> decode "reflections_possible" Json.Decode.int 
        |> decode "completeness" Json.Decode.float 
        |> decode "measurements" Json.Decode.int 
        |> decode "redundancy" Json.Decode.float 
        |> decode "snr" Json.Decode.float 
        |> decode "mean_i" Json.Decode.float 


jsonMergeResultStateDoneDecoder : Json.Decode.Decoder JsonMergeResultStateDone
jsonMergeResultStateDoneDecoder =
    Json.Decode.succeed JsonMergeResultStateDone
        |> decode "started" Json.Decode.int 
        |> decode "stopped" Json.Decode.int 
        |> decode "result" jsonMergeResultInternalDecoder 


jsonMergeResultStateErrorDecoder : Json.Decode.Decoder JsonMergeResultStateError
jsonMergeResultStateErrorDecoder =
    Json.Decode.succeed JsonMergeResultStateError
        |> decode "started" Json.Decode.int 
        |> decode "stopped" Json.Decode.int 
        |> decode "error" Json.Decode.string 
        |> decode "latest_log" Json.Decode.string 


jsonMergeResultStateQueuedDecoder : Json.Decode.Decoder JsonMergeResultStateQueued
jsonMergeResultStateQueuedDecoder =
    Json.Decode.succeed JsonMergeResultStateQueued
        |> decode "queued" Json.Decode.bool 


jsonMergeResultStateRunningDecoder : Json.Decode.Decoder JsonMergeResultStateRunning
jsonMergeResultStateRunningDecoder =
    Json.Decode.succeed JsonMergeResultStateRunning
        |> decode "started" Json.Decode.int 
        |> decode "job_id" Json.Decode.int 
        |> decode "latest_log" Json.Decode.string 


jsonMergeStatusDecoder : Json.Decode.Decoder JsonMergeStatus
jsonMergeStatusDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "both" ->
                        Json.Decode.succeed JsonMergeStatusBoth

                    "unmerged" ->
                        Json.Decode.succeed JsonMergeStatusUnmerged

                    "merged" ->
                        Json.Decode.succeed JsonMergeStatusMerged

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


jsonPolarisationDecoder : Json.Decode.Decoder JsonPolarisation
jsonPolarisationDecoder =
    Json.Decode.succeed JsonPolarisation
        |> decode "angle" Json.Decode.int 
        |> decode "percent" Json.Decode.int 


jsonQueueMergeJobInputDecoder : Json.Decode.Decoder JsonQueueMergeJobInput
jsonQueueMergeJobInputDecoder =
    Json.Decode.succeed JsonQueueMergeJobInput
        |> decode "strict_mode" Json.Decode.bool 
        |> decode "indexing_parameters_id" Json.Decode.int 
        |> decode "data_set_id" Json.Decode.int 
        |> decode "merge_parameters" jsonMergeParametersDecoder 


jsonQueueMergeJobOutputDecoder : Json.Decode.Decoder JsonQueueMergeJobOutput
jsonQueueMergeJobOutputDecoder =
    Json.Decode.succeed JsonQueueMergeJobOutput
        |> decode "merge_result_id" Json.Decode.int 


jsonReadAllChemicalsDecoder : Json.Decode.Decoder JsonReadAllChemicals
jsonReadAllChemicalsDecoder =
    Json.Decode.succeed JsonReadAllChemicals
        |> decode "chemicals" (Json.Decode.list jsonChemicalDecoder) 
        |> decode "beamtimes" (Json.Decode.list jsonBeamtimeDecoder) 
        |> decode "attributi_names" (Json.Decode.list jsonAttributoWithNameDecoder) 


jsonReadAttributiDecoder : Json.Decode.Decoder JsonReadAttributi
jsonReadAttributiDecoder =
    Json.Decode.succeed JsonReadAttributi
        |> decode "attributi" (Json.Decode.list jsonAttributoDecoder) 


jsonReadBeamtimeDecoder : Json.Decode.Decoder JsonReadBeamtime
jsonReadBeamtimeDecoder =
    Json.Decode.succeed JsonReadBeamtime
        |> decode "beamtimes" (Json.Decode.list jsonBeamtimeDecoder) 


jsonReadBeamtimeGeometryDetailsDecoder : Json.Decode.Decoder JsonReadBeamtimeGeometryDetails
jsonReadBeamtimeGeometryDetailsDecoder =
    Json.Decode.succeed JsonReadBeamtimeGeometryDetails
        |> decode "detector_shifts" (Json.Decode.list jsonDetectorShiftDecoder) 


jsonReadChemicalsDecoder : Json.Decode.Decoder JsonReadChemicals
jsonReadChemicalsDecoder =
    Json.Decode.succeed JsonReadChemicals
        |> decode "chemicals" (Json.Decode.list jsonChemicalDecoder) 
        |> decode "attributi" (Json.Decode.list jsonAttributoDecoder) 


jsonReadDataSetsDecoder : Json.Decode.Decoder JsonReadDataSets
jsonReadDataSetsDecoder =
    Json.Decode.succeed JsonReadDataSets
        |> decode "data_sets" (Json.Decode.list jsonDataSetDecoder) 
        |> decode "chemicals" (Json.Decode.list jsonChemicalDecoder) 
        |> decode "attributi" (Json.Decode.list jsonAttributoDecoder) 
        |> decode "experiment_types" (Json.Decode.list jsonExperimentTypeDecoder) 


jsonReadEventsDecoder : Json.Decode.Decoder JsonReadEvents
jsonReadEventsDecoder =
    Json.Decode.succeed JsonReadEvents
        |> decode "events" (Json.Decode.list jsonEventDecoder) 
        |> decode "filter_dates" (Json.Decode.list Json.Decode.string) 


jsonReadExperimentTypesDecoder : Json.Decode.Decoder JsonReadExperimentTypes
jsonReadExperimentTypesDecoder =
    Json.Decode.succeed JsonReadExperimentTypes
        |> decode "experiment_types" (Json.Decode.list jsonExperimentTypeDecoder) 
        |> decode "attributi" (Json.Decode.list jsonAttributoDecoder) 
        |> decode "experiment_type_id_to_run" (Json.Decode.list jsonExperimentTypeAndRunsDecoder) 
        |> maybeDecode "current_experiment_type_id" Json.Decode.int Nothing


jsonReadIndexingParametersOutputDecoder : Json.Decode.Decoder JsonReadIndexingParametersOutput
jsonReadIndexingParametersOutputDecoder =
    Json.Decode.succeed JsonReadIndexingParametersOutput
        |> decode "data_set_id" Json.Decode.int 
        |> decode "cell_description" Json.Decode.string 
        |> decode "sources" (Json.Decode.list Json.Decode.string) 


jsonReadIndexingResultsOutputDecoder : Json.Decode.Decoder JsonReadIndexingResultsOutput
jsonReadIndexingResultsOutputDecoder =
    Json.Decode.succeed JsonReadIndexingResultsOutput
        |> decode "indexing_jobs" (Json.Decode.list jsonIndexingJobDecoder) 


jsonReadMergeResultsOutputDecoder : Json.Decode.Decoder JsonReadMergeResultsOutput
jsonReadMergeResultsOutputDecoder =
    Json.Decode.succeed JsonReadMergeResultsOutput
        |> decode "merge_jobs" (Json.Decode.list jsonMergeJobDecoder) 


jsonReadNewAnalysisInputDecoder : Json.Decode.Decoder JsonReadNewAnalysisInput
jsonReadNewAnalysisInputDecoder =
    Json.Decode.succeed JsonReadNewAnalysisInput
        |> decode "attributi_filter" (Json.Decode.list jsonAttributoValueDecoder) 
        |> maybeDecode "beamtime_id" Json.Decode.int Nothing
        |> decode "merge_status" jsonMergeStatusDecoder 


jsonReadNewAnalysisOutputDecoder : Json.Decode.Decoder JsonReadNewAnalysisOutput
jsonReadNewAnalysisOutputDecoder =
    Json.Decode.succeed JsonReadNewAnalysisOutput
        |> decode "searchable_attributi" (Json.Decode.list jsonAttributoDecoder) 
        |> decode "attributi" (Json.Decode.list jsonAttributoDecoder) 
        |> decode "chemical_id_to_name" (Json.Decode.list jsonChemicalIdAndNameDecoder) 
        |> decode "experiment_types" (Json.Decode.list jsonExperimentTypeWithBeamtimeInformationDecoder) 
        |> decode "filtered_data_sets" (Json.Decode.list jsonDataSetDecoder) 
        |> decode "data_set_statistics" (Json.Decode.list jsonDataSetStatisticsDecoder) 
        |> decode "attributi_values" (Json.Decode.list jsonAttributoValueDecoder) 


jsonReadRunAnalysisDecoder : Json.Decode.Decoder JsonReadRunAnalysis
jsonReadRunAnalysisDecoder =
    Json.Decode.succeed JsonReadRunAnalysis
        |> decode "chemicals" (Json.Decode.list jsonChemicalDecoder) 
        |> decode "attributi" (Json.Decode.list jsonAttributoDecoder) 
        |> maybeDecode "run" jsonAnalysisRunDecoder Nothing
        |> decode "run_ids" (Json.Decode.list jsonRunIdDecoder) 
        |> decode "indexing_results" (Json.Decode.list jsonRunAnalysisIndexingResultDecoder) 


jsonReadRunsDecoder : Json.Decode.Decoder JsonReadRuns
jsonReadRunsDecoder =
    Json.Decode.succeed JsonReadRuns
        |> decode "filter_dates" (Json.Decode.list Json.Decode.string) 
        |> decode "runs" (Json.Decode.list jsonRunDecoder) 
        |> decode "attributi" (Json.Decode.list jsonAttributoDecoder) 
        |> decode "experiment_types" (Json.Decode.list jsonExperimentTypeDecoder) 
        |> decode "events" (Json.Decode.list jsonEventDecoder) 
        |> decode "chemicals" (Json.Decode.list jsonChemicalDecoder) 


jsonReadRunsBulkInputDecoder : Json.Decode.Decoder JsonReadRunsBulkInput
jsonReadRunsBulkInputDecoder =
    Json.Decode.succeed JsonReadRunsBulkInput
        |> decode "beamtime_id" Json.Decode.int 
        |> decode "external_run_ids" (Json.Decode.list Json.Decode.int) 


jsonReadRunsBulkOutputDecoder : Json.Decode.Decoder JsonReadRunsBulkOutput
jsonReadRunsBulkOutputDecoder =
    Json.Decode.succeed JsonReadRunsBulkOutput
        |> decode "chemicals" (Json.Decode.list jsonChemicalDecoder) 
        |> decode "attributi" (Json.Decode.list jsonAttributoDecoder) 
        |> decode "attributi_values" (Json.Decode.list jsonAttributoBulkValueDecoder) 
        |> decode "experiment_types" (Json.Decode.list jsonExperimentTypeDecoder) 
        |> decode "experiment_type_ids" (Json.Decode.list Json.Decode.int) 


jsonReadRunsOverviewDecoder : Json.Decode.Decoder JsonReadRunsOverview
jsonReadRunsOverviewDecoder =
    Json.Decode.succeed JsonReadRunsOverview
        |> maybeDecode "live_stream" jsonLiveStreamDecoder Nothing
        |> decode "attributi" (Json.Decode.list jsonAttributoDecoder) 
        |> maybeDecode "latest_indexing_result" jsonRunAnalysisIndexingResultDecoder Nothing
        |> maybeDecode "latest_run" jsonRunDecoder Nothing
        |> maybeDecode "foms_for_this_data_set" jsonDataSetWithFomDecoder Nothing
        |> decode "experiment_types" (Json.Decode.list jsonExperimentTypeDecoder) 
        |> decode "events" (Json.Decode.list jsonEventDecoder) 
        |> decode "chemicals" (Json.Decode.list jsonChemicalDecoder) 
        |> decode "user_config" jsonUserConfigDecoder 
        |> maybeDecode "current_beamtime_user" Json.Decode.string Nothing


jsonReadSingleDataSetResultsDecoder : Json.Decode.Decoder JsonReadSingleDataSetResults
jsonReadSingleDataSetResultsDecoder =
    Json.Decode.succeed JsonReadSingleDataSetResults
        |> decode "attributi" (Json.Decode.list jsonAttributoDecoder) 
        |> decode "chemical_id_to_name" (Json.Decode.list jsonChemicalIdAndNameDecoder) 
        |> decode "experiment_type" jsonExperimentTypeDecoder 
        |> decode "data_set" jsonDataSetWithIndexingResultsDecoder 


jsonReadSingleMergeResultDecoder : Json.Decode.Decoder JsonReadSingleMergeResult
jsonReadSingleMergeResultDecoder =
    Json.Decode.succeed JsonReadSingleMergeResult
        |> decode "experiment_type" jsonExperimentTypeDecoder 
        |> decode "result" jsonMergeResultDecoder 


jsonRefinementResultDecoder : Json.Decode.Decoder JsonRefinementResult
jsonRefinementResultDecoder =
    Json.Decode.succeed JsonRefinementResult
        |> decode "id" Json.Decode.int 
        |> decode "merge_result_id" Json.Decode.int 
        |> decode "pdb_file_id" Json.Decode.int 
        |> decode "mtz_file_id" Json.Decode.int 
        |> decode "r_free" Json.Decode.float 
        |> decode "r_work" Json.Decode.float 
        |> decode "rms_bond_angle" Json.Decode.float 
        |> decode "rms_bond_length" Json.Decode.float 


jsonRefinementResultInternalDecoder : Json.Decode.Decoder JsonRefinementResultInternal
jsonRefinementResultInternalDecoder =
    Json.Decode.succeed JsonRefinementResultInternal
        |> maybeDecode "id" Json.Decode.int Nothing
        |> decode "pdb_file_id" Json.Decode.int 
        |> decode "mtz_file_id" Json.Decode.int 
        |> decode "r_free" Json.Decode.float 
        |> decode "r_work" Json.Decode.float 
        |> decode "rms_bond_angle" Json.Decode.float 
        |> decode "rms_bond_length" Json.Decode.float 


jsonRunDecoder : Json.Decode.Decoder JsonRun
jsonRunDecoder =
    Json.Decode.succeed JsonRun
        |> decode "id" Json.Decode.int 
        |> decode "external_id" Json.Decode.int 
        |> decode "attributi" (Json.Decode.list jsonAttributoValueDecoder) 
        |> decode "started" Json.Decode.int 
        |> maybeDecode "stopped" Json.Decode.int Nothing
        |> decode "files" (Json.Decode.list jsonRunFileDecoder) 
        |> decode "summary" jsonIndexingFomDecoder 
        |> decode "experiment_type_id" Json.Decode.int 


jsonRunAnalysisIndexingResultDecoder : Json.Decode.Decoder JsonRunAnalysisIndexingResult
jsonRunAnalysisIndexingResultDecoder =
    Json.Decode.succeed JsonRunAnalysisIndexingResult
        |> decode "run_id" Json.Decode.int 
        |> decode "foms" jsonIndexingFomDecoder 
        |> decode "indexing_statistics" (Json.Decode.list jsonIndexingStatisticDecoder) 
        |> decode "running" Json.Decode.bool 
        |> maybeDecode "frames" Json.Decode.int Nothing
        |> maybeDecode "total_frames" Json.Decode.int Nothing


jsonRunFileDecoder : Json.Decode.Decoder JsonRunFile
jsonRunFileDecoder =
    Json.Decode.succeed JsonRunFile
        |> decode "id" Json.Decode.int 
        |> decode "glob" Json.Decode.string 
        |> decode "source" Json.Decode.string 


jsonRunIdDecoder : Json.Decode.Decoder JsonRunId
jsonRunIdDecoder =
    Json.Decode.succeed JsonRunId
        |> decode "internal_run_id" Json.Decode.int 
        |> decode "external_run_id" Json.Decode.int 


jsonRunRangeDecoder : Json.Decode.Decoder JsonRunRange
jsonRunRangeDecoder =
    Json.Decode.succeed JsonRunRange
        |> decode "run_from" Json.Decode.int 
        |> decode "run_to" Json.Decode.int 


jsonRunsBulkImportInfoDecoder : Json.Decode.Decoder JsonRunsBulkImportInfo
jsonRunsBulkImportInfoDecoder =
    Json.Decode.succeed JsonRunsBulkImportInfo
        |> decode "run_attributi" (Json.Decode.list jsonAttributoDecoder) 
        |> decode "experiment_types" (Json.Decode.list Json.Decode.string) 
        |> decode "chemicals" (Json.Decode.list jsonChemicalDecoder) 


jsonRunsBulkImportOutputDecoder : Json.Decode.Decoder JsonRunsBulkImportOutput
jsonRunsBulkImportOutputDecoder =
    Json.Decode.succeed JsonRunsBulkImportOutput
        |> decode "simulated" Json.Decode.bool 
        |> decode "create_data_sets" Json.Decode.bool 
        |> decode "errors" (Json.Decode.list Json.Decode.string) 
        |> decode "warnings" (Json.Decode.list Json.Decode.string) 
        |> decode "number_of_runs" Json.Decode.int 
        |> decode "data_sets" (Json.Decode.list jsonDataSetDecoder) 


jsonStartRunOutputDecoder : Json.Decode.Decoder JsonStartRunOutput
jsonStartRunOutputDecoder =
    Json.Decode.succeed JsonStartRunOutput
        |> decode "run_internal_id" Json.Decode.int 


jsonStopRunOutputDecoder : Json.Decode.Decoder JsonStopRunOutput
jsonStopRunOutputDecoder =
    Json.Decode.succeed JsonStopRunOutput
        |> decode "result" Json.Decode.bool 


jsonUpdateAttributoConversionFlagsDecoder : Json.Decode.Decoder JsonUpdateAttributoConversionFlags
jsonUpdateAttributoConversionFlagsDecoder =
    Json.Decode.succeed JsonUpdateAttributoConversionFlags
        |> decode "ignore_units" Json.Decode.bool 


jsonUpdateAttributoInputDecoder : Json.Decode.Decoder JsonUpdateAttributoInput
jsonUpdateAttributoInputDecoder =
    Json.Decode.succeed JsonUpdateAttributoInput
        |> decode "attributo" jsonAttributoDecoder 
        |> decode "conversion_flags" jsonUpdateAttributoConversionFlagsDecoder 


jsonUpdateAttributoOutputDecoder : Json.Decode.Decoder JsonUpdateAttributoOutput
jsonUpdateAttributoOutputDecoder =
    Json.Decode.succeed JsonUpdateAttributoOutput
        |> decode "id" Json.Decode.int 


jsonUpdateBeamtimeInputDecoder : Json.Decode.Decoder JsonUpdateBeamtimeInput
jsonUpdateBeamtimeInputDecoder =
    Json.Decode.succeed JsonUpdateBeamtimeInput
        |> decode "id" Json.Decode.int 
        |> decode "external_id" Json.Decode.string 
        |> decode "beamline" Json.Decode.string 
        |> decode "proposal" Json.Decode.string 
        |> decode "title" Json.Decode.string 
        |> decode "comment" Json.Decode.string 
        |> decode "start" Json.Decode.int 
        |> decode "end" Json.Decode.int 
        |> decode "analysis_output_path" Json.Decode.string 


jsonUpdateBeamtimeScheduleInputDecoder : Json.Decode.Decoder JsonUpdateBeamtimeScheduleInput
jsonUpdateBeamtimeScheduleInputDecoder =
    Json.Decode.succeed JsonUpdateBeamtimeScheduleInput
        |> decode "beamtime_id" Json.Decode.int 
        |> decode "schedule" (Json.Decode.list jsonBeamtimeScheduleRowDecoder) 


jsonUpdateLiveStreamDecoder : Json.Decode.Decoder JsonUpdateLiveStream
jsonUpdateLiveStreamDecoder =
    Json.Decode.succeed JsonUpdateLiveStream
        |> decode "id" Json.Decode.int 


jsonUpdateOnlineIndexingParametersInputDecoder : Json.Decode.Decoder JsonUpdateOnlineIndexingParametersInput
jsonUpdateOnlineIndexingParametersInputDecoder =
    Json.Decode.succeed JsonUpdateOnlineIndexingParametersInput
        |> decode "command_line" Json.Decode.string 
        |> decode "geometry_file" Json.Decode.string 
        |> decode "source" Json.Decode.string 


jsonUpdateOnlineIndexingParametersOutputDecoder : Json.Decode.Decoder JsonUpdateOnlineIndexingParametersOutput
jsonUpdateOnlineIndexingParametersOutputDecoder =
    Json.Decode.succeed JsonUpdateOnlineIndexingParametersOutput
        |> decode "success" Json.Decode.bool 


jsonUpdateRunDecoder : Json.Decode.Decoder JsonUpdateRun
jsonUpdateRunDecoder =
    Json.Decode.succeed JsonUpdateRun
        |> decode "id" Json.Decode.int 
        |> decode "experiment_type_id" Json.Decode.int 
        |> decode "attributi" (Json.Decode.list jsonAttributoValueDecoder) 
        |> maybeDecode "files" (Json.Decode.list jsonRunFileDecoder) Nothing


jsonUpdateRunOutputDecoder : Json.Decode.Decoder JsonUpdateRunOutput
jsonUpdateRunOutputDecoder =
    Json.Decode.succeed JsonUpdateRunOutput
        |> decode "result" Json.Decode.bool 
        |> decode "files" (Json.Decode.list jsonRunFileDecoder) 


jsonUpdateRunsBulkInputDecoder : Json.Decode.Decoder JsonUpdateRunsBulkInput
jsonUpdateRunsBulkInputDecoder =
    Json.Decode.succeed JsonUpdateRunsBulkInput
        |> decode "beamtime_id" Json.Decode.int 
        |> decode "external_run_ids" (Json.Decode.list Json.Decode.int) 
        |> decode "attributi" (Json.Decode.list jsonAttributoValueDecoder) 
        |> maybeDecode "new_experiment_type_id" Json.Decode.int Nothing


jsonUpdateRunsBulkOutputDecoder : Json.Decode.Decoder JsonUpdateRunsBulkOutput
jsonUpdateRunsBulkOutputDecoder =
    Json.Decode.succeed JsonUpdateRunsBulkOutput
        |> decode "result" Json.Decode.bool 


jsonUserConfigDecoder : Json.Decode.Decoder JsonUserConfig
jsonUserConfigDecoder =
    Json.Decode.succeed JsonUserConfig
        |> decode "online_crystfel" Json.Decode.bool 
        |> decode "auto_pilot" Json.Decode.bool 
        |> maybeDecode "current_experiment_type_id" Json.Decode.int Nothing
        |> maybeDecode "current_online_indexing_parameters_id" Json.Decode.int Nothing


jsonUserConfigurationSingleOutputDecoder : Json.Decode.Decoder JsonUserConfigurationSingleOutput
jsonUserConfigurationSingleOutputDecoder =
    Json.Decode.succeed JsonUserConfigurationSingleOutput
        |> maybeDecode "value_bool" Json.Decode.bool Nothing
        |> maybeDecode "value_int" Json.Decode.int Nothing


mergeModelDecoder : Json.Decode.Decoder MergeModel
mergeModelDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "unity" ->
                        Json.Decode.succeed MergeModelUnity

                    "xsphere" ->
                        Json.Decode.succeed MergeModelXsphere

                    "offset" ->
                        Json.Decode.succeed MergeModelOffset

                    "ggpm" ->
                        Json.Decode.succeed MergeModelGgpm

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


mergeNegativeHandlingDecoder : Json.Decode.Decoder MergeNegativeHandling
mergeNegativeHandlingDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "ignore" ->
                        Json.Decode.succeed MergeNegativeHandlingIgnore

                    "zero" ->
                        Json.Decode.succeed MergeNegativeHandlingZero

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


scaleIntensitiesDecoder : Json.Decode.Decoder ScaleIntensities
scaleIntensitiesDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "off" ->
                        Json.Decode.succeed ScaleIntensitiesOff

                    "normal" ->
                        Json.Decode.succeed ScaleIntensitiesNormal

                    "debyewaller" ->
                        Json.Decode.succeed ScaleIntensitiesDebyewaller

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


validationErrorDecoder : Json.Decode.Decoder ValidationError
validationErrorDecoder =
    Json.Decode.succeed ValidationError
        |> decode "loc" (Json.Decode.list Json.Decode.string) 
        |> decode "msg" Json.Decode.string 
        |> decode "type" Json.Decode.string 




-- HELPER


type alias EncodedField =
    Maybe ( String, Json.Encode.Value )


encodeObject : List EncodedField -> Json.Encode.Value
encodeObject =
    Json.Encode.object << List.filterMap identity


encode : String -> (a -> Json.Encode.Value) -> a -> EncodedField
encode key encoder value =
    Just ( key, encoder value )


encodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
encodeNullable key encoder value =
    Just ( key, Maybe.withDefault Json.Encode.null (Maybe.map encoder value) )


maybeEncode : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncode key encoder =
    Maybe.map (Tuple.pair key << encoder)


maybeEncodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncodeNullable =
    encodeNullable


decode : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decode key decoder =
    decodeChain (Json.Decode.field key decoder)


decodeLazy : (a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeLazy f key decoder =
    decodeChainLazy f (Json.Decode.field key decoder)


decodeNullable : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
decodeNullable key decoder =
    decodeChain (maybeField key decoder Nothing)


decodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeNullableLazy f key decoder =
    decodeChainLazy f (maybeField key decoder Nothing)


maybeDecode : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecode key decoder fallback =
    -- let's be kind to null-values as well
    decodeChain (maybeField key decoder fallback)


maybeDecodeLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeLazy f key decoder fallback =
    -- let's be kind to null-values as well
    decodeChainLazy f (maybeField key decoder fallback)


maybeDecodeNullable : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecodeNullable key decoder fallback =
    decodeChain (maybeField key decoder fallback)


maybeDecodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeNullableLazy f key decoder fallback =
    decodeChainLazy f (maybeField key decoder fallback)


maybeField : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a)
maybeField key decoder fallback =
    let
        fieldDecoder =
            Json.Decode.field key Json.Decode.value

        valueDecoder =
            Json.Decode.oneOf [ Json.Decode.map Just decoder, Json.Decode.null fallback ]

        decodeObject rawObject =
            case Json.Decode.decodeValue fieldDecoder rawObject of
                Ok rawValue ->
                    case Json.Decode.decodeValue valueDecoder rawValue of
                        Ok value ->
                            Json.Decode.succeed value

                        Err error ->
                            Json.Decode.fail (Json.Decode.errorToString error)

                Err _ ->
                    Json.Decode.succeed fallback
    in
    Json.Decode.value
        |> Json.Decode.andThen decodeObject


decodeChain : Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decodeChain =
    Json.Decode.map2 (|>)


decodeChainLazy : (a -> c) -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeChainLazy f =
    decodeChain << Json.Decode.map f
stages:
  - pretest
  - test
  - integration
  - deploy

# this is a workaround for etcd runner issues
default:
  tags:
    - DESY-intern

# We have no shell scripts currently
#check-shell-scripts:
#  stage: pretest
#  image: koalaman/shellcheck-alpine:latest
#  script:
#    - shellcheck ci/*.sh

variables:
  AMARCORD_PYTHON_DOCKER: gitlab.desy.de:5555/cfel-sc-public/amarcord/poetry-base-image:v1-1-8
  # this is a workaround for the root CA issue in DESYâ€™s GitLab CI (will be fixed soon (tm))
  GIT_SSL_NO_VERIFY: "true"

check-requirements:
  image: $AMARCORD_PYTHON_DOCKER
  stage: test
  script:
    # without-hashes because:
    # https://github.com/python-poetry/poetry/issues/3472
    - poetry export --dev --without-hashes -o requirements-new.txt
    - diff requirements.txt requirements-new.txt

pylint-and-mypy:
  image: $AMARCORD_PYTHON_DOCKER
  stage: test
  script:
    - poetry install
    - poetry run mypy amarcord tests
    - apt-get update -y && apt-get install -y qtbase5-dev
    - poetry run pylint amarcord tests

run-migrations:
  image: $AMARCORD_PYTHON_DOCKER
  stage: integration
  script:
    - poetry install
    - poetry run amarcord-db-cli --connection-url="sqlite://" migrate

tests:
  image: $AMARCORD_PYTHON_DOCKER
  stage: integration
  variables:
    QT_QPA_PLATFORM: "offscreen"
  script:
    - apt-get update -y
    - apt-get install -y libgl1-mesa-glx qtbase5-dev
    - poetry install
    - poetry run pytest --cov=amarcord/ --junitxml=report.xml tests
    - poetry run coverage xml
  artifacts:
    when: always
    reports:
      cobertura: coverage.xml
      junit: report.xml

#deploy-pypi:
#  image: $AMARCORD_PYTHON_DOCKER
#  stage: deploy
#  only:
#    - tags
#    - master
#  script:
#    - poetry install
#    - pip install wheel twine
#    - python setup.py sdist bdist_wheel
#    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --skip-existing --repository-url https://gitlab.desy.de/api/v4/projects/${CI_PROJECT_ID}/packages/pypi dist/*
#

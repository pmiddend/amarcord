stages:
  - pretest
  - test
  - integration
  - deploy
  - test-deploy
  - upload-docker
  - test-cypress

check-shell-scripts:
  stage: pretest
  image: koalaman/shellcheck-alpine:latest
  script:
    - shellcheck ci/*.sh

variables:
  AMARCORD_PYTHON_DOCKER: python:3.8
  # These are used by the cypress tests
  #MYSQL_USER: cypressuser
  MYSQL_ROOT_PASSWORD: cypresspassword
  MYSQL_DATABASE: cypressdb
  AMARCORD_DB_URL: "mysql+pymysql://root:cypresspassword@mysql/cypressdb"

pylint-and-mypy:
  image: $AMARCORD_PYTHON_DOCKER
  stage: test
  script:
    - pip install -e .[gui,webserver,daemon,p11]
    - pip install 'mypy==0.812' 'pylint==2.8.*' sqlalchemy-stubs
    - mypy amarcord tutorial
    - apt-get update -y && apt-get install -y qt5-default
    - pylint amarcord tutorial
    - pyrcc5 icons/resources.qrc -o resources-copy.py

validate-conda-yaml:
  image: continuumio/miniconda3:4.9.2
  stage: test
  script:
    - conda env create -f environment.yml

run-migrations:
  image: $AMARCORD_PYTHON_DOCKER
  stage: integration
  script:
    - pip install -e .
    - python amarcord/cli/admin.py --connection-url="sqlite://" migrate

tests:
  image: $AMARCORD_PYTHON_DOCKER
  stage: integration
  variables:
    QT_QPA_PLATFORM: "offscreen"
  script:
    - apt-get update -y
    - apt-get install -y libgl1-mesa-glx qt5-default
    - pip install -e .[gui,p11]
    - pip install 'pytest==6.2.*' 'pytest-qt==3.3.*' 'hypothesis==6.3.*' 'pytest-cov==2.11.*' 'pyfakefs==4.4.*'
    - PYTHONPATH=".:$PYTHONPATH" pytest --cov=amarcord/ --junitxml=report.xml tests
    - coverage xml
  artifacts:
    when: always
    reports:
      cobertura: coverage.xml
      junit: report.xml

# The image built by Nix is much smaller than the one below, but we have to find a way to
# call “docker load” on it and then upload it. Not sure how to best do this.
# build-docker-image-nix:
#   image: nixos/nix
#   stage: integration
#   script:
#     - nix-channel --add https://nixos.org/channels/nixpkgs-unstable nixpkgs
#     - nix-channel --update
#     - IMAGE=$(nix-build ./default.nix)
#     - cp $IMAGE docker-image.tar.gz
#   artifacts:
#     paths:
#       - docker-image.tar.gz
deploy-pypi:
  image: $AMARCORD_PYTHON_DOCKER
  stage: deploy
  only:
    - tags
    - master
  script:
    - pip install -e .
    - pip install wheel twine
    - python setup.py sdist bdist_wheel
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --skip-existing --repository-url https://gitlab.desy.de/api/v4/projects/${CI_PROJECT_ID}/packages/pypi dist/*

build-web-prod:
  image: ubuntu:groovy
  script:
    - ci/build-web-on-debian.sh
  artifacts:
    paths:
      - purescript-frontend/prod/

upload-webserver:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  stage: upload-docker
  variables:
    # To deploy this to master, we need a slug, not a SHA actually. Need to fix that.
    IMAGE_SLUG_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    IMAGE_COMMIT_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  only:
    - tags
    - master
    - analysis-changes
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile-web --destination $IMAGE_SLUG_TAG --destination $IMAGE_COMMIT_TAG

test-cypress:
  image: $AMARCORD_PYTHON_DOCKER
  stage: test-cypress
  only:
    - hostal-confluence
  services:
    - name: mysql:8
    - name: $CI_REGISTRY/cfel-sc/amarcord-parent/amarcord-xfel:$CI_COMMIT_SHORT_SHA
      alias: amarcord-app
  script:
    - ci/cypress-integration.sh
  artifacts:
    paths:
      - purescript-frontend/cypress/videos/
      - purescript-frontend/cypress/screenshots/
    expire_in: 1 week
    when: on_failure

#integration-amici:
#  image: $AMARCORD_PYTHON_DOCKER
#  stage: test-deploy
#  only:
#    - tags
#    - master
#  script:
#    - pip install -e .
#    - pip install --upgrade --extra-index-url https://maxwell-token:JUX_f_ivQjyZbxZAEPYi@gitlab.desy.de/api/v4/projects/${CI_PROJECT_ID}/packages/pypi/simple amarcord
#    - python integration/amici_test.py
#
# Docker images were a thing, but only to convert it to singularity.
# However, since singularity is hard to build and behaved weirdly, might as well ditch the images
#upload-gui-docker-image:
#  image:
#    name: gcr.io/kaniko-project/executor:debug
#    entrypoint: [""]
#  stage: upload-docker
#  variables:
#    # To deploy this to master, we need a slug, not a SHA actually. Need to fix that.
#    IMAGE_SLUG_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
#    IMAGE_COMMIT_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
#    DOCKER_HOST: tcp://docker:2375
#    DOCKER_TLS_CERTDIR: ""
#  only:
#    - tags
#    - master
#  script:
#    - mkdir -p /kaniko/.docker
#    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
#    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $IMAGE_SLUG_TAG --destination $IMAGE_COMMIT_TAG
#
#upload-daemon-docker-image:
#  image:
#    name: gcr.io/kaniko-project/executor:debug
#    entrypoint: [""]
#  stage: upload-docker
#  variables:
#    # To deploy this to master, we need a slug, not a SHA actually. Need to fix that.
#    IMAGE_SLUG_TAG: ${CI_REGISTRY_IMAGE}/daemon:$CI_COMMIT_REF_SLUG
#    IMAGE_COMMIT_TAG: ${CI_REGISTRY_IMAGE}/daemon:$CI_COMMIT_SHORT_SHA
#    DOCKER_HOST: tcp://docker:2375
#    DOCKER_TLS_CERTDIR: ""
#  only:
#    - tags
#    - master
#  script:
#    - mkdir -p /kaniko/.docker
#    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
#    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile-daemon --destination $IMAGE_SLUG_TAG --destination $IMAGE_COMMIT_TAG

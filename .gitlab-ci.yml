default:
  tags:
    - nix

pyright:
  script:
    - nix develop --command basedpyright

format:
  script:
    # ruff has two modes:
    # "format --check" which checks if the formatting is correct,
    # and "ruff check" which checks if the rules are followed, which can
    # include "semantic" changes to the code.
    - nix develop --command ruff format --check amarcord tests
    - nix develop --command ruff check amarcord tests

fawltydeps:
  script:
    - nix develop --command fawltydeps

check-shell-scripts:
  script:
     - nix develop --command shellcheck ci/*.sh

elm-review:
  script:
    - ci/elm-review.sh

elm-test:
  script:
    - ci/elm-test.sh

frontend-check-openapi:
  script:
    - nix develop --command ci/check-generated-elm-code.sh

frontend:
  script:
    - nix build .#amarcord-frontend
  artifacts:
    # output because that's the directory the web server will use to find it
    # (it searches for static files in frontend/output), so you can just download
    # the zip, extract it into frontend/ and it works.
    name: output
    paths:
      - result/*

build-docker-image:
  script:
    - ci/nix-build-docker-image.sh

nix-pin-latest:
  script:
    - nix build --out-link ~/pipeline-pins/amarcord-python-package-$CI_COMMIT_REF_SLUG .#amarcord-python-package
  only:
    - main
    - next-beamtime

nix-pin-latest-manual:
  script:
    - nix build --out-link ~/pipeline-pins/amarcord-python-package-$CI_COMMIT_REF_SLUG .#amarcord-python-package
  when: manual

check-requirements:
   script:
     - nix develop --command ./ci/check-requirements.sh

tests:
  script:
    - nix develop --command ci/run-tests.sh
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    when: always
    reports:
      # see https://docs.gitlab.com/ee/ci/testing/unit_test_report_examples.html
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml


pages:
  script:
    - pushd docs
    - nix develop --command make linkcheck
    - nix develop --command sphinx-build -b spelling source/ build/
    - nix develop --command make html
    - popd
    - cp -R docs/build/html public/
  artifacts:
    paths:
    - public
  only:
    - main

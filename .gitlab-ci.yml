stages:
  - test
  - integration
  - deploy
  - test-deploy
  - upload-docker

variables:
  AMARCORD_PYTHON_DOCKER: python:3.8

pylint-and-mypy:
  image: $AMARCORD_PYTHON_DOCKER
  stage: test
  script:
    - pip install -e .[gui,webserver,daemon]
    - pip install mypy pylint sqlalchemy-stubs
    - mypy amarcord
    - apt-get update -y && apt-get install -y qt5-default
    - pylint amarcord
    - pyrcc5 icons/resources.qrc -o resources-copy.py

run-migrations:
  image: $AMARCORD_PYTHON_DOCKER
  stage: integration
  script:
    - pip install -e .
    - python amarcord/db_cli.py --connection-url="sqlite://" migrate

integration-tests:
  image: $AMARCORD_PYTHON_DOCKER
  stage: integration
  variables:
    QT_QPA_PLATFORM: "offscreen"
  script:
    - apt-get update -y
    - apt-get install -y libgl1-mesa-glx qt5-default
    - pip install -e .[gui]
    - pip install 'pytest==6.2.*' 'pytest-qt==3.3.*' 'hypothesis==6.3.*' 'pytest-cov==2.11.*'
    - PYTHONPATH=".:$PYTHONPATH" pytest --cov=amarcord/ --junitxml=report.xml tests
    - coverage xml
  artifacts:
    when: always
    reports:
      cobertura: coverage.xml
      junit: report.xml

# The image built by Nix is much smaller than the one below, but we have to find a way to
# call “docker load” on it and then upload it. Not sure how to best do this.
# build-docker-image-nix:
#   image: nixos/nix
#   stage: integration
#   script:
#     - nix-channel --add https://nixos.org/channels/nixpkgs-unstable nixpkgs
#     - nix-channel --update
#     - IMAGE=$(nix-build ./default.nix)
#     - cp $IMAGE docker-image.tar.gz
#   artifacts:
#     paths:
#       - docker-image.tar.gz
deploy-pypi:
  image: $AMARCORD_PYTHON_DOCKER
  stage: deploy
  only:
    - tags
    - master
  script:
    - pip install -e .
    - pip install wheel twine
    - python setup.py sdist bdist_wheel
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --skip-existing --repository-url https://gitlab.desy.de/api/v4/projects/${CI_PROJECT_ID}/packages/pypi dist/*

integration-amici:
  image: $AMARCORD_PYTHON_DOCKER
  stage: test-deploy
  only:
    - tags
    - master
  script:
    - pip install -e .
    - pip install --upgrade --extra-index-url https://maxwell-token:JUX_f_ivQjyZbxZAEPYi@gitlab.desy.de/api/v4/projects/${CI_PROJECT_ID}/packages/pypi/simple amarcord
    - python integration/amici_test.py

upload-gui-docker-image:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  stage: upload-docker
  variables:
    # To deploy this to master, we need a slug, not a SHA actually. Need to fix that.
    IMAGE_SLUG_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    IMAGE_COMMIT_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  only:
    - tags
    - master
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $IMAGE_SLUG_TAG --destination $IMAGE_COMMIT_TAG

upload-daemon-docker-image:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  stage: upload-docker
  variables:
    # To deploy this to master, we need a slug, not a SHA actually. Need to fix that.
    IMAGE_SLUG_TAG: ${CI_REGISTRY_IMAGE}/daemon:$CI_COMMIT_REF_SLUG
    IMAGE_COMMIT_TAG: ${CI_REGISTRY_IMAGE}/daemon:$CI_COMMIT_SHORT_SHA
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  only:
    - tags
    - master
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile-daemon --destination $IMAGE_SLUG_TAG --destination $IMAGE_COMMIT_TAG
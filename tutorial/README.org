* AMARCORD primer for XFEL people

** Prerequisites

To start working with AMARCORD from within Python, you need the official AMARCORD (GitLab) PyPI package, which you can install using the following command:

#+begin_example
pip install --upgrade --extra-index-url https://maxwell-token:JUX_f_ivQjyZbxZAEPYi@gitlab.desy.de/api/v4/projects/370/packages/pypi/simple amarcord
#+end_example

Let me know if this step doesn’t work for you. It works on my machine, but maybe I’ve just got the right credentials for that. You never know. :-)

After installing this, to just test if everything works, try to execute this Python code:

#+begin_src python
  from amarcord.modules.dbcontext import DBContext
  from amarcord.db.db import DB
  from amarcord.db.tables import create_tables
  from amarcord.modules.dbcontext import CreationMode

  dbcontext = DBContext("sqlite://")
  db = DB(dbcontext, create_tables(dbcontext))
  dbcontext.create_all(CreationMode.CHECK_FIRST)

  with db.connect() as connection:
      print("done")
#+end_src

This will create an empty in-memory database (see the =sqlite://= URL) with all the necessary tables, open a connection object and print “done”. Inside the =with= statement, you can execute your database statements.

** Accessing the DB

The main class for accessing the database is just called =DB=, and it’s in [[file:amarcord/db/db.py][amarcord/db/db.py]]. The class has minimal documentation (it’s a long-term TODO), but the type annotations should hopefully guide you well. Note that *you need to open a connection* with =db.connect()= and use the object returned to do anything with the database.

To access any AMARCORD database, you need a *database URL*. If you want to test things locally, you can use a simple file-based SQLite database, which doesn’t require you to start a server, and you can just remove the database file if you want to try again. To use a file-based SQLite DB, specify the following database URL:

#+begin_example
sqlite:////path/to/db
#+end_example

Note the four (!) slashes. As an example, …

#+begin_example
sqlite:////tmp/test.sqlite
#+end_example

…is a valid SQLite file database URL. To access a MySQL-based database, specify this kind of URL:

#+begin_example
mysql+pymysql://user:password@host/dbname
#+end_example

…with the correct credentials, host, and database name.

** Inspecting the DB using the GUI

To start the GUI, you have to have a database url (see above). To run the GUI on Maxwell, connect to max-display and execute:

#+begin_example
/gpfs/cfel/cxi/common/public/development/AMARCORD/start-gui.sh
#+end_example

This will open a dialog asking you for the database URL, and will start the GUI afterwards.

To start the GUI locally, you need to install the necessary dependencies using:

#+begin_example
pip install -e '.[gui]'
#+end_example

…and then just execute

#+begin_example
PYTHONPATH=$(pwd) python amarcord/xfel_gui.py
#+end_example

…which will also ask you for a database URL.

Note that to use the GUI, you have to already have a database and all the tables set up. You can do this from Python using the =create_all= call from the snippet above, or from the command line using…

#+begin_example
PYTHONPATH=$(pwd) python amarcord/cli/admin.py --connection-url $insert_your_connection_url migrate
#+end_example

…with a corresponding =$insert_your_connection_url=.

** Analysis results

The database stores the following entries for analysis:

[[./analysis-pipeline.png]]

To see how to create all of these objects/results/parameters, check out the [[file:tutorial/simple-analysis-db.py][tutorial/simple-analysis-db.py]] file.

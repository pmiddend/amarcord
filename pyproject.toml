[tool.poetry]
name = "amarcord"
version = "1.0.0"
description = "A ModulAR CollectOR of metaData - serial edition"
authors = ["Philipp Middendorf <philipp.middendorf@desy.de>", "CFEL-SC <sc@cfel.de>"]
license = "GPL-3.0-or-later"

[tool.poetry.dependencies]
python = ">=3.9, <3.12"

# for general DB access
SQLAlchemy = "2.0.23"
# for caching_sha2_password access in MySQL
cryptography = '40.0.2'
# For parsing the arguments for programs (always required basically)
typed-argument-parser = '1.7.2'
# For the config file
pydantic = '1.10.13'
# numpy for processing results
numpy = '1.23.5'
# For validating units
pint = '0.23'

pymysql = '1.1.0'

# For the Excel spreadsheet export
openpyxl = "3.0.9"

# for correcting UTC timezone for dates
python-dateutil = "2.8.2"
# for the webserver
fastapi = "0.105.0"
# asynchronous db client
aiosqlite = "0.17.0"
# asynchronous db client
asyncmy = "0.2.7"

# for time zone detection and conversion of timestamps in attributi
pytz = "2021.3"
# to test incoming files for their mime types
python-magic = "0.4.24"
# For the experiment simulator
randomname = "0.1.5"

# For http requests
aiohttp = "3.9.1"

alembic = "1.7.7"
# For the production-ready server
uvicorn = "0.23.2"
# For the file upload in the web server
# see https://fastapi.tiangolo.com/tutorial/request-files/
python-multipart = "0.0.6"

# For parsing the filter expressions
lark = "1.1.8"
structlog = "22.1.0"
structlog-overtime = "1.0.1"

# This is just to force poetry to use 1.1.3 instead of 1.1.2 which fails on Windows
greenlet = "1.1.3"

[tool.poetry.dev-dependencies]
# for FastAPI tests, see
# https://fastapi.tiangolo.com/tutorial/testing/
httpx = "0.25.2"
pytest-bdd = "7.0.1"
# documentation
sphinx = "7.2.6"
# for markdown in documentation
myst-parser = "2.0.0"
sphinxcontrib-mermaid = "0.9.2"
sphinx-autobuild = "2024.2.4"
sphinxcontrib-spelling = "8.0.0"
black = '22.3.0'
types-pytz = "2021.3.6"
vulture = "2.10"
pylint = '3.0.2'
pyfakefs = '4.7.0'
openpyxl-stubs = "0.1.25"
pytest = '6.2.5'
hypothesis = '6.27.1'
pytest-cov = '2.12.1'
types-python-dateutil = "2.8.3"
# slurm
types-requests = "2.26.0"
# config file
types-PyYAML = '5.4.12'
pytest-asyncio = "0.17.2"
isort = "5.12.0"
pytest-subprocess = "1.4.1"
pytest-xdist = "3.5.0"
fawltydeps = "0.12.0"

[tool.poetry.scripts]
# These are not all files in cli/, but the ones we definitely intend to keep.
amarcord-daemon = "amarcord.cli.daemon:main"
amarcord-upgrade-db-to-latest = "amarcord.cli.upgrade_db_to_latest:main"
amarcord-slurm-runner = "amarcord.cli.slurm_runner:main"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
profile = "black"
force_single_line = "true"

[tool.pylint."TYPECHECK"]
ignored-modules = ["alembic.op","alembic.context"]
generated-members = ["SUB","SUBSCRIBE","EVENT_DISCONNECTED","EVENT_HANDSHAKE_SUCCEEDED","REQ","RCVTIMEO","EVENT_CONNECTED","PUB"]

[tool.pylint."main"]
load-plugins=["pylint.extensions.typing","pylint.extensions.redefined_variable_type"]
extension-pkg-allow-list=["pydantic"]

[tool.pylint."MESSAGES CONTROL"]
disable=["invalid-name", "missing-module-docstring", "too-many-instance-attributes", "too-many-branches", "missing-class-docstring", "missing-function-docstring", "line-too-long", "missing-final-newline", "logging-not-lazy", "broad-exception-raised", "broad-exception-caught", "too-many-arguments", "bare-except", "too-few-public-methods", "too-many-locals", "too-many-nested-blocks", "too-many-statements", "too-many-public-methods", "too-many-return-statements", "blacklisted-name", "duplicate-code", "logging-fstring-interpolation", "too-many-lines", "too-many-boolean-expressions", "logging-format-interpolation", "raise-missing-from", "deprecated-typing-alias", "subprocess-run-check", "import-outside-toplevel", "too-many-ancestors"]

[tool.fawltydeps]
code = ["amarcord", "tests"]
deps = ["pyproject.toml"]
ignore_undeclared = ["amarcord", "hypothesis", "pytest", "pytest_asyncio", "pytest_subprocess", "anyio"]
# aiosqlite/asyncmy/pymysql is used while _running_ AMARCORD
# cryptography is for a Nix fix
# python-magic is imported a little weirdly
# greenlet is for explicit version forcing
# pymysql for the migration script
# uvicorn is our web server
# python-multipart is for the web server internals (file upload, see FastAPI docs)
ignore_unused = ["aiosqlite", "asyncmy", "cryptography", "fawltydeps", "python-magic", "greenlet", "pymysql", "uvicorn", "python-multipart"]

[tool.pyright]
include = ["amarcord", "tests"]
typeCheckingMode = "basic"
useLibraryCodeForType = true
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
reportInvalidStringEscapeSequence = true
reportAssertAlwaysTrue = true
reportInvalidTypeVarUse = false
# deliberately false, since we cannot do anything if this happens
reportMissingTypeStubs = false
reportSelfClsParameterName = true
reportUnsupportedDunderAll = true
reportUnusedExpression = true
reportWildcardImportFromLibrary = true
reportConstantRedefinition = true
reportDeprecated = true
reportDuplicateImport = true
reportFunctionMemberAccess = true
reportImportCycles = true
reportIncompatibleMethodOverride = true
reportIncompatibleVariableOverride = true
reportIncompleteStub = true
reportInconsistentConstructor = true
reportInvalidStubStatement = true
reportMatchNotExhaustive = true
reportMissingParameterType = true
reportMissingTypeArgument = true
reportOverlappingOverload = true
reportPrivateUsage = true
reportTypeCommentUsage = true
reportUnknownLambdaType = true
reportUnknownArgumentType = true
reportUnknownParameterType = true
# Doesn't work _at all_ for libraries
reportUnknownMemberType = false
# Doesn't work _at all_ for libraries
reportUnknownVariableType = false
reportUnnecessaryCast = true
reportUnnecessaryComparison = true
reportUnnecessaryContains = true
reportUnnecessaryIsInstance = true
reportUnusedClass = true
reportUnusedImport = true
reportUnusedFunction = true
reportUnusedVariable = true
reportUntypedBaseClass = true
reportUntypedClassDecorator = true
# this screws up quart route annotations
reportUntypedFunctionDecorator = false
reportUntypedNamedTuple = true

# breaks fastapi
reportCallInDefaultInitializer = false
# Making this work on older Python versions requires a package. Annoying.
reportImplicitOverride = false
reportImplicitStringConcatenation = true
# In principle, a good message. However, it also forces you to call the object super method, which is pointless
reportMissingSuperCall = false

reportPropertyTypeMismatch = true
reportShadowedImports = true
# Works also, but doesn't play along with Tap
reportUninitializedInstanceVariable = false
# This works, but there's no way to ignore something in mypy, but not in pyright
reportUnnecessaryTypeIgnoreComment = false
# Sensible, but false positive waaaaaay to often
reportUnusedCallResult = false
pythonVersion = "3.10"
stubPath = "stubs"

[tool.coverage.run]
omit = [
  "amarcord/db/tables_old.py",
  "amarcord/cli/daemon.py",
  "amarcord/cli/crystfel_index.py",
  "amarcord/cli/crystfel_merge.py",
  "amarcord/cli/experiment_simulator.py",
  "amarcord/cli/generate_openapi_schema.py",
  "amarcord/cli/migrate.py",
  "amarcord/cli/slurm_runner.py",
  "amarcord/cli/upgrade_db_to_latest.py"
  ]
# tbh, I don't completely know why we need this. However, if we omit this, or use either just "thread" or "greenlet", then the coverage report
# for the web server will not work correctly. There will be lines shown as "not covered" which have clearly been covered. See also this
# issue at SO:
#
# https://stackoverflow.com/questions/69492265/fastapi-sqlalchemy-pytest-unable-to-get-100-coverage-it-doesnt-properly-co
concurrency = ["greenlet", "thread"]

# https://docs.pytest.org/en/latest/reference/customize.html
[tool.pytest.ini_options]
# not sure if this is really needed
asyncio_mode = "auto"
log_cli = true
# This will run tests in parallel
# addopts = "-n auto"


[project]
name = "amarcord"
version = "1.0.0"
description = "A ModulAR CollectOR of metaData - serial edition"
readme = "README.md"
requires-python = ">=3.12"
authors = [
  {name = "Philipp Middendorf", email = "philipp.middendorf@desy.de"},
  {name = "CFEL-SC", email = "sc@cfel.de"}
]
license = "GPL-3.0-or-later"
dependencies = [
    # For http requests
    "aiohttp==3.9.5",
    # asynchronous db client
    "aiosqlite==0.20.0",
    "alembic==1.13.1",
    # asynchronous db client
    "asyncpg==0.30.0",
    # for the webserver
    "fastapi==0.111.0",
    "starlette==0.37.2",
    "gunicorn==22.0.0",
    "uvicorn==0.30.1",
    # For parsing the filter expressions
    "lark==1.1.9",
    # For the Excel spreadsheet export
    "openpyxl==3.1.5",
    # For validating units
    "pint==0.23",
    # For the config file
    "pydantic==2.11.3",
    # asynchronous db client
    "pymysql==1.1.1",
    "asyncmy==0.2.10",
    # For the file upload in the web server
    # see https://fastapi.tiangolo.com/tutorial/request-files/
    "python-multipart==0.0.9",
    # for general DB access
    "sqlalchemy==2.0.40",
    "structlog-overtime==1.0.1",
    "structlog==24.2.0",
    # For parsing the arguments for programs (always required basically)
    "typed-argument-parser==1.10.1",
    # needed for MySQL with certain auth methods
    "cryptography==44.0.0",
    "python-magic==0.4.27",
    # for async file opening functions
    "anyio==4.8.0",
]

[dependency-groups]
dev = [
    "fawltydeps==0.18.0",
    # for FastAPI tests, see
    # https://fastapi.tiangolo.com/tutorial/testing/
    "httpx==0.27.0",
    "hypothesis==6.103.1",
    "myst-parser==2.0.0",
    "pyfakefs==5.5.0",
    "pytest-aiohttp==1.0.5",
    "pytest-asyncio==0.23.7",
    "pytest-bdd==7.2.0",
    "pytest-cov==5.0.0",
    "pytest-subprocess==1.5.0",
    "pytest-xdist==3.6.1",
    "pytest==8.2.2",
    "ruff==0.8.6",
    # documentation
    "sphinx-autobuild==2024.2.4",
    "sphinx==7.2.6",
    "sphinxcontrib-mermaid==0.9.2",
    "sphinxcontrib-spelling==8.0.0",
    "types-openpyxl==3.1.5.20241126",
    "types-python-dateutil==2.8.3",
    "types-pytz==2024.1.0.20240417",
    # slurm
    "types-requests==2.32.0.20240602",
    "vulture==2.11",
]


[project.scripts]
# These are not all files in cli/, but the ones we definitely intend to keep.
amarcord-mjpeg-daemon = "amarcord.cli.mjpeg_daemon:main"
amarcord-indexing-daemon = "amarcord.cli.indexing_daemon:main"
amarcord-merge-daemon = "amarcord.cli.merge_daemon:main"
amarcord-upgrade-db-to-latest = "amarcord.cli.upgrade_db_to_latest:main"
amarcord-slurm-runner = "amarcord.cli.slurm_runner:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
# This is a hack, to fix the uv2nix flake thing.
no-binary-package = ["python-magic"]

[tool.isort]
profile = "black"
force_single_line = "true"

[tool.ruff]
target-version = "py310"

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff.lint]
# to turn this:
#
# from X import y,z
#
# into
#
# from X import y
# from X import z
select = ["I001", "F", "E", "W", "I", "N", "UP", "YTT", "ANN", "ASYNC", "S", "FBT", "B", "A", "C4", "T10", "ICN", "LOG", "G", "PIE", "T20", "PYI", "Q", "RET", "SLF", "SLOT", "SIM", "TID", "TC", "INT", "ARG", "PTH", "TD", "FIX", "PD", "PGH", "PL", "R", "W", "FLY", "NPY", "FAST", "AIR", "FURB", "RUF"]
ignore = ["E501", "E722", "UP035", "ANN401", "S101", "S310", "FBT001", "B017", "B008", "B904", "C405", "C401", "C400", "G004", "G003", "PYI041", "SIM105", "TC001", "PGH003", "PGH004", "PLR2004", "PLR0913", "PLR0915", "PLR0912", "PLR0911", "RUF001"]

[tool.fawltydeps]
code = ["amarcord", "tests"]
deps = ["pyproject.toml"]
ignore_undeclared = ["amarcord", "hypothesis", "pytest", "pytest_asyncio", "pytest_subprocess", "anyio"]
# aiosqlite/asyncmy/pymysql is used while _running_ AMARCORD
# cryptography is for a Nix fix
# python-magic is imported a little weirdly
# greenlet is for explicit version forcing
# pymysql for the migration script
# asyncpg for the migration script
# uvicorn is our web server (same for gunicorn)
# python-multipart is for the web server internals (file upload, see FastAPI docs)
ignore_unused = ["aiosqlite", "asyncmy", "cryptography", "fawltydeps", "python-magic", "pymysql", "uvicorn", "python-multipart", "gunicorn", "asyncpg"]

[tool.pyright]
include = ["amarcord", "tests"]
typeCheckingMode = "basic"
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
enableReachabilityAnalysis = true
reportInvalidStringEscapeSequence = true
reportAssertAlwaysTrue = true
reportInvalidTypeVarUse = false
# deliberately false, since we cannot do anything if this happens
reportMissingTypeStubs = false
reportSelfClsParameterName = true
reportUnsupportedDunderAll = true
reportWildcardImportFromLibrary = true
reportConstantRedefinition = true
reportDeprecated = true
reportDuplicateImport = true
reportFunctionMemberAccess = true
reportImportCycles = true
reportIncompatibleMethodOverride = true
reportIncompatibleVariableOverride = true
reportIncompleteStub = true
reportInconsistentConstructor = true
reportInvalidStubStatement = true
reportMatchNotExhaustive = true
reportMissingParameterType = true
reportMissingTypeArgument = true
reportOverlappingOverload = true
reportPrivateUsage = true
reportTypeCommentUsage = true
reportUnknownLambdaType = true
reportUnknownArgumentType = true
reportUnknownParameterType = true
# Doesn't work _at all_ for libraries
reportUnknownMemberType = false
# Doesn't work _at all_ for libraries
reportUnknownVariableType = false
reportUnnecessaryCast = true
reportUnnecessaryComparison = true
reportUnnecessaryContains = true
reportUnnecessaryIsInstance = true
reportUnusedClass = true
reportUnusedImport = true
reportUnusedFunction = true
reportUnusedVariable = true
reportUnusedExpression = true
reportUntypedBaseClass = true
reportUntypedClassDecorator = true
# this screws up quart route annotations
reportUntypedFunctionDecorator = false
reportUntypedNamedTuple = true

# breaks fastapi
reportCallInDefaultInitializer = false
# Making this work on older Python versions requires a package. Annoying.
reportImplicitOverride = false
reportImplicitStringConcatenation = true
# In principle, a good message. However, it also forces you to call the object super method, which is pointless
reportMissingSuperCall = false

reportPropertyTypeMismatch = true
reportShadowedImports = true
# Works also, but doesn't play along with Tap
reportUninitializedInstanceVariable = false
# This works, but there's no way to ignore something in mypy, but not in pyright
reportUnnecessaryTypeIgnoreComment = false
# Sensible, but false positive waaaaaay to often
reportUnusedCallResult = false
pythonVersion = "3.10"
stubPath = "stubs"

[tool.coverage.run]
omit = [
  "amarcord/db/tables_old.py",
  "amarcord/cli/daemon.py",
  "amarcord/cli/crystfel_index.py",
  "amarcord/cli/crystfel_merge.py",
  "amarcord/cli/experiment_simulator.py",
  "amarcord/cli/generate_openapi_schema.py",
  "amarcord/cli/migrate.py",
  "amarcord/cli/slurm_runner.py",
  "amarcord/cli/upgrade_db_to_latest.py",
  "amarcord/cli/offline_index_test_scenario.py"
  ]
# tbh, I don't completely know why we need this. However, if we omit this, or use either just "thread" or "greenlet", then the coverage report
# for the web server will not work correctly. There will be lines shown as "not covered" which have clearly been covered. See also this
# issue at SO:
#
# https://stackoverflow.com/questions/69492265/fastapi-sqlalchemy-pytest-unable-to-get-100-coverage-it-doesnt-properly-co
concurrency = ["greenlet", "thread"]

# https://docs.pytest.org/en/latest/reference/customize.html
[tool.pytest.ini_options]
# not sure if this is really needed
asyncio_mode = "auto"
log_cli = false
# This will run tests in parallel
# addopts = "-n auto"


[tool.poetry]
name = "amarcord"
version = "1.0.0"
description = "A ModulAR CollectOR of metaData - serial edition"
authors = ["Philipp Middendorf <philipp.middendorf@desy.de>", "CFEL-SC <sc@cfel.de>"]
license = "GPL-3.0-or-later"

[tool.poetry.dependencies]
python = ">=3.8, <3.12"

h5py = "3.8.0"
# for general DB access
SQLAlchemy = { version = "1.4.31", extras = ["asyncio"] }
# for caching_sha2_password access in MySQL
cryptography = '40.0.2'
# For parsing the arguments for programs (always required basically)
typed-argument-parser = '1.7.2'
# For the config file
pydantic = '1.10.7'
# numpy for processing results
numpy = '1.23.5'
# for zmq access in the daemon
pyzmq = '22.3.0'
# For validating units
pint = '0.16.1'

# For the Excel spreadsheet export
openpyxl = "3.0.9"

# disabled for now, it's a huge dependency
# kamzik3 = "0.7.7"

# for correcting UTC timezone for dates
python-dateutil = "2.8.2"
# for the webserver
quart = "0.17.0"
# for the webserver
Quart-CORS = "0.5.0"
# for the webserver
werkzeug = "2.1.2"
# asynchronous db client
aiosqlite = "0.17.0"
# asynchronous db client
asyncmy = "0.2.7"

# for time zone detection and conversion of timestamps in attributi
pytz = "2021.3"
# to test incoming files for their mime types
python-magic = "0.4.24"
# For the experiment simulator
randomname = "0.1.5"
# For http requests
aiohttp = "3.8.1"
alembic = "1.7.7"
# For the production-ready server
hypercorn = "0.13.2"

# For ZYLA cam image saving
Pillow = "9.1.0"

# For parsing the filter expressions
lark = "1.1.2"
structlog = "22.1.0"
structlog-overtime = "1.0.1"

[tool.poetry.dev-dependencies]
black = '22.3.0'
# Temporary fix for wrong version of hatchling (required by black)
pathspec = "0.10.1"
types-pytz = "2021.3.6"
pylint = '2.15.4'
pyfakefs = '4.7.0'
openpyxl-stubs = "0.1.25"
pytest = '6.2.5'
hypothesis = '6.27.1'
pytest-cov = '2.12.1'
types-python-dateutil = "2.8.3"
# slurm
types-requests = "2.26.0"
# config file
types-PyYAML = '5.4.12'
pytest-asyncio = "0.17.2"
isort = "5.12.0"
pytest-subprocess = "1.4.1"
sqlalchemy2-stubs = "0.0.2-alpha.24"
fawltydeps = "0.7.1"

[tool.poetry.scripts]
# These are not all files in cli/, but the ones we definitely intend to keep.
amarcord-daemon = "amarcord.cli.daemon:main"
amarcord-webserver = "amarcord.cli.webserver:main"
amarcord-slurm-runner = "amarcord.cli.slurm_runner:main"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
profile = "black"
force_single_line = "true"

[tool.pylint."TYPECHECK"]
ignored-modules = ["alembic.op","alembic.context"]
generated-members = ["SUB","SUBSCRIBE","EVENT_DISCONNECTED","EVENT_HANDSHAKE_SUCCEEDED","REQ","RCVTIMEO","EVENT_CONNECTED","PUB"]

[tool.pylint."MASTER"]
load-plugins=["pylint.extensions.typing","pylint.extensions.redefined_variable_type"]
extension-pkg-allow-list=["pydantic"]

[tool.pylint."MESSAGES CONTROL"]
disable=["invalid-name", "missing-module-docstring", "too-many-instance-attributes", "too-many-branches", "missing-class-docstring", "missing-function-docstring", "line-too-long", "missing-final-newline", "logging-not-lazy", "broad-except", "too-many-arguments", "bare-except", "too-few-public-methods", "too-many-locals", "too-many-nested-blocks", "too-many-statements", "too-many-public-methods", "too-many-return-statements", "blacklisted-name", "duplicate-code", "logging-fstring-interpolation", "too-many-lines", "too-many-boolean-expressions", "logging-format-interpolation", "raise-missing-from", "deprecated-typing-alias", "subprocess-run-check", "import-outside-toplevel"]

[tool.fawltydeps]
code = ["amarcord", "tests"]
deps = ["pyproject.toml"]
ignore_undeclared = ["amarcord", "hypothesis", "pytest", "pytest_asyncio", "pytest_subprocess"]
# aiosqlite/asyncmy/pymysql is used while _running_ AMARCORD
# cryptography is for a Nix fix
# python-magic is imported a little weirdly
ignore_unused = ["aiosqlite", "asyncmy", "cryptography", "fawltydeps", "python-magic"]

[tool.pyright]
include = ["amarcord", "tests"]
typeCheckingMode = "basic"
useLibraryCodeForType = true
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
reportInvalidStringEscapeSequence = true
reportAssertAlwaysTrue = true
reportInvalidTypeVarUse = false
# deliberately false, since we cannot do anything if this happens
reportMissingTypeStubs = false
reportSelfClsParameterName = true
reportUnsupportedDunderAll = true
reportUnusedExpression = true
reportWildcardImportFromLibrary = true
reportConstantRedefinition = true
reportDeprecated = true
reportDuplicateImport = true
reportFunctionMemberAccess = true
reportImportCycles = true
reportIncompatibleMethodOverride = true
reportIncompatibleVariableOverride = true
reportIncompleteStub = true
reportInconsistentConstructor = true
reportInvalidStubStatement = true
reportMatchNotExhaustive = true
reportMissingParameterType = true
reportMissingTypeArgument = true
reportOverlappingOverload = true
reportPrivateUsage = true
reportTypeCommentUsage = true
reportUnknownLambdaType = true
reportUnknownArgumentType = true
reportUnknownParameterType = true
# Doesn't work _at all_ for libraries
reportUnknownMemberType = false
# Doesn't work _at all_ for libraries
reportUnknownVariableType = false
reportUnnecessaryCast = true
reportUnnecessaryComparison = true
reportUnnecessaryContains = true
reportUnnecessaryIsInstance = true
reportUnusedClass = true
reportUnusedImport = true
reportUnusedFunction = true
reportUnusedVariable = true
reportUntypedBaseClass = true
reportUntypedClassDecorator = true
# this screws up quart route annotations
reportUntypedFunctionDecorator = false
reportUntypedNamedTuple = true

reportCallInDefaultInitializer = true
# Making this work on older Python versions requires a package. Annoying.
reportImplicitOverride = false
reportImplicitStringConcatenation = true
# In principle, a good message. However, it also forces you to call the object super method, which is pointless
reportMissingSuperCall = false

reportPropertyTypeMismatch = true
reportShadowedImports = true
# Works also, but doesn't play along with Tap
reportUninitializedInstanceVariable = false
# This works, but there's no way to ignore something in mypy, but not in pyright
reportUnnecessaryTypeIgnoreComment = false
# Sensible, but false positive waaaaaay to often
reportUnusedCallResult = false
pythonVersion = "3.10"
stubPath = "stubs"
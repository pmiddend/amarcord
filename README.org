* AMARCORD
** XFEL
*** How to start the AMARCORD XFEL GUI

 It /should/ ideally be simple:

 #+begin_example
 pip install -e '.[gui]'
 python amarcord/xfel_gui.py
 #+end_example

 Depending on your operating system, you might have to install Qt 5 or pyqt-5 separately. I’ll add some notes on that later.
*** How to administer the XFEL database

 There’s a command-line program in =amarcord/cli/admin.py= that providse administrative functions like adding proposals, changing passwords and migrating the database.
** How to start the API/GUI Web server

That’s easy:

#+begin_example
pip install -e '.[webserver]'
./run-webserver.sh
#+end_example
** How to start the Web GUI

If you’re on a Debian-based Linux distribution, there’s =purescript-frontend/install-deps.sh= to install the dependencies. If you’re not, you need at least =npm= installed. Then run:

#+begin_example
cd purescript-frontend
npm install
npx spago install
#+end_example

To run the GUI, simply run =./run-develop.sh= in =purescript-frontend=

** Workflows/Tools

The workflows (or “Tools”) can be started either /locally/ or via the /SLURM REST interface/. With it, you can start programs on your diffraction data sets or on reductions (coming soon!), observe the jobs running and see the auto-ingested results in your analysis table!

*** Local operation

To use the workflows locally (which is suboptimal, better not use that in production just yet), start the web server with a command line like the following:

#+begin_example
export AMARCORD_JOB_CONTROLLER='local:///home/path/to/workflow-results?sqliteFile=/tmp/jobtest.db'
export AMARCORD_DB_URL='sqlite:////tmp/main-database.db'
FLASK_ENV=development
FLASK_APP='amarcord.cli.webserver'
flask run
#+end_example

There’s a few paths mentioned here, namely:

- =/home/path/to/workflow-results= - is the place where the results of the workflow executions will be placed. The results will be in subdirectories, of course.
- ~sqlite:////tmp/jobtest.db~ - is the file that the job executor uses to store the jobs (note that this file doesn’t have to exist or anything, it will be created).
- ~sqlite:////tmp/main-database.db~ - this is the main database with all the crystals, diffractions and so on. Can be =sqlite=, or mysql, or what you want.

This starts the webserver on port 5000. You also need to build and start the web GUI (see above). Then point your browser to =http://localhost:1234/= and you’re good to go.

*** Usage with SLURM

Currently, there’s only a SLURM REST API backend available, but that’s fine as long as it exists [[https://confluence.desy.de/display/MXW/SLURM+REST+API][on Maxwell]]. To use it, you need to start two things:

1. the web server, as in the local case
2. the workflow daemon

The job of the workflow daemon is to poll the database for new jobs in the queue, and to start them afterwards and monitor them. When a job completes (the daemon will poll the SLURM API for that), it will look for a results JSON file and ingest that into the database.

The reason for this daemon is that we need to access some parts of the filesystem that are usually not mounted on other machines (such as the beamtime filesystem with the raw files. So we start the daemon on Maxwell and the web server only indirectly communicates with it through the database.

To start the daemon, execute something like this:

#+begin_example
unset SLURM_JWT
export $(scontrol token)
baseDir=/home/path/to/workflow-results

python amarcord/cli/workflow_daemon.py \
  --db-connection-url 'mysql+pymysql://user:password@db-host/db-name\
  --job-controller "slurmrest://max-portal.desy.de:6820/slurm/v0.0.36?baseDir=${baseDir}&partition=all&user=pmidden&jwtToken=${SLURM_JWT}&userId=${UID}"
#+end_example

Again, some notes on the paths mentioned here:

- ~baseDir=/home/path/to/workflow-results~ - this instructs the daemon to look for workflow results below this =baseDir= path
- ~--db-connection-url 'mysql+pymysql://user:password@db-host/db-name~ - instructs the daemon to look for and write to this database for queued jobs
- ~--job-controller "slurmrest://max-portal.desy.de:6820~ - tells the daemon to use this URL for polling SLURM for jobs

Note that the script above generates a token and uses it to access Maxwell. The default token length is pretty short. You might want to increase its length as described on the [[https://confluence.desy.de/display/MXW/SLURM+REST+API][Confluence page]].

** How to access AMARCORD from a script

We’ve created the =amarcord.amici= Python package containing functions to access an AMARCORD database from within your scripts. Check the package source to see the available functions.

To start using =amarcord.amici=, you can use the following =pip= command:

#+begin_example
pip install --upgrade --extra-index-url https://maxwell-token:JUX_f_ivQjyZbxZAEPYi@gitlab.desy.de/api/v4/projects/370/packages/pypi/simple amarcord
#+end_example

Note that this uses a generated token called =maxwell-token= to access the GitLab Python package registry. Two notes on that:

- Ideally, don’t share this URL with people outside XFEL/DESY for now. We’re working on making this package public, but we’re not there yet.
- You can only =pip install= when you have access to =gitlab.desy.de=.

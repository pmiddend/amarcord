"""
This type stub file was generated by pyright.
"""

import functools

"""
get_groups_list
    resolve_fname
        load
            load_file
                as_valid_path
            get_matched_categories
                close_matches
                    as_valid_path
getallcategories

"""
WORD_CLASSES = ...
WORD_PATH = ...
ALIASES = ...
def uuid_(n=...): # -> str:
    ...

WORD_FUNCS = ...
def get_groups_list(fnames): # -> list[partial[str] | Unknown | str]:
    """Get word lists from multiple word groups."""

def resolve_fname(fname): # -> list[partial[str] | Unknown] | list[Unknown]:
    """Detect if fname is a path or is a literal word. Replace any path
    shortcuts."""

def load(name): # -> list[partial[str] | Unknown]:
    """Load a list of words from file. Can use glob matching to load
    multiple files.

    Examples:
    >>> load('n/music') == ['arrange', 'carol', 'compose', ... 'yodel']
    """

@functools.lru_cache(128)
def load_file(name): # -> list[partial[str]] | list[Unknown]:
    """Load a wordlist. Does not do any name conversion."""

@functools.lru_cache(128)
def get_matched_categories(name, *a, **kw): # -> list[str]:
    """Resolve a fuzzy-matched category. Throw an error if it doesn't
    match anything."""

def close_matches(name, cutoff=...): # -> list[Unknown]:
    """Find close matching wordlist names."""

def doalias(fname): # -> str:
    """Replace aliases in string.

    Examples:
    >>>
    """

def as_valid_path(name, required=...): # -> str | None:
    ...

def prefix(pre, xs): # -> list[str]:
    """Prefix all items with a path prefix."""

def choose(items, n=...): # -> list[Unknown | str] | str:
    """Choose one item from a list."""

def sample_unique(func, n, *a, n_fails=..., unique=..., **kw): # -> list[Unknown] | set[Unknown]:
    ...

def as_multiple(x): # -> list[Unknown | str]:
    """Ensure a list or tuple."""

def find_parts_of_speech(name): # -> set[str]:
    """Given a name, find all the groups that it belongs to."""

def getallcategories(d=...): # -> list[str]:
    """Get all categories (subdirectories) from a word class (adjectives,
    nouns, etc.)"""

AVAILABLE = ...
ALL_CATEGORIES = ...
if __name__ == "__main__":
    ...
